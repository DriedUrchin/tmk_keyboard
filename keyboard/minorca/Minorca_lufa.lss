
Minorca_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00005cdc  00005d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800116  00800116  00005d86  2**0
                  ALLOC
  3 .noinit       00000004  008001be  008001be  00005d86  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000090  00000000  00000000  00006640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000009c0  00000000  00000000  000066d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001600  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e34d  00000000  00000000  00008690  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000034d6  00000000  00000000  000169dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008fcc  00000000  00000000  00019eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f60  00000000  00000000  00022e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000410e  00000000  00000000  00023de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000043e8  00000000  00000000  00027eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c18  00000000  00000000  0002c2d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
       0:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       8:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
       c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}

void debug_action(action_t action)
{
      10:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
      14:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
    if (bits >> 8) { bits >>= 8; n += 8;}
    if (bits >> 4) { bits >>= 4; n += 4;}
    if (bits >> 2) { bits >>= 2; n += 2;}
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}
      18:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
    set_sleep_mode(SLEEP_MODE_IDLE);
    sleep_enable();
    sei();
    sleep_cpu();
    sleep_disable();
}
      1c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
      20:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
{
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
      24:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      28:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__vector_10>
      2c:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__vector_11>
      30:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__vector_12>
      34:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      38:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      3c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      40:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      44:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      48:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      4c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      50:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      54:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__vector_21>
      58:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      5c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      60:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      64:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      68:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      6c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      70:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      74:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      78:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      7c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      80:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      84:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      88:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      8c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      90:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      94:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      98:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      9c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      a0:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      a4:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>
      a8:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__bad_interrupt>

000000ac <keymaps>:
      ac:	29 14 1a 08 15 17 1c 18 0c 12 13 2a 00 2b 04 16     )..........*.+..
      bc:	07 09 0a 0b 0d 0e 0f 00 28 00 e0 00 1d 1b 06 19     ........(.......
      cc:	05 11 10 36 37 38 00 e1 e2 00 c2 2c 00 2c 00 00     ...678.....,.,..
      dc:	c0 34 c1 00 29 14 1a 09 13 0a 0d 0f 18 1c e7 2a     .4..)..........*
      ec:	00 2a 04 15 16 17 07 0b 11 08 0c 00 12 00 e1 00     .*..............
      fc:	1d 1b 06 19 05 0e 10 36 37 38 00 e0 e2 00 c2 2c     .......678.....,
     10c:	00 39 00 00 c0 34 c1 00 35 34 36 37 13 1c 09 0a     .9...4..5467....
     11c:	06 15 0f 2a 00 2b 04 12 08 18 0c 07 0b 17 11 00     ...*.+..........
     12c:	16 00 e1 00 33 14 0d 0e 1b 05 10 1a 19 1d 00 e0     ....3...........
     13c:	e2 00 c2 2c 00 4c 00 00 c0 34 c1 00 35 14 1a 08     ...,.L...4..5...
     14c:	15 17 1c 18 0c 12 13 4c 00 2b 04 16 07 09 0a 0b     .......L.+......
     15c:	0d 0e 0f 00 28 00 e0 00 1d 1b 06 19 05 11 10 36     ....(..........6
     16c:	37 38 00 e1 e2 00 c2 39 00 2c 00 00 c0 34 c1 00     78.....9.,...4..
     17c:	29 14 1a 08 15 17 1c 18 0c 12 13 2a 00 2b 04 16     )..........*.+..
     18c:	07 09 0a 0b 0d 0e 0f 00 28 00 e1 00 1d 1b 06 19     ........(.......
     19c:	05 11 10 36 37 38 00 e0 e2 00 c2 2c 00 2c 00 00     ...678.....,.,..
     1ac:	c0 34 c1 00 29 01 01 01 01 01 01 01 01 01 01 01     .4..)...........
     1bc:	00 01 01 01 01 01 01 01 01 01 01 00 01 00 01 00     ................
     1cc:	01 01 01 01 01 01 01 50 52 4f 00 01 01 00 c2 c9     .......PRO......
     1dc:	00 01 00 00 c0 51 c1 00 35 1e 1f 20 21 22 23 24     .....Q..5.. !"#$
     1ec:	25 26 27 4c 00 39 4a 01 01 4b 4a 2d 2e 2f 30 00     %&'L.9J..KJ-./0.
     1fc:	28 00 01 00 4d c9 49 4e 4d 33 31 50 52 4f 00 01     (...M.INM31PRO..
     20c:	01 00 c2 e0 00 2c 00 00 c0 51 e5 00 c5 c6 c7 c8     .....,...Q......
     21c:	c3 01 01 01 01 4b 4a 29 00 4b c5 c8 e1 e5 48 dd     .....KJ).K....H.
     22c:	dc 4e 4d 00 49 00 4e 00 cb c7 c6 e3 0f 01 01 50     .NM.I.N........P
     23c:	52 4f 00 de df 00 c2 cc 00 cd 00 00 ce 51 01 00     RO...........Q..
     24c:	29 14 1a 08 15 17 1c 18 0c 12 13 2a 00 2b 04 16     )..........*.+..
     25c:	07 09 0a 0b 0d 0e 0f 00 28 00 e3 00 1d 1b 06 19     ........(.......
     26c:	05 11 10 36 37 38 00 e1 e0 00 e2 2c 00 2c 00 00     ...678.....,.,..
     27c:	c0 34 ce 00 52 1e 1f 20 21 22 23 24 25 26 27 4c     .4..R.. !"#$%&'L
     28c:	00 4f 4a 4b 01 4b 4a 2d 2e 2f 30 00 28 00 50 00     .OJK.KJ-./0.(.P.
     29c:	4d 4e 49 4e 4d 33 31 50 52 4f 00 51 df 00 c2 e0     MNINM31PRO.Q....
     2ac:	00 2c 00 00 c0 51 c1 00                             .,...Q..

000002b4 <fn_actions>:
     2b4:	f1 a6 22 8a f1 a7 f3 a0 00 00 01 8c 02 8c 04 8c     ..".............
     2c4:	08 8c 21 8a 00 00 01 8c f3 a0 f3 a4 21 8a 00 00     ..!.........!...
     2d4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2e4:	00 00 00 00 00 00 00 00 00 00 00 00 4c 05 f1 a9     ............L...

000002f4 <__c.1520>:
     2f4:	0a 00                                               ..

000002f6 <__c.1518>:
     2f6:	25 30 31 36 62 00                                   %016b.

000002fc <__c.1516>:
     2fc:	3a 20 00                                            : .

000002ff <__c.1514>:
     2ff:	25 30 32 58 00                                      %02X.

00000304 <__c.1511>:
     304:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     314:	42 43 44 45 46 0a 00                                BCDEF..

0000031b <__c.1469>:
     31b:	0a 00                                               ..

0000031d <__c.1467>:
     31d:	25 30 32 58 00                                      %02X.

00000322 <__c.1465>:
     322:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000032c <__c.5054>:
     32c:	5b 73 5d 00                                         [s].

00000330 <__c.5052>:
     330:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     340:	00                                                  .

00000341 <__c.5050>:
     341:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     351:	00                                                  .

00000352 <__c.4841>:
     352:	5b 57 5d 00                                         [W].

00000356 <__c.4837>:
     356:	5b 53 5d 00                                         [S].

0000035a <__c.4833>:
     35a:	5b 52 5d 00                                         [R].

0000035e <__c.4828>:
     35e:	5b 44 5d 00                                         [D].

00000362 <__c.4821>:
     362:	5b 43 5d 00                                         [C].

00000366 <KeyboardReport>:
     366:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     376:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     386:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     396:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003a5 <MouseReport>:
     3a5:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     3b5:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3c5:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3d5:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3e5:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003f2 <ExtrakeyReport>:
     3f2:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     402:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     412:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     422:	10 95 01 81 00 c0                                   ......

00000428 <ConsoleReport>:
     428:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     438:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000448 <NKROReport>:
     448:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     458:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     468:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     478:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000481 <DeviceDescriptor>:
     481:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     491:	00 01                                               ..

00000493 <ConfigurationDescriptor>:
     493:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     4a3:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     4b3:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     4c3:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     4d3:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     4e3:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     4f3:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     503:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     513:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000520 <LanguageString>:
     520:	04 03 09 04                                         ....

00000524 <ManufacturerString>:
     524:	22 03 50 00 61 00 6e 00 63 00 20 00 49 00 6e 00     ".P.a.n.c. .I.n.
     534:	74 00 65 00 72 00 61 00 63 00 74 00 69 00 76 00     t.e.r.a.c.t.i.v.
     544:	65 00 00 00                                         e...

00000548 <ProductString>:
     548:	10 03 4d 00 69 00 6e 00 6f 00 72 00 63 00 61 00     ..M.i.n.o.r.c.a.
     558:	00 00                                               ..

0000055a <__c.4554>:
     55a:	0a 00                                               ..

0000055c <__c.4549>:
     55c:	25 30 32 58 20 00                                   %02X .

00000562 <__c.4546>:
     562:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     572:	20 00                                                .

00000574 <__c.4920>:
     574:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

0000057f <__c.4761>:
     57f:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     58f:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

0000059d <__c.4744>:
     59d:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     5ad:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000005bb <__c.4871>:
     5bb:	64 6f 6e 65 2e 0a 00                                done...

000005c2 <__c.4865>:
     5c2:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     5d2:	2e 2e 2e 20 00                                      ... .

000005d7 <__c.4760>:
     5d7:	29 0a 00                                            )..

000005da <__c.4758>:
     5da:	25 75 00                                            %u.

000005dd <__c.4756>:
     5dd:	2f 00                                               /.

000005df <__c.4754>:
     5df:	25 75 00                                            %u.

000005e2 <__c.4752>:
     5e2:	5d 28 00                                            ](.

000005e5 <__c.4750>:
     5e5:	25 64 00                                            %d.

000005e8 <__c.4748>:
     5e8:	20 00                                                .

000005ea <__c.4746>:
     5ea:	25 64 00                                            %d.

000005ed <__c.4744>:
     5ed:	20 00                                                .

000005ef <__c.4742>:
     5ef:	25 64 00                                            %d.

000005f2 <__c.4740>:
     5f2:	20 00                                                .

000005f4 <__c.4738>:
     5f4:	25 64 00                                            %d.

000005f7 <__c.4736>:
     5f7:	7c 00                                               |.

000005f9 <__c.4734>:
     5f9:	25 30 32 58 00                                      %02X.

000005fe <__c.4732>:
     5fe:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     60e:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     61e:	20 5b 00                                             [.

00000621 <__c.5182>:
     621:	3f 00                                               ?.

00000623 <__c.5173>:
     623:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

0000062e <__c.5171>:
     62e:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000638 <__c.5168>:
     638:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     648:	25 30 34 6c 58 0a 00                                %04lX..

0000064f <__c.5166>:
     64f:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     65f:	58 0a 00                                            X..

00000662 <__c.5164>:
     662:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     672:	58 0a 00                                            X..

00000675 <__c.5162>:
     675:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     685:	6c 3a 20 25 58 0a 00                                l: %X..

0000068c <__c.5160>:
     68c:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     69c:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000006a6 <__c.5158>:
     6a6:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000006b4 <__c.5155>:
     6b4:	47 43 43 3a 20 34 2e 33 2e 33 20 41 56 52 2d 4c     GCC: 4.3.3 AVR-L
     6c4:	49 42 43 3a 20 31 2e 36 2e 37 20 41 56 52 5f 41     IBC: 1.6.7 AVR_A
     6d4:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000006df <__c.5153>:
     6df:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     6ef:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     6ff:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     70f:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     71f:	30 39 36 0a 00                                      096..

00000724 <__c.5151>:
     724:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     734:	32 30 3a 35 32 3a 33 30 20 4d 61 79 20 32 39 20     20:52:30 May 29 
     744:	32 30 31 36 29 0a 00                                2016)..

0000074b <__c.5149>:
     74b:	56 49 44 3a 20 30 78 46 45 45 44 28 50 61 6e 63     VID: 0xFEED(Panc
     75b:	20 49 6e 74 65 72 61 63 74 69 76 65 29 20 50 49      Interactive) PI
     76b:	44 3a 20 30 78 36 30 36 30 28 4d 69 6e 6f 72 63     D: 0x6060(Minorc
     77b:	61 29 20 56 45 52 3a 20 30 78 30 30 30 31 0a 00     a) VER: 0x0001..

0000078b <__c.5147>:
     78b:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     79b:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     7ab:	6f 72 20 4d 69 6e 6f 72 63 61 0a 00                 or Minorca..

000007b7 <__c.5145>:
     7b7:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000007c6 <__c.5142>:
     7c6:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000007d3 <__c.5140>:
     7d3:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000007df <__c.5137>:
     7df:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000007ef <__c.5135>:
     7ef:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000007fe <__c.5132>:
     7fe:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

0000080c <__c.5130>:
     80c:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000819 <__c.5127>:
     819:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000825 <__c.5125>:
     825:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000832 <__c.5122>:
     832:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     842:	00                                                  .

00000843 <__c.5119>:
     843:	43 3e 20 00                                         C> .

00000847 <__c.5113>:
     847:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000852 <__c.5075>:
     852:	0a 00                                               ..

00000854 <__c.5073>:
     854:	25 75 00                                            %u.

00000857 <__c.5071>:
     857:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

0000085f <__c.5069>:
     85f:	0a 00                                               ..

00000861 <__c.5067>:
     861:	25 75 00                                            %u.

00000864 <__c.5065>:
     864:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     874:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000880 <__c.5063>:
     880:	0a 00                                               ..

00000882 <__c.5061>:
     882:	25 75 00                                            %u.

00000885 <__c.5059>:
     885:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     895:	20 00                                                .

00000897 <__c.5057>:
     897:	0a 00                                               ..

00000899 <__c.5055>:
     899:	25 75 00                                            %u.

0000089c <__c.5053>:
     89c:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000008a6 <__c.5051>:
     8a6:	0a 00                                               ..

000008a8 <__c.5049>:
     8a8:	25 75 00                                            %u.

000008ab <__c.5047>:
     8ab:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     8bb:	20 00                                                .

000008bd <__c.5045>:
     8bd:	0a 00                                               ..

000008bf <__c.5043>:
     8bf:	25 75 00                                            %u.

000008c2 <__c.5041>:
     8c2:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     8d2:	20 00                                                .

000008d4 <__c.5039>:
     8d4:	0a 00                                               ..

000008d6 <__c.5037>:
     8d6:	25 75 00                                            %u.

000008d9 <__c.5035>:
     8d9:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     8e9:	74 72 6f 6c 3a 20 00                                trol: .

000008f0 <__c.5033>:
     8f0:	0a 00                                               ..

000008f2 <__c.5031>:
     8f2:	25 75 00                                            %u.

000008f5 <__c.5029>:
     8f5:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     905:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000090e <__c.5027>:
     90e:	0a 00                                               ..

00000910 <__c.5025>:
     910:	25 30 32 58 00                                      %02X.

00000915 <__c.5023>:
     915:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     925:	77 3a 20 00                                         w: .

00000929 <__c.5020>:
     929:	0a 00                                               ..

0000092b <__c.5018>:
     92b:	25 75 00                                            %u.

0000092e <__c.5016>:
     92e:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000937 <__c.5014>:
     937:	0a 00                                               ..

00000939 <__c.5012>:
     939:	25 75 00                                            %u.

0000093c <__c.5010>:
     93c:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000948 <__c.5008>:
     948:	0a 00                                               ..

0000094a <__c.5006>:
     94a:	25 75 00                                            %u.

0000094d <__c.5004>:
     94d:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000957 <__c.5002>:
     957:	0a 00                                               ..

00000959 <__c.5000>:
     959:	25 75 00                                            %u.

0000095c <__c.4998>:
     95c:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000966 <__c.4996>:
     966:	0a 00                                               ..

00000968 <__c.4994>:
     968:	25 30 32 58 00                                      %02X.

0000096d <__c.4992>:
     96d:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     97d:	3a 20 00                                            : .

00000980 <__c.4989>:
     980:	0a 00                                               ..

00000982 <__c.4987>:
     982:	25 75 00                                            %u.

00000985 <__c.4985>:
     985:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000995 <__c.4980>:
     995:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     9a5:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     9b5:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9c5:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9d5:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     9e5:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     9f5:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     a05:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     a15:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a25:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a35:	4b 52 4f 0a 00                                      KRO..

00000a3a <__c.5216>:
     a3a:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     a4a:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     a5a:	73 65 6b 65 79 0a 00                                sekey..

00000a61 <__c.5451>:
     a61:	4c 25 64 0a 00                                      L%d..

00000a66 <__c.5232>:
     a66:	43 3e 20 00                                         C> .

00000a6a <__c.5230>:
     a6a:	3f 00                                               ?.

00000a6c <__c.5227>:
     a6c:	4d 3e 20 00                                         M> .

00000a70 <__c.5394>:
     a70:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     a80:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     a90:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     aa0:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     ab0:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000abe <__c.5392>:
     abe:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     ace:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     ade:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     aee:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     afe:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     b0e:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     b1e:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     b2e:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     b3e:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     b4e:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     b5e:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     b6e:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     b7e:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     b8e:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     b9e:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     bae:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000bb9 <__c.5425>:
     bb9:	4d 3e 00                                            M>.

00000bbc <__c.5423>:
     bbc:	4d 25 64 3e 20 00                                   M%d> .

00000bc2 <__c.5421>:
     bc2:	3f 00                                               ?.

00000bc4 <__c.5418>:
     bc4:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000bd1 <__c.5404>:
     bd1:	43 3e 20 00                                         C> .

00000bd5 <__c.5276>:
     bd5:	0a 00                                               ..

00000bd7 <__c.5274>:
     bd7:	25 75 00                                            %u.

00000bda <__c.5272>:
     bda:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     bea:	5f 6d 61 78 3a 20 00                                _max: .

00000bf1 <__c.5270>:
     bf1:	0a 00                                               ..

00000bf3 <__c.5268>:
     bf3:	25 75 00                                            %u.

00000bf6 <__c.5266>:
     bf6:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     c06:	65 64 3a 20 00                                      ed: .

00000c0b <__c.5264>:
     c0b:	0a 00                                               ..

00000c0d <__c.5262>:
     c0d:	25 75 00                                            %u.

00000c10 <__c.5260>:
     c10:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     c20:	00                                                  .

00000c21 <__c.5258>:
     c21:	0a 00                                               ..

00000c23 <__c.5256>:
     c23:	25 75 00                                            %u.

00000c26 <__c.5254>:
     c26:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000c35 <__c.5252>:
     c35:	0a 00                                               ..

00000c37 <__c.5250>:
     c37:	25 75 00                                            %u.

00000c3a <__c.5248>:
     c3a:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     c4a:	20 00                                                .

00000c4c <__c.5246>:
     c4c:	0a 00                                               ..

00000c4e <__c.5244>:
     c4e:	25 75 00                                            %u.

00000c51 <__c.5242>:
     c51:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     c61:	20 00                                                .

00000c63 <__c.5240>:
     c63:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000c71 <__c.5311>:
     c71:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     c81:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000c8c <__c.5308>:
     c8c:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     c9c:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000ca5 <__c.5305>:
     ca5:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     cb5:	20 25 64 0a 00                                       %d..

00000cba <__c.5302>:
     cba:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     cca:	64 0a 00                                            d..

00000ccd <__c.5299>:
     ccd:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     cdd:	0a 00                                               ..

00000cdf <__c.5295>:
     cdf:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000cee <__c.5367>:
     cee:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     cfe:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000d09 <__c.5364>:
     d09:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     d19:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000d22 <__c.5361>:
     d22:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     d32:	20 25 64 0a 00                                       %d..

00000d37 <__c.5358>:
     d37:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     d47:	64 0a 00                                            d..

00000d4a <__c.5355>:
     d4a:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     d5a:	0a 00                                               ..

00000d5c <__c.5351>:
     d5c:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00 00     mk_delay = %d...

00000d6c <__ctors_end>:
     d6c:	11 24       	eor	r1, r1
     d6e:	1f be       	out	0x3f, r1	; 63
     d70:	cf ef       	ldi	r28, 0xFF	; 255
     d72:	da e0       	ldi	r29, 0x0A	; 10
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	cd bf       	out	0x3d, r28	; 61

00000d78 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     d78:	04 b6       	in	r0, 0x34	; 52
     d7a:	03 fe       	sbrs	r0, 3
     d7c:	24 c0       	rjmp	.+72     	; 0xdc6 <__do_copy_data>
     d7e:	80 91 be 01 	lds	r24, 0x01BE
     d82:	90 91 bf 01 	lds	r25, 0x01BF
     d86:	a0 91 c0 01 	lds	r26, 0x01C0
     d8a:	b0 91 c1 01 	lds	r27, 0x01C1
     d8e:	87 50       	subi	r24, 0x07	; 7
     d90:	90 4b       	sbci	r25, 0xB0	; 176
     d92:	a7 40       	sbci	r26, 0x07	; 7
     d94:	b0 4b       	sbci	r27, 0xB0	; 176
     d96:	b9 f4       	brne	.+46     	; 0xdc6 <__do_copy_data>
        reset_key = 0;
     d98:	10 92 be 01 	sts	0x01BE, r1
     d9c:	10 92 bf 01 	sts	0x01BF, r1
     da0:	10 92 c0 01 	sts	0x01C0, r1
     da4:	10 92 c1 01 	sts	0x01C1, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     da8:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     daa:	84 b7       	in	r24, 0x34	; 52
     dac:	87 7f       	andi	r24, 0xF7	; 247
     dae:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     db0:	88 e1       	ldi	r24, 0x18	; 24
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	80 93 60 00 	sts	0x0060, r24
     dba:	10 92 60 00 	sts	0x0060, r1
     dbe:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     dc0:	e0 e0       	ldi	r30, 0x00	; 0
     dc2:	f8 e3       	ldi	r31, 0x38	; 56
     dc4:	09 95       	icall

00000dc6 <__do_copy_data>:
     dc6:	11 e0       	ldi	r17, 0x01	; 1
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b1 e0       	ldi	r27, 0x01	; 1
     dcc:	ec ed       	ldi	r30, 0xDC	; 220
     dce:	fc e5       	ldi	r31, 0x5C	; 92
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <.do_copy_data_start>

00000dd2 <.do_copy_data_loop>:
     dd2:	05 90       	lpm	r0, Z+
     dd4:	0d 92       	st	X+, r0

00000dd6 <.do_copy_data_start>:
     dd6:	a6 31       	cpi	r26, 0x16	; 22
     dd8:	b1 07       	cpc	r27, r17
     dda:	d9 f7       	brne	.-10     	; 0xdd2 <.do_copy_data_loop>

00000ddc <__do_clear_bss>:
     ddc:	11 e0       	ldi	r17, 0x01	; 1
     dde:	a6 e1       	ldi	r26, 0x16	; 22
     de0:	b1 e0       	ldi	r27, 0x01	; 1
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <.do_clear_bss_start>

00000de4 <.do_clear_bss_loop>:
     de4:	1d 92       	st	X+, r1

00000de6 <.do_clear_bss_start>:
     de6:	ae 3b       	cpi	r26, 0xBE	; 190
     de8:	b1 07       	cpc	r27, r17
     dea:	e1 f7       	brne	.-8      	; 0xde4 <.do_clear_bss_loop>
     dec:	0e 94 75 0b 	call	0x16ea	; 0x16ea <main>
     df0:	0c 94 6c 2e 	jmp	0x5cd8	; 0x5cd8 <_exit>

00000df4 <__bad_interrupt>:
     df4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000df8 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     df8:	ff 93       	push	r31
	push	ZL
     dfa:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     dfc:	e0 91 16 01 	lds	r30, 0x0116
	lds	ZH, xfunc_out+1	;/
     e00:	f0 91 17 01 	lds	r31, 0x0117
	sbiw	ZL, 0		;Skip if null
     e04:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     e06:	09 f0       	breq	.+2      	; 0xe0a <xputc+0x12>
	icall
     e08:	09 95       	icall
2:	pop	ZL
     e0a:	ef 91       	pop	r30
	pop	ZH
     e0c:	ff 91       	pop	r31
	ret
     e0e:	08 95       	ret

00000e10 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     e10:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     e12:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     e14:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     e16:	11 f0       	breq	.+4      	; 0xe1c <xputs+0xc>
	rcall	xputc
     e18:	ef df       	rcall	.-34     	; 0xdf8 <xputc>
	rjmp	1b
     e1a:	fb cf       	rjmp	.-10     	; 0xe12 <xputs+0x2>
2:	ret
     e1c:	08 95       	ret

00000e1e <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     e1e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     e20:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     e22:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     e24:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     e26:	0c c0       	rjmp	.+24     	; 0xe40 <xitoa+0x22>
	neg	r20		;
     e28:	41 95       	neg	r20
	sbrs	r25, 7		;
     e2a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <xitoa+0x22>
	ldi	r30, '-'	;
     e2e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     e30:	60 95       	com	r22
	com	r23		;
     e32:	70 95       	com	r23
	com	r24		;
     e34:	80 95       	com	r24
	com	r25		;
     e36:	90 95       	com	r25
	adc	r22, r1		;
     e38:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     e3a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     e3c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     e3e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     e40:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <xitoa+0x2a>
	neg	r18		;
     e44:	21 95       	neg	r18
	ldi	r19, '0'	;/
     e46:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     e48:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     e4a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     e4c:	66 0f       	add	r22, r22
	rol	r23		;
     e4e:	77 1f       	adc	r23, r23
	rol	r24		;
     e50:	88 1f       	adc	r24, r24
	rol	r25		;
     e52:	99 1f       	adc	r25, r25
	rol	r26		;
     e54:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     e56:	a4 17       	cp	r26, r20
	brcs	3f		;
     e58:	10 f0       	brcs	.+4      	; 0xe5e <xitoa+0x40>
	sub	r26, r20	;
     e5a:	a4 1b       	sub	r26, r20
	inc	r22		;
     e5c:	63 95       	inc	r22
3:	dec	r21		;
     e5e:	5a 95       	dec	r21
	brne	2b		;/
     e60:	a9 f7       	brne	.-22     	; 0xe4c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     e62:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     e64:	08 f0       	brcs	.+2      	; 0xe68 <xitoa+0x4a>
	subi	r26, -7		;
     e66:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     e68:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     e6a:	af 93       	push	r26
	inc	r31		;/
     e6c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     e6e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     e70:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     e72:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     e74:	91 05       	cpc	r25, r1
	brne	1b		;/
     e76:	41 f7       	brne	.-48     	; 0xe48 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     e78:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     e7a:	11 f4       	brne	.+4      	; 0xe80 <xitoa+0x62>
	push	r30		;
     e7c:	ef 93       	push	r30
	inc	r31		;/
     e7e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     e80:	f2 17       	cp	r31, r18
	brcc	6f		;
     e82:	18 f4       	brcc	.+6      	; 0xe8a <xitoa+0x6c>
	push	r19		;
     e84:	3f 93       	push	r19
	inc	r31		;
     e86:	f3 95       	inc	r31
	rjmp	5b		;/
     e88:	fb cf       	rjmp	.-10     	; 0xe80 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     e8a:	8f 91       	pop	r24
	rcall	xputc		;
     e8c:	b5 df       	rcall	.-150    	; 0xdf8 <xputc>
	dec	r31		;
     e8e:	fa 95       	dec	r31
	brne	6b		;/
     e90:	e1 f7       	brne	.-8      	; 0xe8a <xitoa+0x6c>

	ret
     e92:	08 95       	ret

00000e94 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     e94:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     e96:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     e98:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     e9a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     e9c:	21 f0       	breq	.+8      	; 0xea6 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     e9e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     ea0:	19 f0       	breq	.+6      	; 0xea8 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     ea2:	aa df       	rcall	.-172    	; 0xdf8 <xputc>
	rjmp	0b		;/
     ea4:	f9 cf       	rjmp	.-14     	; 0xe98 <xvprintf+0x4>
90:	ret
     ea6:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     ea8:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     eaa:	e8 94       	clt
	_LPMI	r21		;Get flags
     eac:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     eae:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     eb0:	c1 f3       	breq	.-16     	; 0xea2 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     eb2:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     eb4:	11 f4       	brne	.+4      	; 0xeba <xvprintf+0x26>
	set			;/
     eb6:	68 94       	set
22:	_LPMI	r21		;Get width
     eb8:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     eba:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     ebc:	48 f4       	brcc	.+18     	; 0xed0 <xvprintf+0x3c>
	subi	r21, '0'	;
     ebe:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     ec0:	90 f3       	brcs	.-28     	; 0xea6 <xvprintf+0x12>
	lsl	r18		;
     ec2:	22 0f       	add	r18, r18
	mov	r0, r18		;
     ec4:	02 2e       	mov	r0, r18
	lsl	r18		;
     ec6:	22 0f       	add	r18, r18
	lsl	r18		;
     ec8:	22 0f       	add	r18, r18
	add	r18, r0		;
     eca:	20 0d       	add	r18, r0
	add	r18, r21	;
     ecc:	25 0f       	add	r18, r21
	rjmp	22b		;/
     ece:	f4 cf       	rjmp	.-24     	; 0xeb8 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     ed0:	0e f4       	brtc	.+2      	; 0xed4 <xvprintf+0x40>
	neg	r18		;
     ed2:	21 95       	neg	r18
25:	ld	r24, Y+		;
     ed4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     ed6:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     ed8:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     eda:	19 f3       	breq	.-58     	; 0xea2 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     edc:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     ede:	29 f1       	breq	.+74     	; 0xf2a <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     ee0:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     ee2:	59 f1       	breq	.+86     	; 0xf3a <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     ee4:	bc 01       	movw	r22, r24
	clr	r24		;
     ee6:	88 27       	eor	r24, r24
	clr	r25		;
     ee8:	99 27       	eor	r25, r25
	clt			;/
     eea:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     eec:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     eee:	21 f4       	brne	.+8      	; 0xef8 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ef0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ef2:	99 91       	ld	r25, Y+
	set			;
     ef4:	68 94       	set
	_LPMI	r21		;/
     ef6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ef8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     efa:	39 f4       	brne	.+14     	; 0xf0a <xvprintf+0x76>
	ldi	r20, -10	;
     efc:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     efe:	7e f0       	brts	.+30     	; 0xf1e <xvprintf+0x8a>
	sbrs	r23, 7		;
     f00:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     f02:	0d c0       	rjmp	.+26     	; 0xf1e <xvprintf+0x8a>
	ldi	r24, -1		;
     f04:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     f06:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     f0a:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     f0c:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     f0e:	39 f0       	breq	.+14     	; 0xf1e <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     f10:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     f12:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     f14:	21 f0       	breq	.+8      	; 0xf1e <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     f16:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     f18:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     f1a:	09 f0       	breq	.+2      	; 0xf1e <xvprintf+0x8a>
	ret			;abort
     f1c:	08 95       	ret
40:	push	ZH		;Output the value
     f1e:	ff 93       	push	r31
	push	ZL		;
     f20:	ef 93       	push	r30
	rcall	xitoa		;
     f22:	7d df       	rcall	.-262    	; 0xe1e <xitoa>
42:	pop	ZL		;
     f24:	ef 91       	pop	r30
	pop	ZH		;
     f26:	ff 91       	pop	r31
	rjmp	0b		;/
     f28:	b7 cf       	rjmp	.-146    	; 0xe98 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     f2a:	ff 93       	push	r31
	push	ZL
     f2c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     f2e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     f30:	81 91       	ld	r24, Z+
	cpi	r24, 0
     f32:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     f34:	b9 f3       	breq	.-18     	; 0xf24 <xvprintf+0x90>
	rcall	xputc
     f36:	60 df       	rcall	.-320    	; 0xdf8 <xputc>
	rjmp	51b
     f38:	fb cf       	rjmp	.-10     	; 0xf30 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     f3a:	ff 93       	push	r31
	push	ZL
     f3c:	ef 93       	push	r30
	rcall	xputs
     f3e:	68 df       	rcall	.-304    	; 0xe10 <xputs>
	rjmp	42b
     f40:	f1 cf       	rjmp	.-30     	; 0xf24 <xvprintf+0x90>

00000f42 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     f42:	df 93       	push	r29
	push	YL
     f44:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     f46:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     f48:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     f4a:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     f4c:	a3 df       	rcall	.-186    	; 0xe94 <xvprintf>
	pop	YL
     f4e:	cf 91       	pop	r28
	pop	YH
     f50:	df 91       	pop	r29
	ret
     f52:	08 95       	ret

00000f54 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     f54:	9d e0       	ldi	r25, 0x0D	; 13
     f56:	79 9f       	mul	r23, r25
     f58:	f0 01       	movw	r30, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	e6 0f       	add	r30, r22
     f5e:	f1 1d       	adc	r31, r1
     f60:	94 e3       	ldi	r25, 0x34	; 52
     f62:	89 9f       	mul	r24, r25
     f64:	c0 01       	movw	r24, r0
     f66:	11 24       	eor	r1, r1
     f68:	e8 0f       	add	r30, r24
     f6a:	f9 1f       	adc	r31, r25
     f6c:	e4 55       	subi	r30, 0x54	; 84
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	e4 91       	lpm	r30, Z+
}
     f72:	8e 2f       	mov	r24, r30
     f74:	08 95       	ret

00000f76 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     f76:	e8 2f       	mov	r30, r24
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	ec 5c       	subi	r30, 0xCC	; 204
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	25 91       	lpm	r18, Z+
     f84:	34 91       	lpm	r19, Z+
}
     f86:	c9 01       	movw	r24, r18
     f88:	08 95       	ret

00000f8a <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
     f8a:	e8 2f       	mov	r30, r24
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	e8 5e       	subi	r30, 0xE8	; 232
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
    return matrix[row];
}
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	08 95       	ret

00000f9c <unselect_rows>:
 * pin: F0  F1  F4  F5 
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b00110011;
     f9c:	80 b3       	in	r24, 0x10	; 16
     f9e:	8c 7c       	andi	r24, 0xCC	; 204
     fa0:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b00110011;
     fa2:	81 b3       	in	r24, 0x11	; 17
     fa4:	8c 7c       	andi	r24, 0xCC	; 204
     fa6:	81 bb       	out	0x11, r24	; 17
}
     fa8:	08 95       	ret

00000faa <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     faa:	0e 94 ce 07 	call	0xf9c	; 0xf9c <unselect_rows>
 * pin: F6  F7  B6  B5  B4  D7  C7  C6  D3  D2  D1  D0  
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<6 | 1<<7);
     fae:	80 b3       	in	r24, 0x10	; 16
     fb0:	8f 73       	andi	r24, 0x3F	; 63
     fb2:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<6 | 1<<7);
     fb4:	81 b3       	in	r24, 0x11	; 17
     fb6:	80 6c       	ori	r24, 0xC0	; 192
     fb8:	81 bb       	out	0x11, r24	; 17
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4);
     fba:	84 b1       	in	r24, 0x04	; 4
     fbc:	8f 70       	andi	r24, 0x0F	; 15
     fbe:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<6 | 1<<5 | 1<<4);
     fc0:	85 b1       	in	r24, 0x05	; 5
     fc2:	80 67       	ori	r24, 0x70	; 112
     fc4:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     fc6:	8a b1       	in	r24, 0x0a	; 10
     fc8:	80 77       	andi	r24, 0x70	; 112
     fca:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     fcc:	8b b1       	in	r24, 0x0b	; 11
     fce:	8f 68       	ori	r24, 0x8F	; 143
     fd0:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     fd2:	87 b1       	in	r24, 0x07	; 7
     fd4:	8f 73       	andi	r24, 0x3F	; 63
     fd6:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     fd8:	88 b1       	in	r24, 0x08	; 8
     fda:	80 6c       	ori	r24, 0xC0	; 192
     fdc:	88 b9       	out	0x08, r24	; 8
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     fe2:	fc 01       	movw	r30, r24
     fe4:	e8 5e       	subi	r30, 0xE8	; 232
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	11 82       	std	Z+1, r1	; 0x01
     fea:	10 82       	st	Z, r1
        matrix_debouncing[i] = 0;
     fec:	fc 01       	movw	r30, r24
     fee:	e0 5e       	subi	r30, 0xE0	; 224
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	11 82       	std	Z+1, r1	; 0x01
     ff4:	10 82       	st	Z, r1
     ff6:	02 96       	adiw	r24, 0x02	; 2
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	91 05       	cpc	r25, r1
     ffc:	91 f7       	brne	.-28     	; 0xfe2 <matrix_init+0x38>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     ffe:	08 95       	ret

00001000 <matrix_scan>:

uint8_t matrix_scan(void)
{
    1000:	2f 92       	push	r2
    1002:	3f 92       	push	r3
    1004:	4f 92       	push	r4
    1006:	5f 92       	push	r5
    1008:	6f 92       	push	r6
    100a:	7f 92       	push	r7
    100c:	8f 92       	push	r8
    100e:	9f 92       	push	r9
    1010:	af 92       	push	r10
    1012:	bf 92       	push	r11
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	60 e2       	ldi	r22, 0x20	; 32
    1026:	a6 2e       	mov	r10, r22
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	b6 2e       	mov	r11, r22
    102c:	dd 24       	eor	r13, r13
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    102e:	55 e0       	ldi	r21, 0x05	; 5
    1030:	c5 2e       	mov	r12, r21
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
    1032:	22 24       	eor	r2, r2
    1034:	23 94       	inc	r2
    1036:	d2 14       	cp	r13, r2
    1038:	69 f0       	breq	.+26     	; 0x1054 <matrix_scan+0x54>
    103a:	d2 14       	cp	r13, r2
    103c:	40 f0       	brcs	.+16     	; 0x104e <matrix_scan+0x4e>
    103e:	42 e0       	ldi	r20, 0x02	; 2
    1040:	34 2e       	mov	r3, r20
    1042:	d3 14       	cp	r13, r3
    1044:	51 f0       	breq	.+20     	; 0x105a <matrix_scan+0x5a>
    1046:	83 e0       	ldi	r24, 0x03	; 3
    1048:	d8 16       	cp	r13, r24
    104a:	61 f4       	brne	.+24     	; 0x1064 <matrix_scan+0x64>
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <matrix_scan+0x60>
        case 0:
            DDRF  |= (1<<0);
    104e:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
    1050:	88 98       	cbi	0x11, 0	; 17
    1052:	08 c0       	rjmp	.+16     	; 0x1064 <matrix_scan+0x64>
            break;
        case 1:
            DDRF  |= (1<<1);
    1054:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
    1056:	89 98       	cbi	0x11, 1	; 17
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <matrix_scan+0x64>
            break;
        case 2:
            DDRF  |= (1<<4);
    105a:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
    105c:	8c 98       	cbi	0x11, 4	; 17
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <matrix_scan+0x64>
            break;
        case 3:
            DDRF  |= (1<<5);
    1060:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
    1062:	8d 98       	cbi	0x11, 5	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1064:	80 ea       	ldi	r24, 0xA0	; 160
    1066:	8a 95       	dec	r24
    1068:	f1 f7       	brne	.-4      	; 0x1066 <matrix_scan+0x66>
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
    106a:	2f b1       	in	r18, 0x0f	; 15
    106c:	8f b1       	in	r24, 0x0f	; 15
    106e:	68 2f       	mov	r22, r24
    1070:	77 27       	eor	r23, r23
    1072:	67 fd       	sbrc	r22, 7
    1074:	70 95       	com	r23
    1076:	60 95       	com	r22
    1078:	70 95       	com	r23
    107a:	66 27       	eor	r22, r22
    107c:	77 0f       	add	r23, r23
    107e:	66 1f       	adc	r22, r22
    1080:	77 27       	eor	r23, r23
    1082:	66 0f       	add	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	1e 99       	sbic	0x03, 6	; 3
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <matrix_scan+0x92>
    108a:	84 e0       	ldi	r24, 0x04	; 4
    108c:	48 2e       	mov	r4, r24
    108e:	51 2c       	mov	r5, r1
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <matrix_scan+0x96>
    1092:	44 24       	eor	r4, r4
    1094:	55 24       	eor	r5, r5
    1096:	1d 99       	sbic	0x03, 5	; 3
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <matrix_scan+0xa2>
    109a:	08 e0       	ldi	r16, 0x08	; 8
    109c:	60 2e       	mov	r6, r16
    109e:	71 2c       	mov	r7, r1
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <matrix_scan+0xa6>
    10a2:	66 24       	eor	r6, r6
    10a4:	77 24       	eor	r7, r7
    10a6:	1c 99       	sbic	0x03, 4	; 3
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <matrix_scan+0xb2>
    10aa:	10 e1       	ldi	r17, 0x10	; 16
    10ac:	81 2e       	mov	r8, r17
    10ae:	91 2c       	mov	r9, r1
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <matrix_scan+0xb6>
    10b2:	88 24       	eor	r8, r8
    10b4:	99 24       	eor	r9, r9
    10b6:	89 b1       	in	r24, 0x09	; 9
    10b8:	48 2f       	mov	r20, r24
    10ba:	55 27       	eor	r21, r21
    10bc:	47 fd       	sbrc	r20, 7
    10be:	50 95       	com	r21
    10c0:	40 95       	com	r20
    10c2:	50 95       	com	r21
    10c4:	44 27       	eor	r20, r20
    10c6:	55 0f       	add	r21, r21
    10c8:	44 1f       	adc	r20, r20
    10ca:	55 27       	eor	r21, r21
    10cc:	a5 e0       	ldi	r26, 0x05	; 5
    10ce:	44 0f       	add	r20, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	aa 95       	dec	r26
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <matrix_scan+0xce>
    10d6:	86 b1       	in	r24, 0x06	; 6
    10d8:	99 27       	eor	r25, r25
    10da:	87 fd       	sbrc	r24, 7
    10dc:	90 95       	com	r25
    10de:	80 95       	com	r24
    10e0:	90 95       	com	r25
    10e2:	88 27       	eor	r24, r24
    10e4:	99 0f       	add	r25, r25
    10e6:	88 1f       	adc	r24, r24
    10e8:	99 27       	eor	r25, r25
    10ea:	e6 e0       	ldi	r30, 0x06	; 6
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	ea 95       	dec	r30
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <matrix_scan+0xec>
    10f4:	36 99       	sbic	0x06, 6	; 6
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <matrix_scan+0x100>
    10f8:	30 e8       	ldi	r19, 0x80	; 128
    10fa:	e3 2e       	mov	r14, r19
    10fc:	f1 2c       	mov	r15, r1
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <matrix_scan+0x104>
    1100:	ee 24       	eor	r14, r14
    1102:	ff 24       	eor	r15, r15
    1104:	4b 99       	sbic	0x09, 3	; 9
    1106:	03 c0       	rjmp	.+6      	; 0x110e <matrix_scan+0x10e>
    1108:	00 e0       	ldi	r16, 0x00	; 0
    110a:	11 e0       	ldi	r17, 0x01	; 1
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <matrix_scan+0x112>
    110e:	00 e0       	ldi	r16, 0x00	; 0
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	4a 99       	sbic	0x09, 2	; 9
    1114:	03 c0       	rjmp	.+6      	; 0x111c <matrix_scan+0x11c>
    1116:	c0 e0       	ldi	r28, 0x00	; 0
    1118:	d2 e0       	ldi	r29, 0x02	; 2
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <matrix_scan+0x120>
    111c:	c0 e0       	ldi	r28, 0x00	; 0
    111e:	d0 e0       	ldi	r29, 0x00	; 0
    1120:	49 99       	sbic	0x09, 1	; 9
    1122:	03 c0       	rjmp	.+6      	; 0x112a <matrix_scan+0x12a>
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b4 e0       	ldi	r27, 0x04	; 4
    1128:	02 c0       	rjmp	.+4      	; 0x112e <matrix_scan+0x12e>
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	48 99       	sbic	0x09, 0	; 9
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <matrix_scan+0x138>
    1132:	e0 e0       	ldi	r30, 0x00	; 0
    1134:	f8 e0       	ldi	r31, 0x08	; 8
    1136:	02 c0       	rjmp	.+4      	; 0x113c <matrix_scan+0x13c>
    1138:	e0 e0       	ldi	r30, 0x00	; 0
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	68 94       	set
    1140:	15 f8       	bld	r1, 5
    1142:	36 95       	lsr	r19
    1144:	27 95       	ror	r18
    1146:	16 94       	lsr	r1
    1148:	e1 f7       	brne	.-8      	; 0x1142 <matrix_scan+0x142>
    114a:	22 24       	eor	r2, r2
    114c:	33 24       	eor	r3, r3
    114e:	23 94       	inc	r2
    1150:	22 25       	eor	r18, r2
    1152:	33 25       	eor	r19, r3
    1154:	21 70       	andi	r18, 0x01	; 1
    1156:	30 70       	andi	r19, 0x00	; 0
    1158:	26 2b       	or	r18, r22
    115a:	37 2b       	or	r19, r23
    115c:	24 29       	or	r18, r4
    115e:	35 29       	or	r19, r5
    1160:	26 29       	or	r18, r6
    1162:	37 29       	or	r19, r7
    1164:	28 29       	or	r18, r8
    1166:	39 29       	or	r19, r9
    1168:	24 2b       	or	r18, r20
    116a:	35 2b       	or	r19, r21
    116c:	28 2b       	or	r18, r24
    116e:	39 2b       	or	r19, r25
    1170:	2e 29       	or	r18, r14
    1172:	3f 29       	or	r19, r15
    1174:	20 2b       	or	r18, r16
    1176:	31 2b       	or	r19, r17
    1178:	2c 2b       	or	r18, r28
    117a:	3d 2b       	or	r19, r29
    117c:	2a 2b       	or	r18, r26
    117e:	3b 2b       	or	r19, r27
    1180:	2e 2b       	or	r18, r30
    1182:	3f 2b       	or	r19, r31
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    1184:	d5 01       	movw	r26, r10
    1186:	8d 91       	ld	r24, X+
    1188:	9c 91       	ld	r25, X
    118a:	11 97       	sbiw	r26, 0x01	; 1
    118c:	82 17       	cp	r24, r18
    118e:	93 07       	cpc	r25, r19
    1190:	a9 f1       	breq	.+106    	; 0x11fc <matrix_scan+0x1fc>
            matrix_debouncing[i] = cols;
    1192:	2d 93       	st	X+, r18
    1194:	3c 93       	st	X, r19
            if (debouncing) {
    1196:	80 91 00 01 	lds	r24, 0x0100
    119a:	88 23       	and	r24, r24
    119c:	69 f1       	breq	.+90     	; 0x11f8 <matrix_scan+0x1f8>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    119e:	80 91 9f 01 	lds	r24, 0x019F
    11a2:	80 ff       	sbrs	r24, 0
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <matrix_scan+0x1ae>
    11a6:	82 e2       	ldi	r24, 0x22	; 34
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    11ae:	80 91 9f 01 	lds	r24, 0x019F
    11b2:	80 ff       	sbrs	r24, 0
    11b4:	19 c0       	rjmp	.+50     	; 0x11e8 <matrix_scan+0x1e8>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <matrix_scan+0x1b8>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <matrix_scan+0x1ba>
    11ba:	ed b7       	in	r30, 0x3d	; 61
    11bc:	fe b7       	in	r31, 0x3e	; 62
    11be:	31 96       	adiw	r30, 0x01	; 1
    11c0:	2d e1       	ldi	r18, 0x1D	; 29
    11c2:	22 2e       	mov	r2, r18
    11c4:	23 e0       	ldi	r18, 0x03	; 3
    11c6:	32 2e       	mov	r3, r18
    11c8:	ad b7       	in	r26, 0x3d	; 61
    11ca:	be b7       	in	r27, 0x3e	; 62
    11cc:	12 96       	adiw	r26, 0x02	; 2
    11ce:	3c 92       	st	X, r3
    11d0:	2e 92       	st	-X, r2
    11d2:	11 97       	sbiw	r26, 0x01	; 1
    11d4:	80 91 00 01 	lds	r24, 0x0100
    11d8:	82 83       	std	Z+2, r24	; 0x02
    11da:	13 82       	std	Z+3, r1	; 0x03
    11dc:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	80 91 9f 01 	lds	r24, 0x019F
    11ec:	80 ff       	sbrs	r24, 0
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <matrix_scan+0x1f8>
    11f0:	8b e1       	ldi	r24, 0x1B	; 27
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            }
            debouncing = DEBOUNCE;
    11f8:	c0 92 00 01 	sts	0x0100, r12
        }
        unselect_rows();
    11fc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1200:	d3 94       	inc	r13
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a8 0e       	add	r10, r24
    1208:	b9 1e       	adc	r11, r25
    120a:	94 e0       	ldi	r25, 0x04	; 4
    120c:	d9 16       	cp	r13, r25
    120e:	09 f0       	breq	.+2      	; 0x1212 <matrix_scan+0x212>
    1210:	10 cf       	rjmp	.-480    	; 0x1032 <matrix_scan+0x32>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1212:	80 91 00 01 	lds	r24, 0x0100
    1216:	88 23       	and	r24, r24
    1218:	51 f1       	breq	.+84     	; 0x126e <matrix_scan+0x26e>
        if (--debouncing) {
    121a:	81 50       	subi	r24, 0x01	; 1
    121c:	80 93 00 01 	sts	0x0100, r24
    1220:	88 23       	and	r24, r24
    1222:	29 f0       	breq	.+10     	; 0x122e <matrix_scan+0x22e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1224:	80 ea       	ldi	r24, 0xA0	; 160
    1226:	9f e0       	ldi	r25, 0x0F	; 15
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <matrix_scan+0x228>
    122c:	20 c0       	rjmp	.+64     	; 0x126e <matrix_scan+0x26e>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    122e:	80 91 20 01 	lds	r24, 0x0120
    1232:	90 91 21 01 	lds	r25, 0x0121
    1236:	90 93 19 01 	sts	0x0119, r25
    123a:	80 93 18 01 	sts	0x0118, r24
    123e:	80 91 22 01 	lds	r24, 0x0122
    1242:	90 91 23 01 	lds	r25, 0x0123
    1246:	90 93 1b 01 	sts	0x011B, r25
    124a:	80 93 1a 01 	sts	0x011A, r24
    124e:	80 91 24 01 	lds	r24, 0x0124
    1252:	90 91 25 01 	lds	r25, 0x0125
    1256:	90 93 1d 01 	sts	0x011D, r25
    125a:	80 93 1c 01 	sts	0x011C, r24
    125e:	80 91 26 01 	lds	r24, 0x0126
    1262:	90 91 27 01 	lds	r25, 0x0127
    1266:	90 93 1f 01 	sts	0x011F, r25
    126a:	80 93 1e 01 	sts	0x011E, r24
            }
        }
    }

    return 1;
}
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	7f 90       	pop	r7
    128a:	6f 90       	pop	r6
    128c:	5f 90       	pop	r5
    128e:	4f 90       	pop	r4
    1290:	3f 90       	pop	r3
    1292:	2f 90       	pop	r2
    1294:	08 95       	ret

00001296 <matrix_print>:
{
    return matrix[row];
}

void matrix_print(void)
{
    1296:	cf 92       	push	r12
    1298:	df 92       	push	r13
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	93 e0       	ldi	r25, 0x03	; 3
    12aa:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    12ae:	08 e1       	ldi	r16, 0x18	; 24
    12b0:	11 e0       	ldi	r17, 0x01	; 1
    12b2:	c0 e0       	ldi	r28, 0x00	; 0
    12b4:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    12b6:	ef ef       	ldi	r30, 0xFF	; 255
    12b8:	ce 2e       	mov	r12, r30
    12ba:	e2 e0       	ldi	r30, 0x02	; 2
    12bc:	de 2e       	mov	r13, r30
        pbin_reverse16(matrix_get_row(row));
    12be:	76 ef       	ldi	r23, 0xF6	; 246
    12c0:	e7 2e       	mov	r14, r23
    12c2:	72 e0       	ldi	r23, 0x02	; 2
    12c4:	f7 2e       	mov	r15, r23

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <matrix_print+0x32>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <matrix_print+0x34>
    12ca:	ed b7       	in	r30, 0x3d	; 61
    12cc:	fe b7       	in	r31, 0x3e	; 62
    12ce:	d2 82       	std	Z+2, r13	; 0x02
    12d0:	c1 82       	std	Z+1, r12	; 0x01
    12d2:	d4 83       	std	Z+4, r29	; 0x04
    12d4:	c3 83       	std	Z+3, r28	; 0x03
    12d6:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	8c ef       	ldi	r24, 0xFC	; 252
    12e4:	92 e0       	ldi	r25, 0x02	; 2
    12e6:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
        pbin_reverse16(matrix_get_row(row));
    12ea:	f8 01       	movw	r30, r16
    12ec:	81 91       	ld	r24, Z+
    12ee:	91 91       	ld	r25, Z+
    12f0:	8f 01       	movw	r16, r30
    12f2:	0e 94 65 1e 	call	0x3cca	; 0x3cca <bitrev16>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <matrix_print+0x62>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <matrix_print+0x64>
    12fa:	ed b7       	in	r30, 0x3d	; 61
    12fc:	fe b7       	in	r31, 0x3e	; 62
    12fe:	f2 82       	std	Z+2, r15	; 0x02
    1300:	e1 82       	std	Z+1, r14	; 0x01
    1302:	94 83       	std	Z+4, r25	; 0x04
    1304:	83 83       	std	Z+3, r24	; 0x03
    1306:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
        print("\n");
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	84 ef       	ldi	r24, 0xF4	; 244
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    131a:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    131c:	c4 30       	cpi	r28, 0x04	; 4
    131e:	d1 05       	cpc	r29, r1
    1320:	91 f6       	brne	.-92     	; 0x12c6 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	08 95       	ret

00001334 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1334:	81 ff       	sbrs	r24, 1
    1336:	02 c0       	rjmp	.+4      	; 0x133c <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    1338:	22 9a       	sbi	0x04, 2	; 4
    133a:	01 c0       	rjmp	.+2      	; 0x133e <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    133c:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    133e:	2a 98       	cbi	0x05, 2	; 5
    1340:	08 95       	ret

00001342 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1342:	80 91 2c 01 	lds	r24, 0x012C
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	80 93 2c 01 	sts	0x012C, r24
    134c:	62 e3       	ldi	r22, 0x32	; 50
    134e:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <__udivmodqi4>
    1352:	99 23       	and	r25, r25
    1354:	a9 f5       	brne	.+106    	; 0x13c0 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1356:	10 92 2c 01 	sts	0x012C, r1

    if (!console_flush) return;
    135a:	80 91 2a 01 	lds	r24, 0x012A
    135e:	88 23       	and	r24, r24
    1360:	79 f1       	breq	.+94     	; 0x13c0 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1362:	80 91 b4 01 	lds	r24, 0x01B4
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	49 f5       	brne	.+82     	; 0x13bc <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    136a:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    136e:	80 91 ec 00 	lds	r24, 0x00EC
    1372:	80 fd       	sbrc	r24, 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <EVENT_USB_Device_StartOfFrame+0x38>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	01 c0       	rjmp	.+2      	; 0x137c <EVENT_USB_Device_StartOfFrame+0x3a>
    137a:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    137c:	9f 70       	andi	r25, 0x0F	; 15
    137e:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1380:	84 e0       	ldi	r24, 0x04	; 4
    1382:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1386:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    138a:	80 ff       	sbrs	r24, 0
    138c:	14 c0       	rjmp	.+40     	; 0x13b6 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    138e:	80 91 ee 00 	lds	r24, 0x00EE
    1392:	87 fd       	sbrc	r24, 7
    1394:	03 c0       	rjmp	.+6      	; 0x139c <EVENT_USB_Device_StartOfFrame+0x5a>
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1398:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    139c:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    13a0:	85 fd       	sbrc	r24, 5
    13a2:	fa cf       	rjmp	.-12     	; 0x1398 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13a4:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    13a8:	80 ff       	sbrs	r24, 0
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ac:	80 91 e8 00 	lds	r24, 0x00E8
    13b0:	8e 77       	andi	r24, 0x7E	; 126
    13b2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13b6:	9f 70       	andi	r25, 0x0F	; 15
    13b8:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    13bc:	10 92 2a 01 	sts	0x012A, r1
    13c0:	08 95       	ret

000013c2 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    13c2:	80 91 29 01 	lds	r24, 0x0129
    13c6:	08 95       	ret

000013c8 <sendchar>:
 * sendchar
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
#define SEND_TIMEOUT 5
int8_t sendchar(uint8_t c)
{
    13c8:	68 2f       	mov	r22, r24
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    13ca:	8f b7       	in	r24, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	10 92 2a 01 	sts	0x012A, r1
    13d2:	8f bf       	out	0x3f, r24	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13d4:	80 91 b4 01 	lds	r24, 0x01B4
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	11 f0       	breq	.+4      	; 0x13e0 <sendchar+0x18>
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	08 95       	ret
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13e0:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13e4:	80 91 ec 00 	lds	r24, 0x00EC
    13e8:	80 fd       	sbrc	r24, 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <sendchar+0x28>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <sendchar+0x2a>
    13f0:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13f2:	39 2f       	mov	r19, r25
    13f4:	3f 70       	andi	r19, 0x0F	; 15
    13f6:	38 2b       	or	r19, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    13fe:	80 91 eb 00 	lds	r24, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1402:	80 ff       	sbrs	r24, 0
    1404:	43 c0       	rjmp	.+134    	; 0x148c <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1406:	80 91 ee 00 	lds	r24, 0x00EE
    140a:	87 ff       	sbrs	r24, 7
    140c:	3f c0       	rjmp	.+126    	; 0x148c <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    140e:	80 91 2b 01 	lds	r24, 0x012B
    1412:	88 23       	and	r24, r24
    1414:	21 f0       	breq	.+8      	; 0x141e <sendchar+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1416:	80 91 e8 00 	lds	r24, 0x00E8
    141a:	85 ff       	sbrs	r24, 5
    141c:	37 c0       	rjmp	.+110    	; 0x148c <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    timeouted = false;
    141e:	10 92 2b 01 	sts	0x012B, r1
    1422:	25 e0       	ldi	r18, 0x05	; 5
    1424:	40 ea       	ldi	r20, 0xA0	; 160
    1426:	5f e0       	ldi	r21, 0x0F	; 15
    1428:	12 c0       	rjmp	.+36     	; 0x144e <sendchar+0x86>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    142a:	80 91 b4 01 	lds	r24, 0x01B4
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	69 f5       	brne	.+90     	; 0x148c <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1432:	80 91 eb 00 	lds	r24, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1436:	85 fd       	sbrc	r24, 5
    1438:	29 c0       	rjmp	.+82     	; 0x148c <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    143a:	22 23       	and	r18, r18
    143c:	21 f4       	brne	.+8      	; 0x1446 <sendchar+0x7e>
            timeouted = true;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	80 93 2b 01 	sts	0x012B, r24
    1444:	23 c0       	rjmp	.+70     	; 0x148c <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	ca 01       	movw	r24, r20
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <sendchar+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    144e:	80 91 e8 00 	lds	r24, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1452:	85 ff       	sbrs	r24, 5
    1454:	ea cf       	rjmp	.-44     	; 0x142a <sendchar+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1456:	60 93 f1 00 	sts	0x00F1, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    145a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    145e:	85 fd       	sbrc	r24, 5
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <sendchar+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1462:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1466:	80 ff       	sbrs	r24, 0
    1468:	fc cf       	rjmp	.-8      	; 0x1462 <sendchar+0x9a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    146a:	80 91 e8 00 	lds	r24, 0x00E8
    146e:	8e 77       	andi	r24, 0x7E	; 126
    1470:	80 93 e8 00 	sts	0x00E8, r24
    1474:	06 c0       	rjmp	.+12     	; 0x1482 <sendchar+0xba>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1476:	9f b7       	in	r25, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 2a 01 	sts	0x012A, r24
    1480:	9f bf       	out	0x3f, r25	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1482:	3f 70       	andi	r19, 0x0F	; 15
    1484:	30 93 e9 00 	sts	0x00E9, r19
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    148c:	3f 70       	andi	r19, 0x0F	; 15
    148e:	30 93 e9 00 	sts	0x00E9, r19
    1492:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1494:	08 95       	ret

00001496 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1496:	08 95       	ret

00001498 <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    1498:	08 95       	ret

0000149a <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
#endif
}
    149a:	08 95       	ret

0000149c <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <send_consumer+0x6>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14aa:	80 91 b4 01 	lds	r24, 0x01B4
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	29 f5       	brne	.+74     	; 0x14fc <send_consumer+0x60>
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	80 93 e9 00 	sts	0x00E9, r24
    14b8:	2f ef       	ldi	r18, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14ba:	95 ed       	ldi	r25, 0xD5	; 213
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <send_consumer+0x2c>
    14be:	89 2f       	mov	r24, r25
    14c0:	8a 95       	dec	r24
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <send_consumer+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    14c4:	22 23       	and	r18, r18
    14c6:	29 f0       	breq	.+10     	; 0x14d2 <send_consumer+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14c8:	80 91 e8 00 	lds	r24, 0x00E8
    14cc:	21 50       	subi	r18, 0x01	; 1
    14ce:	85 ff       	sbrs	r24, 5
    14d0:	f6 cf       	rjmp	.-20     	; 0x14be <send_consumer+0x22>
    14d2:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    14d6:	85 ff       	sbrs	r24, 5
    14d8:	11 c0       	rjmp	.+34     	; 0x14fc <send_consumer+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
    14da:	5b 83       	std	Y+3, r21	; 0x03
    14dc:	4a 83       	std	Y+2, r20	; 0x02
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    14e2:	ce 01       	movw	r24, r28
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	63 e0       	ldi	r22, 0x03	; 3
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14f2:	80 91 e8 00 	lds	r24, 0x00E8
    14f6:	8e 77       	andi	r24, 0x7E	; 126
    14f8:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <send_system+0x6>
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1516:	80 91 b4 01 	lds	r24, 0x01B4
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	29 f5       	brne	.+74     	; 0x1568 <send_system+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	80 93 e9 00 	sts	0x00E9, r24
    1524:	2f ef       	ldi	r18, 0xFF	; 255
    1526:	95 ed       	ldi	r25, 0xD5	; 213
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <send_system+0x2c>
    152a:	89 2f       	mov	r24, r25
    152c:	8a 95       	dec	r24
    152e:	f1 f7       	brne	.-4      	; 0x152c <send_system+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1530:	22 23       	and	r18, r18
    1532:	29 f0       	breq	.+10     	; 0x153e <send_system+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1534:	80 91 e8 00 	lds	r24, 0x00E8
    1538:	21 50       	subi	r18, 0x01	; 1
    153a:	85 ff       	sbrs	r24, 5
    153c:	f6 cf       	rjmp	.-20     	; 0x152a <send_system+0x22>
    153e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1542:	85 ff       	sbrs	r24, 5
    1544:	11 c0       	rjmp	.+34     	; 0x1568 <send_system+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    1546:	5b 83       	std	Y+3, r21	; 0x03
    1548:	4a 83       	std	Y+2, r20	; 0x02
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	63 e0       	ldi	r22, 0x03	; 3
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    155e:	80 91 e8 00 	lds	r24, 0x00E8
    1562:	8e 77       	andi	r24, 0x7E	; 126
    1564:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
    1574:	ac 01       	movw	r20, r24
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1576:	80 91 b4 01 	lds	r24, 0x01B4
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	01 f5       	brne	.+64     	; 0x15be <send_mouse+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	80 93 e9 00 	sts	0x00E9, r24
    1584:	2f ef       	ldi	r18, 0xFF	; 255
    1586:	95 ed       	ldi	r25, 0xD5	; 213
    1588:	05 c0       	rjmp	.+10     	; 0x1594 <send_mouse+0x20>
    158a:	89 2f       	mov	r24, r25
    158c:	8a 95       	dec	r24
    158e:	f1 f7       	brne	.-4      	; 0x158c <send_mouse+0x18>

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1590:	22 23       	and	r18, r18
    1592:	29 f0       	breq	.+10     	; 0x159e <send_mouse+0x2a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1594:	80 91 e8 00 	lds	r24, 0x00E8
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	85 ff       	sbrs	r24, 5
    159c:	f6 cf       	rjmp	.-20     	; 0x158a <send_mouse+0x16>
    159e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    15a2:	85 ff       	sbrs	r24, 5
    15a4:	0c c0       	rjmp	.+24     	; 0x15be <send_mouse+0x4a>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    15a6:	ca 01       	movw	r24, r20
    15a8:	65 e0       	ldi	r22, 0x05	; 5
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15b4:	80 91 e8 00 	lds	r24, 0x00E8
    15b8:	8e 77       	andi	r24, 0x7E	; 126
    15ba:	80 93 e8 00 	sts	0x00E8, r24
    15be:	08 95       	ret

000015c0 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	18 2f       	mov	r17, r24
    15c6:	09 2f       	mov	r16, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    15c8:	80 91 b4 01 	lds	r24, 0x01B4
    15cc:	84 30       	cpi	r24, 0x04	; 4
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <send_keyboard+0x12>
    15d0:	4d c0       	rjmp	.+154    	; 0x166c <send_keyboard+0xac>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    15d2:	80 91 01 01 	lds	r24, 0x0101
    15d6:	88 23       	and	r24, r24
    15d8:	e9 f0       	breq	.+58     	; 0x1614 <send_keyboard+0x54>
    15da:	80 91 0c 01 	lds	r24, 0x010C
    15de:	88 23       	and	r24, r24
    15e0:	c9 f0       	breq	.+50     	; 0x1614 <send_keyboard+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15e2:	85 e0       	ldi	r24, 0x05	; 5
    15e4:	80 93 e9 00 	sts	0x00E9, r24
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	25 e1       	ldi	r18, 0x15	; 21
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <send_keyboard+0x38>
    15ee:	82 2f       	mov	r24, r18
    15f0:	8a 95       	dec	r24
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <send_keyboard+0x30>
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    15f4:	99 23       	and	r25, r25
    15f6:	29 f0       	breq	.+10     	; 0x1602 <send_keyboard+0x42>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15f8:	80 91 e8 00 	lds	r24, 0x00E8
    15fc:	91 50       	subi	r25, 0x01	; 1
    15fe:	85 ff       	sbrs	r24, 5
    1600:	f6 cf       	rjmp	.-20     	; 0x15ee <send_keyboard+0x2e>
    1602:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1606:	85 ff       	sbrs	r24, 5
    1608:	31 c0       	rjmp	.+98     	; 0x166c <send_keyboard+0xac>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    160a:	81 2f       	mov	r24, r17
    160c:	90 2f       	mov	r25, r16
    160e:	60 e1       	ldi	r22, 0x10	; 16
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	18 c0       	rjmp	.+48     	; 0x1644 <send_keyboard+0x84>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 e9 00 	sts	0x00E9, r24
    161a:	9f ef       	ldi	r25, 0xFF	; 255
    161c:	25 ed       	ldi	r18, 0xD5	; 213
    161e:	05 c0       	rjmp	.+10     	; 0x162a <send_keyboard+0x6a>
    1620:	82 2f       	mov	r24, r18
    1622:	8a 95       	dec	r24
    1624:	f1 f7       	brne	.-4      	; 0x1622 <send_keyboard+0x62>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1626:	99 23       	and	r25, r25
    1628:	29 f0       	breq	.+10     	; 0x1634 <send_keyboard+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    162a:	80 91 e8 00 	lds	r24, 0x00E8
    162e:	91 50       	subi	r25, 0x01	; 1
    1630:	85 ff       	sbrs	r24, 5
    1632:	f6 cf       	rjmp	.-20     	; 0x1620 <send_keyboard+0x60>
    1634:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1638:	85 ff       	sbrs	r24, 5
    163a:	18 c0       	rjmp	.+48     	; 0x166c <send_keyboard+0xac>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    163c:	81 2f       	mov	r24, r17
    163e:	90 2f       	mov	r25, r16
    1640:	68 e0       	ldi	r22, 0x08	; 8
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    164c:	80 91 e8 00 	lds	r24, 0x00E8
    1650:	8e 77       	andi	r24, 0x7E	; 126
    1652:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1656:	ad e2       	ldi	r26, 0x2D	; 45
    1658:	b1 e0       	ldi	r27, 0x01	; 1
    165a:	21 2f       	mov	r18, r17
    165c:	30 2f       	mov	r19, r16
    165e:	c9 01       	movw	r24, r18
    1660:	fc 01       	movw	r30, r24
    1662:	80 e1       	ldi	r24, 0x10	; 16
    1664:	01 90       	ld	r0, Z+
    1666:	0d 92       	st	X+, r0
    1668:	81 50       	subi	r24, 0x01	; 1
    166a:	e1 f7       	brne	.-8      	; 0x1664 <send_keyboard+0xa4>
}
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	08 95       	ret

00001672 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1672:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
#endif
}
    1676:	08 95       	ret

00001678 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1678:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    167c:	80 91 b2 01 	lds	r24, 0x01B2
    1680:	88 23       	and	r24, r24
    1682:	31 f0       	breq	.+12     	; 0x1690 <hook_usb_suspend_loop+0x18>
    1684:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <suspend_wakeup_condition>
    1688:	88 23       	and	r24, r24
    168a:	11 f0       	breq	.+4      	; 0x1690 <hook_usb_suspend_loop+0x18>
            USB_Device_SendRemoteWakeup();
    168c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <USB_Device_SendRemoteWakeup>
    1690:	08 95       	ret

00001692 <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1692:	82 e5       	ldi	r24, 0x52	; 82
    1694:	93 e0       	ldi	r25, 0x03	; 3
    1696:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    hook_usb_wakeup();
    169a:	0e 94 39 0b 	call	0x1672	; 0x1672 <hook_usb_wakeup>
}
    169e:	08 95       	ret

000016a0 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    16a0:	86 e5       	ldi	r24, 0x56	; 86
    16a2:	93 e0       	ldi	r25, 0x03	; 3
    16a4:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    hook_usb_suspend_entry();
    16a8:	0e 94 4d 0a 	call	0x149a	; 0x149a <hook_usb_suspend_entry>
}
    16ac:	08 95       	ret

000016ae <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    16ae:	8a e5       	ldi	r24, 0x5A	; 90
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
}
    16b6:	08 95       	ret

000016b8 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    16b8:	8e e5       	ldi	r24, 0x5E	; 94
    16ba:	93 e0       	ldi	r25, 0x03	; 3
    16bc:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    16c0:	10 92 b3 01 	sts	0x01B3, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    16c4:	08 95       	ret

000016c6 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    16c6:	82 e6       	ldi	r24, 0x62	; 98
    16c8:	93 e0       	ldi	r25, 0x03	; 3
    16ca:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    16ce:	80 91 b3 01 	lds	r24, 0x01B3
    16d2:	88 23       	and	r24, r24
    16d4:	49 f4       	brne	.+18     	; 0x16e8 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    16d6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <USB_Disable>
        USB_Init();
    16da:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    16de:	80 91 e2 00 	lds	r24, 0x00E2
    16e2:	84 60       	ori	r24, 0x04	; 4
    16e4:	80 93 e2 00 	sts	0x00E2, r24
    16e8:	08 95       	ret

000016ea <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    16ea:	84 b7       	in	r24, 0x34	; 52
    16ec:	87 7f       	andi	r24, 0xF7	; 247
    16ee:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    16f0:	88 e1       	ldi	r24, 0x18	; 24
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	80 93 60 00 	sts	0x0060, r24
    16fa:	10 92 60 00 	sts	0x0060, r1
    16fe:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	20 e8       	ldi	r18, 0x80	; 128
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	20 93 61 00 	sts	0x0061, r18
    170e:	80 93 61 00 	sts	0x0061, r24
    1712:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    1714:	0e 94 4b 0a 	call	0x1496	; 0x1496 <hook_early_init>
    keyboard_setup();
    1718:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    171c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <USB_Disable>

    USB_Init();
    1720:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <USB_Init>
    1724:	80 91 e2 00 	lds	r24, 0x00E2
    1728:	84 60       	ori	r24, 0x04	; 4
    172a:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    172e:	84 ee       	ldi	r24, 0xE4	; 228
    1730:	99 e0       	ldi	r25, 0x09	; 9
    1732:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1736:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1738:	80 91 b4 01 	lds	r24, 0x01B4
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	e1 f7       	brne	.-8      	; 0x1738 <main+0x4e>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1740:	81 e4       	ldi	r24, 0x41	; 65
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>

    /* init modules */
    keyboard_init();
    1748:	0e 94 57 13 	call	0x26ae	; 0x26ae <keyboard_init>
    host_set_driver(&lufa_driver);
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1754:	80 e3       	ldi	r24, 0x30	; 48
    1756:	93 e0       	ldi	r25, 0x03	; 3
    1758:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    hook_late_init();
    175c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <hook_late_init>
    1760:	06 c0       	rjmp	.+12     	; 0x176e <main+0x84>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    1762:	8c e2       	ldi	r24, 0x2C	; 44
    1764:	93 e0       	ldi	r25, 0x03	; 3
    1766:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            hook_usb_suspend_loop();
    176a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <hook_usb_suspend_loop>
#endif

    print("Keyboard start.\n");
    hook_late_init();
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    176e:	80 91 b4 01 	lds	r24, 0x01B4
    1772:	85 30       	cpi	r24, 0x05	; 5
    1774:	b1 f3       	breq	.-20     	; 0x1762 <main+0x78>
            print("[s]");
            hook_usb_suspend_loop();
        }

        keyboard_task();
    1776:	0e 94 80 12 	call	0x2500	; 0x2500 <keyboard_task>
    177a:	f9 cf       	rjmp	.-14     	; 0x176e <main+0x84>

0000177c <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    177c:	80 91 b6 01 	lds	r24, 0x01B6
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	09 f4       	brne	.+2      	; 0x1786 <EVENT_USB_Device_ControlRequest+0xa>
    1784:	57 c0       	rjmp	.+174    	; 0x1834 <EVENT_USB_Device_ControlRequest+0xb8>
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	30 f4       	brcc	.+12     	; 0x1796 <EVENT_USB_Device_ControlRequest+0x1a>
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	71 f0       	breq	.+28     	; 0x17aa <EVENT_USB_Device_ControlRequest+0x2e>
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	09 f0       	breq	.+2      	; 0x1794 <EVENT_USB_Device_ControlRequest+0x18>
    1792:	b1 c0       	rjmp	.+354    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
    1794:	98 c0       	rjmp	.+304    	; 0x18c6 <EVENT_USB_Device_ControlRequest+0x14a>
    1796:	8a 30       	cpi	r24, 0x0A	; 10
    1798:	09 f4       	brne	.+2      	; 0x179c <EVENT_USB_Device_ControlRequest+0x20>
    179a:	85 c0       	rjmp	.+266    	; 0x18a6 <EVENT_USB_Device_ControlRequest+0x12a>
    179c:	8b 30       	cpi	r24, 0x0B	; 11
    179e:	09 f4       	brne	.+2      	; 0x17a2 <EVENT_USB_Device_ControlRequest+0x26>
    17a0:	6a c0       	rjmp	.+212    	; 0x1876 <EVENT_USB_Device_ControlRequest+0xfa>
    17a2:	89 30       	cpi	r24, 0x09	; 9
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <EVENT_USB_Device_ControlRequest+0x2c>
    17a6:	a7 c0       	rjmp	.+334    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
    17a8:	20 c0       	rjmp	.+64     	; 0x17ea <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17aa:	80 91 b5 01 	lds	r24, 0x01B5
    17ae:	81 3a       	cpi	r24, 0xA1	; 161
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <EVENT_USB_Device_ControlRequest+0x38>
    17b2:	a1 c0       	rjmp	.+322    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17b4:	80 91 e8 00 	lds	r24, 0x00E8
    17b8:	87 7f       	andi	r24, 0xF7	; 247
    17ba:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    17be:	80 91 b9 01 	lds	r24, 0x01B9
    17c2:	90 91 ba 01 	lds	r25, 0x01BA
    17c6:	89 2b       	or	r24, r25
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <EVENT_USB_Device_ControlRequest+0x56>
    17ca:	8d e2       	ldi	r24, 0x2D	; 45
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	60 e1       	ldi	r22, 0x10	; 16
    17d0:	03 c0       	rjmp	.+6      	; 0x17d8 <EVENT_USB_Device_ControlRequest+0x5c>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	60 e0       	ldi	r22, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17de:	80 91 e8 00 	lds	r24, 0x00E8
    17e2:	8b 77       	andi	r24, 0x7B	; 123
    17e4:	80 93 e8 00 	sts	0x00E8, r24
    17e8:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    17ea:	80 91 b5 01 	lds	r24, 0x01B5
    17ee:	81 32       	cpi	r24, 0x21	; 33
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <EVENT_USB_Device_ControlRequest+0x78>
    17f2:	81 c0       	rjmp	.+258    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    17f4:	80 91 b9 01 	lds	r24, 0x01B9
    17f8:	90 91 ba 01 	lds	r25, 0x01BA
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	19 f0       	breq	.+6      	; 0x1806 <EVENT_USB_Device_ControlRequest+0x8a>
    1800:	04 97       	sbiw	r24, 0x04	; 4
    1802:	09 f0       	breq	.+2      	; 0x1806 <EVENT_USB_Device_ControlRequest+0x8a>
    1804:	78 c0       	rjmp	.+240    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1806:	80 91 e8 00 	lds	r24, 0x00E8
    180a:	87 7f       	andi	r24, 0xF7	; 247
    180c:	80 93 e8 00 	sts	0x00E8, r24
    1810:	05 c0       	rjmp	.+10     	; 0x181c <EVENT_USB_Device_ControlRequest+0xa0>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1812:	80 91 b4 01 	lds	r24, 0x01B4
    1816:	88 23       	and	r24, r24
    1818:	09 f4       	brne	.+2      	; 0x181c <EVENT_USB_Device_ControlRequest+0xa0>
    181a:	6d c0       	rjmp	.+218    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    181c:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1820:	82 ff       	sbrs	r24, 2
    1822:	f7 cf       	rjmp	.-18     	; 0x1812 <EVENT_USB_Device_ControlRequest+0x96>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1824:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1828:	80 93 29 01 	sts	0x0129, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    182c:	80 91 e8 00 	lds	r24, 0x00E8
    1830:	8b 77       	andi	r24, 0x7B	; 123
    1832:	1c c0       	rjmp	.+56     	; 0x186c <EVENT_USB_Device_ControlRequest+0xf0>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1834:	80 91 b5 01 	lds	r24, 0x01B5
    1838:	81 3a       	cpi	r24, 0xA1	; 161
    183a:	09 f0       	breq	.+2      	; 0x183e <EVENT_USB_Device_ControlRequest+0xc2>
    183c:	5c c0       	rjmp	.+184    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    183e:	80 91 b9 01 	lds	r24, 0x01B9
    1842:	90 91 ba 01 	lds	r25, 0x01BA
    1846:	89 2b       	or	r24, r25
    1848:	09 f0       	breq	.+2      	; 0x184c <EVENT_USB_Device_ControlRequest+0xd0>
    184a:	55 c0       	rjmp	.+170    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    184c:	80 91 e8 00 	lds	r24, 0x00E8
    1850:	87 7f       	andi	r24, 0xF7	; 247
    1852:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1856:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    185a:	80 ff       	sbrs	r24, 0
    185c:	fc cf       	rjmp	.-8      	; 0x1856 <EVENT_USB_Device_ControlRequest+0xda>
                    Endpoint_Write_8(keyboard_protocol);
    185e:	80 91 01 01 	lds	r24, 0x0101
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1862:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1866:	80 91 e8 00 	lds	r24, 0x00E8
    186a:	8e 77       	andi	r24, 0x7E	; 126
    186c:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    1870:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_ClearStatusStage>
    1874:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1876:	80 91 b5 01 	lds	r24, 0x01B5
    187a:	81 32       	cpi	r24, 0x21	; 33
    187c:	e1 f5       	brne	.+120    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    187e:	80 91 b9 01 	lds	r24, 0x01B9
    1882:	90 91 ba 01 	lds	r25, 0x01BA
    1886:	89 2b       	or	r24, r25
    1888:	b1 f5       	brne	.+108    	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    188a:	80 91 e8 00 	lds	r24, 0x00E8
    188e:	87 7f       	andi	r24, 0xF7	; 247
    1890:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1894:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1898:	80 91 b7 01 	lds	r24, 0x01B7
    189c:	80 93 01 01 	sts	0x0101, r24
                    clear_keyboard();
    18a0:	0e 94 bd 13 	call	0x277a	; 0x277a <clear_keyboard>
    18a4:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18a6:	80 91 b5 01 	lds	r24, 0x01B5
    18aa:	81 32       	cpi	r24, 0x21	; 33
    18ac:	21 f5       	brne	.+72     	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
    18ae:	80 91 e8 00 	lds	r24, 0x00E8
    18b2:	87 7f       	andi	r24, 0xF7	; 247
    18b4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    18b8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    18bc:	80 91 b8 01 	lds	r24, 0x01B8
    18c0:	80 93 28 01 	sts	0x0128, r24
    18c4:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    18c6:	80 91 b5 01 	lds	r24, 0x01B5
    18ca:	81 3a       	cpi	r24, 0xA1	; 161
    18cc:	a1 f4       	brne	.+40     	; 0x18f6 <EVENT_USB_Device_ControlRequest+0x17a>
    18ce:	80 91 e8 00 	lds	r24, 0x00E8
    18d2:	87 7f       	andi	r24, 0xF7	; 247
    18d4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18d8:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    18dc:	80 ff       	sbrs	r24, 0
    18de:	fc cf       	rjmp	.-8      	; 0x18d8 <EVENT_USB_Device_ControlRequest+0x15c>
                Endpoint_Write_8(keyboard_idle);
    18e0:	80 91 28 01 	lds	r24, 0x0128
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18e4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18e8:	80 91 e8 00 	lds	r24, 0x00E8
    18ec:	8e 77       	andi	r24, 0x7E	; 126
    18ee:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    18f2:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_ClearStatusStage>
    18f6:	08 95       	ret

000018f8 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	61 ec       	ldi	r22, 0xC1	; 193
    18fc:	42 e0       	ldi	r20, 0x02	; 2
    18fe:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	61 ec       	ldi	r22, 0xC1	; 193
    1906:	42 e0       	ldi	r20, 0x02	; 2
    1908:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Endpoint_ConfigureEndpoint_Prv>
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	61 ec       	ldi	r22, 0xC1	; 193
    1910:	42 e0       	ldi	r20, 0x02	; 2
    1912:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Endpoint_ConfigureEndpoint_Prv>
    1916:	84 e0       	ldi	r24, 0x04	; 4
    1918:	61 ec       	ldi	r22, 0xC1	; 193
    191a:	42 e2       	ldi	r20, 0x22	; 34
    191c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Endpoint_ConfigureEndpoint_Prv>
    1920:	85 e0       	ldi	r24, 0x05	; 5
    1922:	61 ec       	ldi	r22, 0xC1	; 193
    1924:	42 e1       	ldi	r20, 0x12	; 18
    1926:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Endpoint_ConfigureEndpoint_Prv>
    192a:	08 95       	ret

0000192c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    192c:	da 01       	movw	r26, r20
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    192e:	93 30       	cpi	r25, 0x03	; 3
    1930:	c1 f0       	breq	.+48     	; 0x1962 <CALLBACK_USB_GetDescriptor+0x36>
    1932:	94 30       	cpi	r25, 0x04	; 4
    1934:	30 f4       	brcc	.+12     	; 0x1942 <CALLBACK_USB_GetDescriptor+0x16>
    1936:	91 30       	cpi	r25, 0x01	; 1
    1938:	51 f0       	breq	.+20     	; 0x194e <CALLBACK_USB_GetDescriptor+0x22>
    193a:	92 30       	cpi	r25, 0x02	; 2
    193c:	09 f0       	breq	.+2      	; 0x1940 <CALLBACK_USB_GetDescriptor+0x14>
    193e:	6d c0       	rjmp	.+218    	; 0x1a1a <CALLBACK_USB_GetDescriptor+0xee>
    1940:	0b c0       	rjmp	.+22     	; 0x1958 <CALLBACK_USB_GetDescriptor+0x2c>
    1942:	91 32       	cpi	r25, 0x21	; 33
    1944:	21 f1       	breq	.+72     	; 0x198e <CALLBACK_USB_GetDescriptor+0x62>
    1946:	92 32       	cpi	r25, 0x22	; 34
    1948:	09 f0       	breq	.+2      	; 0x194c <CALLBACK_USB_GetDescriptor+0x20>
    194a:	67 c0       	rjmp	.+206    	; 0x1a1a <CALLBACK_USB_GetDescriptor+0xee>
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <CALLBACK_USB_GetDescriptor+0xa0>
    194e:	e1 e8       	ldi	r30, 0x81	; 129
    1950:	f4 e0       	ldi	r31, 0x04	; 4
    1952:	22 e1       	ldi	r18, 0x12	; 18
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	65 c0       	rjmp	.+202    	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
    1958:	e3 e9       	ldi	r30, 0x93	; 147
    195a:	f4 e0       	ldi	r31, 0x04	; 4
    195c:	2d e8       	ldi	r18, 0x8D	; 141
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	60 c0       	rjmp	.+192    	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	51 f0       	breq	.+20     	; 0x197a <CALLBACK_USB_GetDescriptor+0x4e>
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	20 f0       	brcs	.+8      	; 0x1972 <CALLBACK_USB_GetDescriptor+0x46>
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	09 f0       	breq	.+2      	; 0x1970 <CALLBACK_USB_GetDescriptor+0x44>
    196e:	55 c0       	rjmp	.+170    	; 0x1a1a <CALLBACK_USB_GetDescriptor+0xee>
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <CALLBACK_USB_GetDescriptor+0x56>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1972:	e0 e2       	ldi	r30, 0x20	; 32
    1974:	f5 e0       	ldi	r31, 0x05	; 5
    1976:	84 91       	lpm	r24, Z+
    1978:	07 c0       	rjmp	.+14     	; 0x1988 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    197a:	e4 e2       	ldi	r30, 0x24	; 36
    197c:	f5 e0       	ldi	r31, 0x05	; 5
    197e:	84 91       	lpm	r24, Z+
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1982:	e8 e4       	ldi	r30, 0x48	; 72
    1984:	f5 e0       	ldi	r31, 0x05	; 5
    1986:	84 91       	lpm	r24, Z+
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a c0       	rjmp	.+148    	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
                    break;
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
    198e:	62 30       	cpi	r22, 0x02	; 2
    1990:	a1 f0       	breq	.+40     	; 0x19ba <CALLBACK_USB_GetDescriptor+0x8e>
    1992:	63 30       	cpi	r22, 0x03	; 3
    1994:	28 f4       	brcc	.+10     	; 0x19a0 <CALLBACK_USB_GetDescriptor+0x74>
    1996:	66 23       	and	r22, r22
    1998:	41 f0       	breq	.+16     	; 0x19aa <CALLBACK_USB_GetDescriptor+0x7e>
    199a:	61 30       	cpi	r22, 0x01	; 1
    199c:	f1 f5       	brne	.+124    	; 0x1a1a <CALLBACK_USB_GetDescriptor+0xee>
    199e:	08 c0       	rjmp	.+16     	; 0x19b0 <CALLBACK_USB_GetDescriptor+0x84>
    19a0:	63 30       	cpi	r22, 0x03	; 3
    19a2:	71 f0       	breq	.+28     	; 0x19c0 <CALLBACK_USB_GetDescriptor+0x94>
    19a4:	64 30       	cpi	r22, 0x04	; 4
    19a6:	c9 f5       	brne	.+114    	; 0x1a1a <CALLBACK_USB_GetDescriptor+0xee>
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <CALLBACK_USB_GetDescriptor+0x9a>
    19aa:	e5 ea       	ldi	r30, 0xA5	; 165
    19ac:	f4 e0       	ldi	r31, 0x04	; 4
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <CALLBACK_USB_GetDescriptor+0x88>
    19b0:	ee eb       	ldi	r30, 0xBE	; 190
    19b2:	f4 e0       	ldi	r31, 0x04	; 4
    19b4:	29 e0       	ldi	r18, 0x09	; 9
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	34 c0       	rjmp	.+104    	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &ConfigurationDescriptor.Mouse_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    19ba:	e7 ed       	ldi	r30, 0xD7	; 215
    19bc:	f4 e0       	ldi	r31, 0x04	; 4
    19be:	fa cf       	rjmp	.-12     	; 0x19b4 <CALLBACK_USB_GetDescriptor+0x88>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ConfigurationDescriptor.Extrakey_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    19c0:	e0 ef       	ldi	r30, 0xF0	; 240
    19c2:	f4 e0       	ldi	r31, 0x04	; 4
    19c4:	f7 cf       	rjmp	.-18     	; 0x19b4 <CALLBACK_USB_GetDescriptor+0x88>
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConfigurationDescriptor.Console_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    19c6:	e0 e1       	ldi	r30, 0x10	; 16
    19c8:	f5 e0       	ldi	r31, 0x05	; 5
    19ca:	f4 cf       	rjmp	.-24     	; 0x19b4 <CALLBACK_USB_GetDescriptor+0x88>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    19cc:	62 30       	cpi	r22, 0x02	; 2
    19ce:	b1 f0       	breq	.+44     	; 0x19fc <CALLBACK_USB_GetDescriptor+0xd0>
    19d0:	63 30       	cpi	r22, 0x03	; 3
    19d2:	28 f4       	brcc	.+10     	; 0x19de <CALLBACK_USB_GetDescriptor+0xb2>
    19d4:	66 23       	and	r22, r22
    19d6:	41 f0       	breq	.+16     	; 0x19e8 <CALLBACK_USB_GetDescriptor+0xbc>
    19d8:	61 30       	cpi	r22, 0x01	; 1
    19da:	f9 f4       	brne	.+62     	; 0x1a1a <CALLBACK_USB_GetDescriptor+0xee>
    19dc:	0a c0       	rjmp	.+20     	; 0x19f2 <CALLBACK_USB_GetDescriptor+0xc6>
    19de:	63 30       	cpi	r22, 0x03	; 3
    19e0:	91 f0       	breq	.+36     	; 0x1a06 <CALLBACK_USB_GetDescriptor+0xda>
    19e2:	64 30       	cpi	r22, 0x04	; 4
    19e4:	d1 f4       	brne	.+52     	; 0x1a1a <CALLBACK_USB_GetDescriptor+0xee>
    19e6:	14 c0       	rjmp	.+40     	; 0x1a10 <CALLBACK_USB_GetDescriptor+0xe4>
    19e8:	e6 e6       	ldi	r30, 0x66	; 102
    19ea:	f3 e0       	ldi	r31, 0x03	; 3
    19ec:	2f e3       	ldi	r18, 0x3F	; 63
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	18 c0       	rjmp	.+48     	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
    19f2:	e5 ea       	ldi	r30, 0xA5	; 165
    19f4:	f3 e0       	ldi	r31, 0x03	; 3
    19f6:	2d e4       	ldi	r18, 0x4D	; 77
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	13 c0       	rjmp	.+38     	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &MouseReport;
                Size    = sizeof(MouseReport);
                break;
    19fc:	e2 ef       	ldi	r30, 0xF2	; 242
    19fe:	f3 e0       	ldi	r31, 0x03	; 3
    1a00:	26 e3       	ldi	r18, 0x36	; 54
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ExtrakeyReport;
                Size    = sizeof(ExtrakeyReport);
                break;
    1a06:	e8 e2       	ldi	r30, 0x28	; 40
    1a08:	f4 e0       	ldi	r31, 0x04	; 4
    1a0a:	20 e2       	ldi	r18, 0x20	; 32
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConsoleReport;
                Size    = sizeof(ConsoleReport);
                break;
    1a10:	e8 e4       	ldi	r30, 0x48	; 72
    1a12:	f4 e0       	ldi	r31, 0x04	; 4
    1a14:	29 e3       	ldi	r18, 0x39	; 57
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <CALLBACK_USB_GetDescriptor+0xf6>
    1a1a:	e0 e0       	ldi	r30, 0x00	; 0
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1a22:	ed 93       	st	X+, r30
    1a24:	fc 93       	st	X, r31
    return Size;
}
    1a26:	c9 01       	movw	r24, r18
    1a28:	08 95       	ret

00001a2a <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a2a:	80 e1       	ldi	r24, 0x10	; 16
    1a2c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a2e:	82 e1       	ldi	r24, 0x12	; 18
    1a30:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1a32:	09 b4       	in	r0, 0x29	; 41
    1a34:	00 fe       	sbrs	r0, 0
    1a36:	fd cf       	rjmp	.-6      	; 0x1a32 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a38:	80 91 d8 00 	lds	r24, 0x00D8
    1a3c:	8f 7d       	andi	r24, 0xDF	; 223
    1a3e:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1a42:	80 91 e0 00 	lds	r24, 0x00E0
    1a46:	82 60       	ori	r24, 0x02	; 2
    1a48:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1a4c:	80 91 e0 00 	lds	r24, 0x00E0
    1a50:	81 fd       	sbrc	r24, 1
    1a52:	fc cf       	rjmp	.-8      	; 0x1a4c <USB_Device_SendRemoteWakeup+0x22>
}
    1a54:	08 95       	ret

00001a56 <Endpoint_Write_Control_Stream_LE>:
    1a56:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a58:	40 91 bb 01 	lds	r20, 0x01BB
    1a5c:	50 91 bc 01 	lds	r21, 0x01BC
    1a60:	46 17       	cp	r20, r22
    1a62:	57 07       	cpc	r21, r23
    1a64:	18 f4       	brcc	.+6      	; 0x1a6c <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a66:	f9 01       	movw	r30, r18
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	43 c0       	rjmp	.+134    	; 0x1af2 <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a6c:	61 15       	cp	r22, r1
    1a6e:	71 05       	cpc	r23, r1
    1a70:	11 f0       	breq	.+4      	; 0x1a76 <Endpoint_Write_Control_Stream_LE+0x20>
    1a72:	ab 01       	movw	r20, r22
    1a74:	f8 cf       	rjmp	.-16     	; 0x1a66 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a76:	80 91 e8 00 	lds	r24, 0x00E8
    1a7a:	8e 77       	andi	r24, 0x7E	; 126
    1a7c:	80 93 e8 00 	sts	0x00E8, r24
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	f0 cf       	rjmp	.-32     	; 0x1a66 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a86:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <Endpoint_Write_Control_Stream_LE+0x3a>
    1a8e:	47 c0       	rjmp	.+142    	; 0x1b1e <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a90:	85 30       	cpi	r24, 0x05	; 5
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <Endpoint_Write_Control_Stream_LE+0x40>
    1a94:	46 c0       	rjmp	.+140    	; 0x1b22 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a96:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a9a:	83 fd       	sbrc	r24, 3
    1a9c:	44 c0       	rjmp	.+136    	; 0x1b26 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a9e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1aa2:	82 fd       	sbrc	r24, 2
    1aa4:	36 c0       	rjmp	.+108    	; 0x1b12 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aa6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1aaa:	80 ff       	sbrs	r24, 0
    1aac:	22 c0       	rjmp	.+68     	; 0x1af2 <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1aae:	80 91 f3 00 	lds	r24, 0x00F3
    1ab2:	90 91 f2 00 	lds	r25, 0x00F2
    1ab6:	78 2f       	mov	r23, r24
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	29 2f       	mov	r18, r25
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	26 2b       	or	r18, r22
    1ac0:	37 2b       	or	r19, r23
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ac4:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ac6:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1aca:	41 50       	subi	r20, 0x01	; 1
    1acc:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1ace:	2f 5f       	subi	r18, 0xFF	; 255
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ad2:	41 15       	cp	r20, r1
    1ad4:	51 05       	cpc	r21, r1
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <Endpoint_Write_Control_Stream_LE+0x88>
    1ad8:	28 30       	cpi	r18, 0x08	; 8
    1ada:	31 05       	cpc	r19, r1
    1adc:	98 f3       	brcs	.-26     	; 0x1ac4 <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	28 30       	cpi	r18, 0x08	; 8
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <Endpoint_Write_Control_Stream_LE+0x92>
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ae8:	80 91 e8 00 	lds	r24, 0x00E8
    1aec:	8e 77       	andi	r24, 0x7E	; 126
    1aee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1af2:	41 15       	cp	r20, r1
    1af4:	51 05       	cpc	r21, r1
    1af6:	39 f6       	brne	.-114    	; 0x1a86 <Endpoint_Write_Control_Stream_LE+0x30>
    1af8:	99 23       	and	r25, r25
    1afa:	29 f6       	brne	.-118    	; 0x1a86 <Endpoint_Write_Control_Stream_LE+0x30>
    1afc:	0a c0       	rjmp	.+20     	; 0x1b12 <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1afe:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b02:	88 23       	and	r24, r24
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b06:	85 30       	cpi	r24, 0x05	; 5
    1b08:	61 f0       	breq	.+24     	; 0x1b22 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b0a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b0e:	83 fd       	sbrc	r24, 3
    1b10:	0a c0       	rjmp	.+20     	; 0x1b26 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b12:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b16:	82 ff       	sbrs	r24, 2
    1b18:	f2 cf       	rjmp	.-28     	; 0x1afe <Endpoint_Write_Control_Stream_LE+0xa8>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	08 95       	ret
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	08 95       	ret
    1b22:	83 e0       	ldi	r24, 0x03	; 3
    1b24:	08 95       	ret
    1b26:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b28:	08 95       	ret

00001b2a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1b2a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1b2c:	40 91 bb 01 	lds	r20, 0x01BB
    1b30:	50 91 bc 01 	lds	r21, 0x01BC
    1b34:	46 17       	cp	r20, r22
    1b36:	57 07       	cpc	r21, r23
    1b38:	18 f4       	brcc	.+6      	; 0x1b40 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1b3a:	f9 01       	movw	r30, r18
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	44 c0       	rjmp	.+136    	; 0x1bc8 <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1b40:	61 15       	cp	r22, r1
    1b42:	71 05       	cpc	r23, r1
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <Endpoint_Write_Control_PStream_LE+0x20>
    1b46:	ab 01       	movw	r20, r22
    1b48:	f8 cf       	rjmp	.-16     	; 0x1b3a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b4a:	80 91 e8 00 	lds	r24, 0x00E8
    1b4e:	8e 77       	andi	r24, 0x7E	; 126
    1b50:	80 93 e8 00 	sts	0x00E8, r24
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	f0 cf       	rjmp	.-32     	; 0x1b3a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b5a:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b5e:	88 23       	and	r24, r24
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <Endpoint_Write_Control_PStream_LE+0x3a>
    1b62:	48 c0       	rjmp	.+144    	; 0x1bf4 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b64:	85 30       	cpi	r24, 0x05	; 5
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <Endpoint_Write_Control_PStream_LE+0x40>
    1b68:	47 c0       	rjmp	.+142    	; 0x1bf8 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b6a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b6e:	83 fd       	sbrc	r24, 3
    1b70:	45 c0       	rjmp	.+138    	; 0x1bfc <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b72:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b76:	82 fd       	sbrc	r24, 2
    1b78:	37 c0       	rjmp	.+110    	; 0x1be8 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b7a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1b7e:	80 ff       	sbrs	r24, 0
    1b80:	23 c0       	rjmp	.+70     	; 0x1bc8 <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1b82:	80 91 f3 00 	lds	r24, 0x00F3
    1b86:	90 91 f2 00 	lds	r25, 0x00F2
    1b8a:	78 2f       	mov	r23, r24
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	29 2f       	mov	r18, r25
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	26 2b       	or	r18, r22
    1b94:	37 2b       	or	r19, r23
    1b96:	08 c0       	rjmp	.+16     	; 0x1ba8 <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b98:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b9a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1b9e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1ba0:	41 50       	subi	r20, 0x01	; 1
    1ba2:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1ba4:	2f 5f       	subi	r18, 0xFF	; 255
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ba8:	41 15       	cp	r20, r1
    1baa:	51 05       	cpc	r21, r1
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <Endpoint_Write_Control_PStream_LE+0x8a>
    1bae:	28 30       	cpi	r18, 0x08	; 8
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	90 f3       	brcs	.-28     	; 0x1b98 <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	28 30       	cpi	r18, 0x08	; 8
    1bb8:	31 05       	cpc	r19, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <Endpoint_Write_Control_PStream_LE+0x94>
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bbe:	80 91 e8 00 	lds	r24, 0x00E8
    1bc2:	8e 77       	andi	r24, 0x7E	; 126
    1bc4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1bc8:	41 15       	cp	r20, r1
    1bca:	51 05       	cpc	r21, r1
    1bcc:	31 f6       	brne	.-116    	; 0x1b5a <Endpoint_Write_Control_PStream_LE+0x30>
    1bce:	99 23       	and	r25, r25
    1bd0:	21 f6       	brne	.-120    	; 0x1b5a <Endpoint_Write_Control_PStream_LE+0x30>
    1bd2:	0a c0       	rjmp	.+20     	; 0x1be8 <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bd4:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bd8:	88 23       	and	r24, r24
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bdc:	85 30       	cpi	r24, 0x05	; 5
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1be0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1be4:	83 fd       	sbrc	r24, 3
    1be6:	0a c0       	rjmp	.+20     	; 0x1bfc <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1be8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1bec:	82 ff       	sbrs	r24, 2
    1bee:	f2 cf       	rjmp	.-28     	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0xaa>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	08 95       	ret
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	08 95       	ret
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	08 95       	ret
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1bfe:	08 95       	ret

00001c00 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	18 2f       	mov	r17, r24
    1c14:	09 2f       	mov	r16, r25
    1c16:	7b 01       	movw	r14, r22
    1c18:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c1a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <Endpoint_WaitUntilReady>
    1c1e:	b8 2e       	mov	r11, r24
    1c20:	88 23       	and	r24, r24
    1c22:	b1 f5       	brne	.+108    	; 0x1c90 <Endpoint_Write_Stream_LE+0x90>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c24:	81 2f       	mov	r24, r17
    1c26:	90 2f       	mov	r25, r16
    1c28:	9c 01       	movw	r18, r24
    1c2a:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1c2c:	c1 14       	cp	r12, r1
    1c2e:	d1 04       	cpc	r13, r1
    1c30:	39 f0       	breq	.+14     	; 0x1c40 <Endpoint_Write_Stream_LE+0x40>
	{
		Length -= *BytesProcessed;
    1c32:	f6 01       	movw	r30, r12
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	e8 1a       	sub	r14, r24
    1c3a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1c3c:	c8 0f       	add	r28, r24
    1c3e:	d9 1f       	adc	r29, r25
    1c40:	00 e0       	ldi	r16, 0x00	; 0
    1c42:	10 e0       	ldi	r17, 0x00	; 0
    1c44:	22 c0       	rjmp	.+68     	; 0x1c8a <Endpoint_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c46:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1c4a:	85 fd       	sbrc	r24, 5
    1c4c:	16 c0       	rjmp	.+44     	; 0x1c7a <Endpoint_Write_Stream_LE+0x7a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c4e:	80 91 e8 00 	lds	r24, 0x00E8
    1c52:	8e 77       	andi	r24, 0x7E	; 126
    1c54:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1c58:	c1 14       	cp	r12, r1
    1c5a:	d1 04       	cpc	r13, r1
    1c5c:	49 f0       	breq	.+18     	; 0x1c70 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1c5e:	f6 01       	movw	r30, r12
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	80 0f       	add	r24, r16
    1c66:	91 1f       	adc	r25, r17
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	85 e0       	ldi	r24, 0x05	; 5
    1c6e:	11 c0       	rjmp	.+34     	; 0x1c92 <Endpoint_Write_Stream_LE+0x92>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c70:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <Endpoint_WaitUntilReady>
    1c74:	88 23       	and	r24, r24
    1c76:	49 f0       	breq	.+18     	; 0x1c8a <Endpoint_Write_Stream_LE+0x8a>
    1c78:	0c c0       	rjmp	.+24     	; 0x1c92 <Endpoint_Write_Stream_LE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1c7a:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c7c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1c80:	08 94       	sec
    1c82:	e1 08       	sbc	r14, r1
    1c84:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1c86:	0f 5f       	subi	r16, 0xFF	; 255
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1c8a:	e1 14       	cp	r14, r1
    1c8c:	f1 04       	cpc	r15, r1
    1c8e:	d9 f6       	brne	.-74     	; 0x1c46 <Endpoint_Write_Stream_LE+0x46>
    1c90:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	08 95       	ret

00001ca6 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    1ca6:	38 2f       	mov	r19, r24
    1ca8:	28 2f       	mov	r18, r24
    1caa:	2e c0       	rjmp	.+92     	; 0x1d08 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cac:	82 2f       	mov	r24, r18
    1cae:	8f 70       	andi	r24, 0x0F	; 15
    1cb0:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1cb4:	23 17       	cp	r18, r19
    1cb6:	21 f4       	brne	.+8      	; 0x1cc0 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    1cb8:	76 2f       	mov	r23, r22
    1cba:	94 2f       	mov	r25, r20
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1cc0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1cc4:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    1cc8:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1ccc:	91 ff       	sbrs	r25, 1
    1cce:	1b c0       	rjmp	.+54     	; 0x1d06 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1cd0:	80 91 eb 00 	lds	r24, 0x00EB
    1cd4:	8e 7f       	andi	r24, 0xFE	; 254
    1cd6:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1cda:	80 91 ed 00 	lds	r24, 0x00ED
    1cde:	8d 7f       	andi	r24, 0xFD	; 253
    1ce0:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1ce4:	80 91 eb 00 	lds	r24, 0x00EB
    1ce8:	81 60       	ori	r24, 0x01	; 1
    1cea:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1cee:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1cf2:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    1cf6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1cfa:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1cfe:	87 fd       	sbrc	r24, 7
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	27 30       	cpi	r18, 0x07	; 7
    1d0a:	80 f2       	brcs	.-96     	; 0x1cac <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d0c:	3f 70       	andi	r19, 0x0F	; 15
    1d0e:	30 93 e9 00 	sts	0x00E9, r19
    1d12:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1d14:	08 95       	ret

00001d16 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1d16:	80 91 b5 01 	lds	r24, 0x01B5
    1d1a:	88 23       	and	r24, r24
    1d1c:	9c f4       	brge	.+38     	; 0x1d44 <Endpoint_ClearStatusStage+0x2e>
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d20:	80 91 b4 01 	lds	r24, 0x01B4
    1d24:	88 23       	and	r24, r24
    1d26:	b9 f0       	breq	.+46     	; 0x1d56 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d28:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1d2c:	82 ff       	sbrs	r24, 2
    1d2e:	f8 cf       	rjmp	.-16     	; 0x1d20 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d30:	80 91 e8 00 	lds	r24, 0x00E8
    1d34:	8b 77       	andi	r24, 0x7B	; 123
    1d36:	80 93 e8 00 	sts	0x00E8, r24
    1d3a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d3c:	80 91 b4 01 	lds	r24, 0x01B4
    1d40:	88 23       	and	r24, r24
    1d42:	49 f0       	breq	.+18     	; 0x1d56 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d44:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1d48:	80 ff       	sbrs	r24, 0
    1d4a:	f8 cf       	rjmp	.-16     	; 0x1d3c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d4c:	80 91 e8 00 	lds	r24, 0x00E8
    1d50:	8e 77       	andi	r24, 0x7E	; 126
    1d52:	80 93 e8 00 	sts	0x00E8, r24
    1d56:	08 95       	ret

00001d58 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1d58:	40 91 e4 00 	lds	r20, 0x00E4
    1d5c:	50 91 e5 00 	lds	r21, 0x00E5
    1d60:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d62:	80 91 ec 00 	lds	r24, 0x00EC
    1d66:	80 ff       	sbrs	r24, 0
    1d68:	24 c0       	rjmp	.+72     	; 0x1db2 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d6a:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1d6e:	80 fd       	sbrc	r24, 0
    1d70:	1e c0       	rjmp	.+60     	; 0x1dae <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d72:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d76:	88 23       	and	r24, r24
    1d78:	11 f4       	brne	.+4      	; 0x1d7e <Endpoint_WaitUntilReady+0x26>
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d7e:	85 30       	cpi	r24, 0x05	; 5
    1d80:	11 f4       	brne	.+4      	; 0x1d86 <Endpoint_WaitUntilReady+0x2e>
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d86:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1d8a:	85 ff       	sbrs	r24, 5
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <Endpoint_WaitUntilReady+0x3a>
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	08 95       	ret
    1d92:	80 91 e4 00 	lds	r24, 0x00E4
    1d96:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1d9a:	84 17       	cp	r24, r20
    1d9c:	95 07       	cpc	r25, r21
    1d9e:	09 f3       	breq	.-62     	; 0x1d62 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1da0:	22 23       	and	r18, r18
    1da2:	11 f4       	brne	.+4      	; 0x1da8 <Endpoint_WaitUntilReady+0x50>
    1da4:	84 e0       	ldi	r24, 0x04	; 4
    1da6:	08 95       	ret
    1da8:	21 50       	subi	r18, 0x01	; 1
    1daa:	ac 01       	movw	r20, r24
    1dac:	da cf       	rjmp	.-76     	; 0x1d62 <Endpoint_WaitUntilReady+0xa>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1db0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1db2:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1db6:	82 ff       	sbrs	r24, 2
    1db8:	dc cf       	rjmp	.-72     	; 0x1d72 <Endpoint_WaitUntilReady+0x1a>
    1dba:	f9 cf       	rjmp	.-14     	; 0x1dae <Endpoint_WaitUntilReady+0x56>

00001dbc <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1dbc:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1dc0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1dc4:	e0 ee       	ldi	r30, 0xE0	; 224
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	81 60       	ori	r24, 0x01	; 1
    1dcc:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1dce:	a8 ed       	ldi	r26, 0xD8	; 216
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	8c 91       	ld	r24, X
    1dd4:	8f 77       	andi	r24, 0x7F	; 127
    1dd6:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1dd8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1dda:	e7 ed       	ldi	r30, 0xD7	; 215
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8e 7f       	andi	r24, 0xFE	; 254
    1de2:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1de4:	8c 91       	ld	r24, X
    1de6:	8f 7e       	andi	r24, 0xEF	; 239
    1de8:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1dea:	10 92 b3 01 	sts	0x01B3, r1
}
    1dee:	08 95       	ret

00001df0 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1df8:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1dfc:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1e00:	08 ed       	ldi	r16, 0xD8	; 216
    1e02:	10 e0       	ldi	r17, 0x00	; 0
    1e04:	f8 01       	movw	r30, r16
    1e06:	80 81       	ld	r24, Z
    1e08:	8f 77       	andi	r24, 0x7F	; 127
    1e0a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 68       	ori	r24, 0x80	; 128
    1e10:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e12:	80 81       	ld	r24, Z
    1e14:	8f 7d       	andi	r24, 0xDF	; 223
    1e16:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e18:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1e1a:	10 92 b4 01 	sts	0x01B4, r1
	USB_Device_ConfigurationNumber  = 0;
    1e1e:	10 92 b0 01 	sts	0x01B0, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1e22:	10 92 b2 01 	sts	0x01B2, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1e26:	10 92 b1 01 	sts	0x01B1, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1e2a:	80 ee       	ldi	r24, 0xE0	; 224
    1e2c:	e8 2e       	mov	r14, r24
    1e2e:	f1 2c       	mov	r15, r1
    1e30:	f7 01       	movw	r30, r14
    1e32:	80 81       	ld	r24, Z
    1e34:	8b 7f       	andi	r24, 0xFB	; 251
    1e36:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 81       	ld	r24, Z
    1e3c:	81 60       	ori	r24, 0x01	; 1
    1e3e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	42 e0       	ldi	r20, 0x02	; 2
    1e46:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e4a:	e1 ee       	ldi	r30, 0xE1	; 225
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e54:	e2 ee       	ldi	r30, 0xE2	; 226
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	81 60       	ori	r24, 0x01	; 1
    1e5c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 60       	ori	r24, 0x08	; 8
    1e62:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1e64:	f7 01       	movw	r30, r14
    1e66:	80 81       	ld	r24, Z
    1e68:	8e 7f       	andi	r24, 0xFE	; 254
    1e6a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	80 81       	ld	r24, Z
    1e70:	80 61       	ori	r24, 0x10	; 16
    1e72:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	08 95       	ret

00001e7e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1e7e:	e8 ed       	ldi	r30, 0xD8	; 216
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 7e       	andi	r24, 0xEF	; 239
    1e86:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1e88:	e7 ed       	ldi	r30, 0xD7	; 215
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1e92:	84 e0       	ldi	r24, 0x04	; 4
    1e94:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	80 93 b3 01 	sts	0x01B3, r24

	USB_ResetInterface();
    1e9c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <USB_ResetInterface>
}
    1ea0:	08 95       	ret

00001ea2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1ea2:	e8 ed       	ldi	r30, 0xD8	; 216
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8e 7f       	andi	r24, 0xFE	; 254
    1eaa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1eac:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1eb0:	08 95       	ret

00001eb2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1eb2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1eb6:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1eba:	08 95       	ret

00001ebc <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1ebc:	1f 92       	push	r1
    1ebe:	0f 92       	push	r0
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	1f 93       	push	r17
    1ec8:	2f 93       	push	r18
    1eca:	3f 93       	push	r19
    1ecc:	4f 93       	push	r20
    1ece:	5f 93       	push	r21
    1ed0:	6f 93       	push	r22
    1ed2:	7f 93       	push	r23
    1ed4:	8f 93       	push	r24
    1ed6:	9f 93       	push	r25
    1ed8:	af 93       	push	r26
    1eda:	bf 93       	push	r27
    1edc:	ef 93       	push	r30
    1ede:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ee0:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ee4:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ee8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1eec:	80 91 f0 00 	lds	r24, 0x00F0
    1ef0:	87 7f       	andi	r24, 0xF7	; 247
    1ef2:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ef6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1ef8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <USB_Device_ProcessControlRequest>
    1efc:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f00:	80 91 f0 00 	lds	r24, 0x00F0
    1f04:	88 60       	ori	r24, 0x08	; 8
    1f06:	80 93 f0 00 	sts	0x00F0, r24
    1f0a:	1f 70       	andi	r17, 0x0F	; 15
    1f0c:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	1f 91       	pop	r17
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1f34:	1f 92       	push	r1
    1f36:	0f 92       	push	r0
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	0f 92       	push	r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	2f 93       	push	r18
    1f40:	3f 93       	push	r19
    1f42:	4f 93       	push	r20
    1f44:	5f 93       	push	r21
    1f46:	6f 93       	push	r22
    1f48:	7f 93       	push	r23
    1f4a:	8f 93       	push	r24
    1f4c:	9f 93       	push	r25
    1f4e:	af 93       	push	r26
    1f50:	bf 93       	push	r27
    1f52:	ef 93       	push	r30
    1f54:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1f56:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1f5a:	82 ff       	sbrs	r24, 2
    1f5c:	0b c0       	rjmp	.+22     	; 0x1f74 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1f5e:	80 91 e2 00 	lds	r24, 0x00E2
    1f62:	82 ff       	sbrs	r24, 2
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1f66:	80 91 e1 00 	lds	r24, 0x00E1
    1f6a:	8b 7f       	andi	r24, 0xFB	; 251
    1f6c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1f70:	0e 94 a1 09 	call	0x1342	; 0x1342 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1f74:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1f78:	80 ff       	sbrs	r24, 0
    1f7a:	1f c0       	rjmp	.+62     	; 0x1fba <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1f7c:	80 91 d8 00 	lds	r24, 0x00D8
    1f80:	80 ff       	sbrs	r24, 0
    1f82:	1b c0       	rjmp	.+54     	; 0x1fba <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1f84:	80 91 da 00 	lds	r24, 0x00DA
    1f88:	8e 7f       	andi	r24, 0xFE	; 254
    1f8a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1f8e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1f92:	80 ff       	sbrs	r24, 0
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1f96:	80 e1       	ldi	r24, 0x10	; 16
    1f98:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f9a:	82 e1       	ldi	r24, 0x12	; 18
    1f9c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1f9e:	09 b4       	in	r0, 0x29	; 41
    1fa0:	00 fe       	sbrs	r0, 0
    1fa2:	fd cf       	rjmp	.-6      	; 0x1f9e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 b4 01 	sts	0x01B4, r24
			EVENT_USB_Device_Connect();
    1faa:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <EVENT_USB_Device_Connect>
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1fb0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1fb2:	10 92 b4 01 	sts	0x01B4, r1
			EVENT_USB_Device_Disconnect();
    1fb6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1fba:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1fbe:	80 ff       	sbrs	r24, 0
    1fc0:	19 c0       	rjmp	.+50     	; 0x1ff4 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1fc2:	80 91 e2 00 	lds	r24, 0x00E2
    1fc6:	80 ff       	sbrs	r24, 0
    1fc8:	15 c0       	rjmp	.+42     	; 0x1ff4 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1fca:	80 91 e2 00 	lds	r24, 0x00E2
    1fce:	8e 7f       	andi	r24, 0xFE	; 254
    1fd0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1fd4:	80 91 e2 00 	lds	r24, 0x00E2
    1fd8:	80 61       	ori	r24, 0x10	; 16
    1fda:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1fde:	80 91 d8 00 	lds	r24, 0x00D8
    1fe2:	80 62       	ori	r24, 0x20	; 32
    1fe4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1fe8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1fea:	85 e0       	ldi	r24, 0x05	; 5
    1fec:	80 93 b4 01 	sts	0x01B4, r24
		EVENT_USB_Device_Suspend();
    1ff0:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ff4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1ff8:	84 ff       	sbrs	r24, 4
    1ffa:	30 c0       	rjmp	.+96     	; 0x205c <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1ffc:	80 91 e2 00 	lds	r24, 0x00E2
    2000:	84 ff       	sbrs	r24, 4
    2002:	2c c0       	rjmp	.+88     	; 0x205c <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2004:	80 e1       	ldi	r24, 0x10	; 16
    2006:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2008:	82 e1       	ldi	r24, 0x12	; 18
    200a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    200c:	09 b4       	in	r0, 0x29	; 41
    200e:	00 fe       	sbrs	r0, 0
    2010:	fd cf       	rjmp	.-6      	; 0x200c <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2012:	80 91 d8 00 	lds	r24, 0x00D8
    2016:	8f 7d       	andi	r24, 0xDF	; 223
    2018:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    201c:	80 91 e1 00 	lds	r24, 0x00E1
    2020:	8f 7e       	andi	r24, 0xEF	; 239
    2022:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2026:	80 91 e2 00 	lds	r24, 0x00E2
    202a:	8f 7e       	andi	r24, 0xEF	; 239
    202c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2030:	80 91 e2 00 	lds	r24, 0x00E2
    2034:	81 60       	ori	r24, 0x01	; 1
    2036:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    203a:	80 91 b0 01 	lds	r24, 0x01B0
    203e:	88 23       	and	r24, r24
    2040:	11 f0       	breq	.+4      	; 0x2046 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2042:	84 e0       	ldi	r24, 0x04	; 4
    2044:	07 c0       	rjmp	.+14     	; 0x2054 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2046:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    204a:	87 fd       	sbrc	r24, 7
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <__vector_10+0x11e>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <__vector_10+0x120>
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	80 93 b4 01 	sts	0x01B4, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2058:	0e 94 49 0b 	call	0x1692	; 0x1692 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    205c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2060:	83 ff       	sbrs	r24, 3
    2062:	29 c0       	rjmp	.+82     	; 0x20b6 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2064:	80 91 e2 00 	lds	r24, 0x00E2
    2068:	83 ff       	sbrs	r24, 3
    206a:	25 c0       	rjmp	.+74     	; 0x20b6 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    206c:	80 91 e1 00 	lds	r24, 0x00E1
    2070:	87 7f       	andi	r24, 0xF7	; 247
    2072:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	80 93 b4 01 	sts	0x01B4, r24
		USB_Device_ConfigurationNumber = 0;
    207c:	10 92 b0 01 	sts	0x01B0, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2080:	80 91 e1 00 	lds	r24, 0x00E1
    2084:	8e 7f       	andi	r24, 0xFE	; 254
    2086:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    208a:	80 91 e2 00 	lds	r24, 0x00E2
    208e:	8e 7f       	andi	r24, 0xFE	; 254
    2090:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2094:	80 91 e2 00 	lds	r24, 0x00E2
    2098:	80 61       	ori	r24, 0x10	; 16
    209a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	42 e0       	ldi	r20, 0x02	; 2
    20a4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    20a8:	80 91 f0 00 	lds	r24, 0x00F0
    20ac:	88 60       	ori	r24, 0x08	; 8
    20ae:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    20b2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    20b6:	ff 91       	pop	r31
    20b8:	ef 91       	pop	r30
    20ba:	bf 91       	pop	r27
    20bc:	af 91       	pop	r26
    20be:	9f 91       	pop	r25
    20c0:	8f 91       	pop	r24
    20c2:	7f 91       	pop	r23
    20c4:	6f 91       	pop	r22
    20c6:	5f 91       	pop	r21
    20c8:	4f 91       	pop	r20
    20ca:	3f 91       	pop	r19
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    20d8:	1f 93       	push	r17
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	ac 97       	sbiw	r28, 0x2c	; 44
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	e5 eb       	ldi	r30, 0xB5	; 181
    20f0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20f2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    20f6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    20f8:	21 e0       	ldi	r18, 0x01	; 1
    20fa:	ed 3b       	cpi	r30, 0xBD	; 189
    20fc:	f2 07       	cpc	r31, r18
    20fe:	c9 f7       	brne	.-14     	; 0x20f2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2100:	0e 94 be 0b 	call	0x177c	; 0x177c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2104:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2108:	83 ff       	sbrs	r24, 3
    210a:	3e c1       	rjmp	.+636    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    210c:	80 91 b5 01 	lds	r24, 0x01B5

		switch (USB_ControlRequest.bRequest)
    2110:	30 91 b6 01 	lds	r19, 0x01B6
    2114:	35 30       	cpi	r19, 0x05	; 5
    2116:	09 f4       	brne	.+2      	; 0x211a <USB_Device_ProcessControlRequest+0x42>
    2118:	87 c0       	rjmp	.+270    	; 0x2228 <USB_Device_ProcessControlRequest+0x150>
    211a:	36 30       	cpi	r19, 0x06	; 6
    211c:	40 f4       	brcc	.+16     	; 0x212e <USB_Device_ProcessControlRequest+0x56>
    211e:	31 30       	cpi	r19, 0x01	; 1
    2120:	c9 f1       	breq	.+114    	; 0x2194 <USB_Device_ProcessControlRequest+0xbc>
    2122:	31 30       	cpi	r19, 0x01	; 1
    2124:	70 f0       	brcs	.+28     	; 0x2142 <USB_Device_ProcessControlRequest+0x6a>
    2126:	33 30       	cpi	r19, 0x03	; 3
    2128:	09 f0       	breq	.+2      	; 0x212c <USB_Device_ProcessControlRequest+0x54>
    212a:	2e c1       	rjmp	.+604    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
    212c:	33 c0       	rjmp	.+102    	; 0x2194 <USB_Device_ProcessControlRequest+0xbc>
    212e:	38 30       	cpi	r19, 0x08	; 8
    2130:	09 f4       	brne	.+2      	; 0x2134 <USB_Device_ProcessControlRequest+0x5c>
    2132:	f9 c0       	rjmp	.+498    	; 0x2326 <USB_Device_ProcessControlRequest+0x24e>
    2134:	39 30       	cpi	r19, 0x09	; 9
    2136:	09 f4       	brne	.+2      	; 0x213a <USB_Device_ProcessControlRequest+0x62>
    2138:	09 c1       	rjmp	.+530    	; 0x234c <USB_Device_ProcessControlRequest+0x274>
    213a:	36 30       	cpi	r19, 0x06	; 6
    213c:	09 f0       	breq	.+2      	; 0x2140 <USB_Device_ProcessControlRequest+0x68>
    213e:	24 c1       	rjmp	.+584    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
    2140:	97 c0       	rjmp	.+302    	; 0x2270 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2142:	80 38       	cpi	r24, 0x80	; 128
    2144:	21 f0       	breq	.+8      	; 0x214e <USB_Device_ProcessControlRequest+0x76>
    2146:	82 38       	cpi	r24, 0x82	; 130
    2148:	09 f0       	breq	.+2      	; 0x214c <USB_Device_ProcessControlRequest+0x74>
    214a:	1e c1       	rjmp	.+572    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
    214c:	08 c0       	rjmp	.+16     	; 0x215e <USB_Device_ProcessControlRequest+0x86>
    214e:	90 91 b1 01 	lds	r25, 0x01B1
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2152:	80 91 b2 01 	lds	r24, 0x01B2
    2156:	88 23       	and	r24, r24
    2158:	99 f0       	breq	.+38     	; 0x2180 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    215a:	92 60       	ori	r25, 0x02	; 2
    215c:	11 c0       	rjmp	.+34     	; 0x2180 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    215e:	80 91 b9 01 	lds	r24, 0x01B9
    2162:	8f 70       	andi	r24, 0x0F	; 15
    2164:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2168:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	25 e0       	ldi	r18, 0x05	; 5
    2170:	96 95       	lsr	r25
    2172:	87 95       	ror	r24
    2174:	2a 95       	dec	r18
    2176:	e1 f7       	brne	.-8      	; 0x2170 <USB_Device_ProcessControlRequest+0x98>
    2178:	98 2f       	mov	r25, r24
    217a:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    217c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2180:	80 91 e8 00 	lds	r24, 0x00E8
    2184:	87 7f       	andi	r24, 0xF7	; 247
    2186:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    218a:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    218e:	10 92 f1 00 	sts	0x00F1, r1
    2192:	d4 c0       	rjmp	.+424    	; 0x233c <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2194:	88 23       	and	r24, r24
    2196:	19 f0       	breq	.+6      	; 0x219e <USB_Device_ProcessControlRequest+0xc6>
    2198:	82 30       	cpi	r24, 0x02	; 2
    219a:	09 f0       	breq	.+2      	; 0x219e <USB_Device_ProcessControlRequest+0xc6>
    219c:	f5 c0       	rjmp	.+490    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	8f 71       	andi	r24, 0x1F	; 31
    21a2:	90 70       	andi	r25, 0x00	; 0
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	21 f0       	breq	.+8      	; 0x21b0 <USB_Device_ProcessControlRequest+0xd8>
    21a8:	02 97       	sbiw	r24, 0x02	; 2
    21aa:	09 f0       	breq	.+2      	; 0x21ae <USB_Device_ProcessControlRequest+0xd6>
    21ac:	ed c0       	rjmp	.+474    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
    21ae:	0c c0       	rjmp	.+24     	; 0x21c8 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    21b0:	80 91 b7 01 	lds	r24, 0x01B7
    21b4:	81 30       	cpi	r24, 0x01	; 1
    21b6:	09 f0       	breq	.+2      	; 0x21ba <USB_Device_ProcessControlRequest+0xe2>
    21b8:	e7 c0       	rjmp	.+462    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    21ba:	10 92 b2 01 	sts	0x01B2, r1
    21be:	33 30       	cpi	r19, 0x03	; 3
    21c0:	69 f5       	brne	.+90     	; 0x221c <USB_Device_ProcessControlRequest+0x144>
    21c2:	80 93 b2 01 	sts	0x01B2, r24
    21c6:	2a c0       	rjmp	.+84     	; 0x221c <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    21c8:	80 91 b7 01 	lds	r24, 0x01B7
    21cc:	88 23       	and	r24, r24
    21ce:	31 f5       	brne	.+76     	; 0x221c <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    21d0:	20 91 b9 01 	lds	r18, 0x01B9
    21d4:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    21d6:	09 f4       	brne	.+2      	; 0x21da <USB_Device_ProcessControlRequest+0x102>
    21d8:	d7 c0       	rjmp	.+430    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21da:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    21de:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    21e2:	80 ff       	sbrs	r24, 0
    21e4:	1b c0       	rjmp	.+54     	; 0x221c <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    21e6:	33 30       	cpi	r19, 0x03	; 3
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    21ea:	80 91 eb 00 	lds	r24, 0x00EB
    21ee:	80 62       	ori	r24, 0x20	; 32
    21f0:	13 c0       	rjmp	.+38     	; 0x2218 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    21f2:	80 91 eb 00 	lds	r24, 0x00EB
    21f6:	80 61       	ori	r24, 0x10	; 16
    21f8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <USB_Device_ProcessControlRequest+0x12e>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	2a 95       	dec	r18
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <USB_Device_ProcessControlRequest+0x12a>
    220a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    220e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2212:	80 91 eb 00 	lds	r24, 0x00EB
    2216:	88 60       	ori	r24, 0x08	; 8
    2218:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    221c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2220:	80 91 e8 00 	lds	r24, 0x00E8
    2224:	87 7f       	andi	r24, 0xF7	; 247
    2226:	8d c0       	rjmp	.+282    	; 0x2342 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2228:	88 23       	and	r24, r24
    222a:	09 f0       	breq	.+2      	; 0x222e <USB_Device_ProcessControlRequest+0x156>
    222c:	ad c0       	rjmp	.+346    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    222e:	10 91 b7 01 	lds	r17, 0x01B7
    2232:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2234:	80 91 e3 00 	lds	r24, 0x00E3
    2238:	80 78       	andi	r24, 0x80	; 128
    223a:	81 2b       	or	r24, r17
    223c:	80 93 e3 00 	sts	0x00E3, r24
    2240:	80 91 e8 00 	lds	r24, 0x00E8
    2244:	87 7f       	andi	r24, 0xF7	; 247
    2246:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    224a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    224e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2252:	80 ff       	sbrs	r24, 0
    2254:	fc cf       	rjmp	.-8      	; 0x224e <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2256:	80 91 e3 00 	lds	r24, 0x00E3
    225a:	80 68       	ori	r24, 0x80	; 128
    225c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2260:	11 23       	and	r17, r17
    2262:	11 f4       	brne	.+4      	; 0x2268 <USB_Device_ProcessControlRequest+0x190>
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	01 c0       	rjmp	.+2      	; 0x226a <USB_Device_ProcessControlRequest+0x192>
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	80 93 b4 01 	sts	0x01B4, r24
    226e:	8c c0       	rjmp	.+280    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2270:	80 58       	subi	r24, 0x80	; 128
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	08 f0       	brcs	.+2      	; 0x2278 <USB_Device_ProcessControlRequest+0x1a0>
    2276:	88 c0       	rjmp	.+272    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2278:	80 91 b7 01 	lds	r24, 0x01B7
    227c:	90 91 b8 01 	lds	r25, 0x01B8
    2280:	23 e0       	ldi	r18, 0x03	; 3
    2282:	8c 3d       	cpi	r24, 0xDC	; 220
    2284:	92 07       	cpc	r25, r18
    2286:	09 f0       	breq	.+2      	; 0x228a <USB_Device_ProcessControlRequest+0x1b2>
    2288:	34 c0       	rjmp	.+104    	; 0x22f2 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    228e:	8a e2       	ldi	r24, 0x2A	; 42
    2290:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2292:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2294:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2296:	de 01       	movw	r26, r28
    2298:	15 96       	adiw	r26, 0x05	; 5
    229a:	6e e0       	ldi	r22, 0x0E	; 14
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    22a0:	11 e2       	ldi	r17, 0x21	; 33
    22a2:	e6 2f       	mov	r30, r22
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	10 93 57 00 	sts	0x0057, r17
    22aa:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    22ac:	40 ff       	sbrs	r20, 0
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    22b0:	82 95       	swap	r24
    22b2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    22b4:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    22b6:	8f 70       	andi	r24, 0x0F	; 15
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    22bc:	8a 30       	cpi	r24, 0x0A	; 10
    22be:	18 f0       	brcs	.+6      	; 0x22c6 <USB_Device_ProcessControlRequest+0x1ee>
    22c0:	c9 01       	movw	r24, r18
    22c2:	c7 96       	adiw	r24, 0x37	; 55
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <USB_Device_ProcessControlRequest+0x1f2>
    22c6:	c9 01       	movw	r24, r18
    22c8:	c0 96       	adiw	r24, 0x30	; 48
    22ca:	8d 93       	st	X+, r24
    22cc:	9d 93       	st	X+, r25
    22ce:	4f 5f       	subi	r20, 0xFF	; 255
    22d0:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    22d2:	44 31       	cpi	r20, 0x14	; 20
    22d4:	51 05       	cpc	r21, r1
    22d6:	29 f7       	brne	.-54     	; 0x22a2 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    22d8:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22da:	80 91 e8 00 	lds	r24, 0x00E8
    22de:	87 7f       	andi	r24, 0xF7	; 247
    22e0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    22e4:	ce 01       	movw	r24, r28
    22e6:	03 96       	adiw	r24, 0x03	; 3
    22e8:	6a e2       	ldi	r22, 0x2A	; 42
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Endpoint_Write_Control_Stream_LE>
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    22f2:	60 91 b9 01 	lds	r22, 0x01B9
    22f6:	ae 01       	movw	r20, r28
    22f8:	4f 5f       	subi	r20, 0xFF	; 255
    22fa:	5f 4f       	sbci	r21, 0xFF	; 255
    22fc:	0e 94 96 0c 	call	0x192c	; 0x192c <CALLBACK_USB_GetDescriptor>
    2300:	bc 01       	movw	r22, r24
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	09 f4       	brne	.+2      	; 0x2308 <USB_Device_ProcessControlRequest+0x230>
    2306:	40 c0       	rjmp	.+128    	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
    2308:	80 91 e8 00 	lds	r24, 0x00E8
    230c:	87 7f       	andi	r24, 0xF7	; 247
    230e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    231a:	80 91 e8 00 	lds	r24, 0x00E8
    231e:	8b 77       	andi	r24, 0x7B	; 123
    2320:	80 93 e8 00 	sts	0x00E8, r24
    2324:	31 c0       	rjmp	.+98     	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2326:	80 38       	cpi	r24, 0x80	; 128
    2328:	79 f5       	brne	.+94     	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    232a:	80 91 e8 00 	lds	r24, 0x00E8
    232e:	87 7f       	andi	r24, 0xF7	; 247
    2330:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2334:	80 91 b0 01 	lds	r24, 0x01B0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2338:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    233c:	80 91 e8 00 	lds	r24, 0x00E8
    2340:	8e 77       	andi	r24, 0x7E	; 126
    2342:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2346:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_ClearStatusStage>
    234a:	1e c0       	rjmp	.+60     	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    234c:	88 23       	and	r24, r24
    234e:	e1 f4       	brne	.+56     	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2350:	90 91 b7 01 	lds	r25, 0x01B7
    2354:	92 30       	cpi	r25, 0x02	; 2
    2356:	c0 f4       	brcc	.+48     	; 0x2388 <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2358:	80 91 e8 00 	lds	r24, 0x00E8
    235c:	87 7f       	andi	r24, 0xF7	; 247
    235e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2362:	90 93 b0 01 	sts	0x01B0, r25

	Endpoint_ClearStatusStage();
    2366:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    236a:	80 91 b0 01 	lds	r24, 0x01B0
    236e:	88 23       	and	r24, r24
    2370:	31 f4       	brne	.+12     	; 0x237e <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2372:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2376:	87 fd       	sbrc	r24, 7
    2378:	02 c0       	rjmp	.+4      	; 0x237e <USB_Device_ProcessControlRequest+0x2a6>
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <USB_Device_ProcessControlRequest+0x2a8>
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	80 93 b4 01 	sts	0x01B4, r24

	EVENT_USB_Device_ConfigurationChanged();
    2384:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2388:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    238c:	83 ff       	sbrs	r24, 3
    238e:	0a c0       	rjmp	.+20     	; 0x23a4 <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2390:	80 91 e8 00 	lds	r24, 0x00E8
    2394:	87 7f       	andi	r24, 0xF7	; 247
    2396:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    239a:	80 91 eb 00 	lds	r24, 0x00EB
    239e:	80 62       	ori	r24, 0x20	; 32
    23a0:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    23a4:	ac 96       	adiw	r28, 0x2c	; 44
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	1f 91       	pop	r17
    23b6:	08 95       	ret

000023b8 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    23b8:	90 93 42 01 	sts	0x0142, r25
    23bc:	80 93 41 01 	sts	0x0141, r24
}
    23c0:	08 95       	ret

000023c2 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    23c2:	e0 91 41 01 	lds	r30, 0x0141
    23c6:	f0 91 42 01 	lds	r31, 0x0142
    23ca:	30 97       	sbiw	r30, 0x00	; 0
    23cc:	11 f4       	brne	.+4      	; 0x23d2 <host_keyboard_leds+0x10>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	08 95       	ret
    return (*driver->keyboard_leds)();
    23d2:	01 90       	ld	r0, Z+
    23d4:	f0 81       	ld	r31, Z
    23d6:	e0 2d       	mov	r30, r0
    23d8:	09 95       	icall
}
    23da:	08 95       	ret

000023dc <host_mouse_send>:
    }
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    23dc:	e0 91 41 01 	lds	r30, 0x0141
    23e0:	f0 91 42 01 	lds	r31, 0x0142
    23e4:	30 97       	sbiw	r30, 0x00	; 0
    23e6:	21 f0       	breq	.+8      	; 0x23f0 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    23e8:	04 80       	ldd	r0, Z+4	; 0x04
    23ea:	f5 81       	ldd	r31, Z+5	; 0x05
    23ec:	e0 2d       	mov	r30, r0
    23ee:	09 95       	icall
    23f0:	08 95       	ret

000023f2 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    23f2:	9c 01       	movw	r18, r24
    if (report == last_system_report) return;
    23f4:	80 91 3f 01 	lds	r24, 0x013F
    23f8:	90 91 40 01 	lds	r25, 0x0140
    23fc:	28 17       	cp	r18, r24
    23fe:	39 07       	cpc	r19, r25
    2400:	79 f0       	breq	.+30     	; 0x2420 <host_system_send+0x2e>
    last_system_report = report;
    2402:	30 93 40 01 	sts	0x0140, r19
    2406:	20 93 3f 01 	sts	0x013F, r18

    if (!driver) return;
    240a:	e0 91 41 01 	lds	r30, 0x0141
    240e:	f0 91 42 01 	lds	r31, 0x0142
    2412:	30 97       	sbiw	r30, 0x00	; 0
    2414:	29 f0       	breq	.+10     	; 0x2420 <host_system_send+0x2e>
    (*driver->send_system)(report);
    2416:	06 80       	ldd	r0, Z+6	; 0x06
    2418:	f7 81       	ldd	r31, Z+7	; 0x07
    241a:	e0 2d       	mov	r30, r0
    241c:	c9 01       	movw	r24, r18
    241e:	09 95       	icall
    2420:	08 95       	ret

00002422 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    2422:	9c 01       	movw	r18, r24
    if (report == last_consumer_report) return;
    2424:	80 91 3d 01 	lds	r24, 0x013D
    2428:	90 91 3e 01 	lds	r25, 0x013E
    242c:	28 17       	cp	r18, r24
    242e:	39 07       	cpc	r19, r25
    2430:	79 f0       	breq	.+30     	; 0x2450 <host_consumer_send+0x2e>
    last_consumer_report = report;
    2432:	30 93 3e 01 	sts	0x013E, r19
    2436:	20 93 3d 01 	sts	0x013D, r18

    if (!driver) return;
    243a:	e0 91 41 01 	lds	r30, 0x0141
    243e:	f0 91 42 01 	lds	r31, 0x0142
    2442:	30 97       	sbiw	r30, 0x00	; 0
    2444:	29 f0       	breq	.+10     	; 0x2450 <host_consumer_send+0x2e>
    (*driver->send_consumer)(report);
    2446:	00 84       	ldd	r0, Z+8	; 0x08
    2448:	f1 85       	ldd	r31, Z+9	; 0x09
    244a:	e0 2d       	mov	r30, r0
    244c:	c9 01       	movw	r24, r18
    244e:	09 95       	icall
    2450:	08 95       	ret

00002452 <host_keyboard_send>:
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	18 2f       	mov	r17, r24
    2460:	09 2f       	mov	r16, r25
    if (!driver) return;
    2462:	e0 91 41 01 	lds	r30, 0x0141
    2466:	f0 91 42 01 	lds	r31, 0x0142
    246a:	30 97       	sbiw	r30, 0x00	; 0
    246c:	d9 f1       	breq	.+118    	; 0x24e4 <host_keyboard_send+0x92>
    (*driver->send_keyboard)(report);
    246e:	02 80       	ldd	r0, Z+2	; 0x02
    2470:	f3 81       	ldd	r31, Z+3	; 0x03
    2472:	e0 2d       	mov	r30, r0
    2474:	09 95       	icall

    if (debug_keyboard) {
    2476:	80 91 9f 01 	lds	r24, 0x019F
    247a:	82 ff       	sbrs	r24, 2
    247c:	33 c0       	rjmp	.+102    	; 0x24e4 <host_keyboard_send+0x92>
        dprint("keyboard_report: ");
    247e:	80 ff       	sbrs	r24, 0
    2480:	04 c0       	rjmp	.+8      	; 0x248a <host_keyboard_send+0x38>
    2482:	82 e6       	ldi	r24, 0x62	; 98
    2484:	95 e0       	ldi	r25, 0x05	; 5
    2486:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    248a:	81 2f       	mov	r24, r17
    248c:	90 2f       	mov	r25, r16
    248e:	9c 01       	movw	r18, r24
    2490:	e9 01       	movw	r28, r18
    2492:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2494:	8c e5       	ldi	r24, 0x5C	; 92
    2496:	e8 2e       	mov	r14, r24
    2498:	85 e0       	ldi	r24, 0x05	; 5
    249a:	f8 2e       	mov	r15, r24
    249c:	80 91 9f 01 	lds	r24, 0x019F
    24a0:	80 ff       	sbrs	r24, 0
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <host_keyboard_send+0x7a>
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <host_keyboard_send+0x54>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <host_keyboard_send+0x56>
    24a8:	ed b7       	in	r30, 0x3d	; 61
    24aa:	fe b7       	in	r31, 0x3e	; 62
    24ac:	31 96       	adiw	r30, 0x01	; 1
    24ae:	ad b7       	in	r26, 0x3d	; 61
    24b0:	be b7       	in	r27, 0x3e	; 62
    24b2:	12 96       	adiw	r26, 0x02	; 2
    24b4:	fc 92       	st	X, r15
    24b6:	ee 92       	st	-X, r14
    24b8:	11 97       	sbiw	r26, 0x01	; 1
    24ba:	88 81       	ld	r24, Y
    24bc:	82 83       	std	Z+2, r24	; 0x02
    24be:	13 82       	std	Z+3, r1	; 0x03
    24c0:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    24cc:	1f 5f       	subi	r17, 0xFF	; 255
    24ce:	21 96       	adiw	r28, 0x01	; 1
    24d0:	10 31       	cpi	r17, 0x10	; 16
    24d2:	21 f7       	brne	.-56     	; 0x249c <host_keyboard_send+0x4a>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    24d4:	80 91 9f 01 	lds	r24, 0x019F
    24d8:	80 ff       	sbrs	r24, 0
    24da:	04 c0       	rjmp	.+8      	; 0x24e4 <host_keyboard_send+0x92>
    24dc:	8a e5       	ldi	r24, 0x5A	; 90
    24de:	95 e0       	ldi	r25, 0x05	; 5
    24e0:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    }
}
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	ff 90       	pop	r15
    24ee:	ef 90       	pop	r14
    24f0:	08 95       	ret

000024f2 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    24f2:	08 95       	ret

000024f4 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    24f4:	0e 94 79 12 	call	0x24f2	; 0x24f2 <matrix_setup>
}
    24f8:	08 95       	ret

000024fa <keyboard_set_leds>:
    }
}

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    24fa:	0e 94 9a 09 	call	0x1334	; 0x1334 <led_set>
}
    24fe:	08 95       	ret

00002500 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2500:	2f 92       	push	r2
    2502:	3f 92       	push	r3
    2504:	5f 92       	push	r5
    2506:	6f 92       	push	r6
    2508:	7f 92       	push	r7
    250a:	8f 92       	push	r8
    250c:	9f 92       	push	r9
    250e:	af 92       	push	r10
    2510:	bf 92       	push	r11
    2512:	cf 92       	push	r12
    2514:	df 92       	push	r13
    2516:	ef 92       	push	r14
    2518:	ff 92       	push	r15
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	2a 97       	sbiw	r28, 0x0a	; 10
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2532:	0e 94 00 08 	call	0x1000	; 0x1000 <matrix_scan>
    2536:	24 e4       	ldi	r18, 0x44	; 68
    2538:	a2 2e       	mov	r10, r18
    253a:	21 e0       	ldi	r18, 0x01	; 1
    253c:	b2 2e       	mov	r11, r18
    253e:	88 24       	eor	r8, r8
    2540:	99 24       	eor	r9, r9
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	29 2e       	mov	r2, r25
    2546:	31 2c       	mov	r3, r1
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2548:	58 2c       	mov	r5, r8
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    254a:	88 2d       	mov	r24, r8
    254c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <matrix_get_row>
    2550:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2552:	d5 01       	movw	r26, r10
    2554:	ed 90       	ld	r14, X+
    2556:	fc 90       	ld	r15, X
    2558:	e8 26       	eor	r14, r24
    255a:	f9 26       	eor	r15, r25
        if (matrix_change) {
    255c:	e1 14       	cp	r14, r1
    255e:	f1 04       	cpc	r15, r1
    2560:	09 f4       	brne	.+2      	; 0x2564 <keyboard_task+0x64>
    2562:	43 c0       	rjmp	.+134    	; 0x25ea <keyboard_task+0xea>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2564:	80 91 9f 01 	lds	r24, 0x019F
    2568:	81 ff       	sbrs	r24, 1
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <keyboard_task+0x70>
    256c:	0e 94 4b 09 	call	0x1296	; 0x1296 <matrix_print>
    2570:	00 e0       	ldi	r16, 0x00	; 0
    2572:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2574:	31 01       	movw	r6, r2
    2576:	00 2e       	mov	r0, r16
    2578:	02 c0       	rjmp	.+4      	; 0x257e <keyboard_task+0x7e>
    257a:	66 0c       	add	r6, r6
    257c:	77 1c       	adc	r7, r7
    257e:	0a 94       	dec	r0
    2580:	e2 f7       	brpl	.-8      	; 0x257a <keyboard_task+0x7a>
    2582:	c3 01       	movw	r24, r6
    2584:	8e 21       	and	r24, r14
    2586:	9f 21       	and	r25, r15
    2588:	89 2b       	or	r24, r25
    258a:	51 f1       	breq	.+84     	; 0x25e0 <keyboard_task+0xe0>
                    keyevent_t e = (keyevent_t){
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
    258c:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <timer_read>
    2590:	9c 01       	movw	r18, r24
    2592:	09 83       	std	Y+1, r16	; 0x01
    2594:	5a 82       	std	Y+2, r5	; 0x02
    2596:	1b 82       	std	Y+3, r1	; 0x03
    2598:	c6 20       	and	r12, r6
    259a:	d7 20       	and	r13, r7
    259c:	cd 28       	or	r12, r13
    259e:	11 f0       	breq	.+4      	; 0x25a4 <keyboard_task+0xa4>
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	c9 01       	movw	r24, r18
    25a6:	81 60       	ori	r24, 0x01	; 1
    25a8:	78 2f       	mov	r23, r24
    25aa:	9d 83       	std	Y+5, r25	; 0x05
    25ac:	8c 83       	std	Y+4, r24	; 0x04
                    action_exec(e);
    25ae:	49 81       	ldd	r20, Y+1	; 0x01
    25b0:	5a 81       	ldd	r21, Y+2	; 0x02
    25b2:	6b 81       	ldd	r22, Y+3	; 0x03
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	0e 94 34 17 	call	0x2e68	; 0x2e68 <action_exec>
                    hook_matrix_change(e);
    25ba:	49 81       	ldd	r20, Y+1	; 0x01
    25bc:	5a 81       	ldd	r21, Y+2	; 0x02
    25be:	6b 81       	ldd	r22, Y+3	; 0x03
    25c0:	7c 81       	ldd	r23, Y+4	; 0x04
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    25c8:	f4 01       	movw	r30, r8
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ec 5b       	subi	r30, 0xBC	; 188
    25d0:	fe 4f       	sbci	r31, 0xFE	; 254
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	86 25       	eor	r24, r6
    25d8:	97 25       	eor	r25, r7
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
    25de:	21 c0       	rjmp	.+66     	; 0x2622 <keyboard_task+0x122>
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    25e0:	0f 5f       	subi	r16, 0xFF	; 255
    25e2:	1f 4f       	sbci	r17, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    25e4:	0d 30       	cpi	r16, 0x0D	; 13
    25e6:	11 05       	cpc	r17, r1
    25e8:	29 f6       	brne	.-118    	; 0x2574 <keyboard_task+0x74>
    25ea:	08 94       	sec
    25ec:	81 1c       	adc	r8, r1
    25ee:	91 1c       	adc	r9, r1
    25f0:	e2 e0       	ldi	r30, 0x02	; 2
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	ae 0e       	add	r10, r30
    25f6:	bf 1e       	adc	r11, r31
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	8f 16       	cp	r8, r31
    25fc:	91 04       	cpc	r9, r1
    25fe:	09 f0       	breq	.+2      	; 0x2602 <keyboard_task+0x102>
    2600:	a3 cf       	rjmp	.-186    	; 0x2548 <keyboard_task+0x48>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2602:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <timer_read>
    2606:	2f ef       	ldi	r18, 0xFF	; 255
    2608:	2e 83       	std	Y+6, r18	; 0x06
    260a:	2f 83       	std	Y+7, r18	; 0x07
    260c:	18 86       	std	Y+8, r1	; 0x08
    260e:	81 60       	ori	r24, 0x01	; 1
    2610:	78 2f       	mov	r23, r24
    2612:	9a 87       	std	Y+10, r25	; 0x0a
    2614:	89 87       	std	Y+9, r24	; 0x09
    2616:	4f ef       	ldi	r20, 0xFF	; 255
    2618:	5f ef       	ldi	r21, 0xFF	; 255
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	8a 85       	ldd	r24, Y+10	; 0x0a
    261e:	0e 94 34 17 	call	0x2e68	; 0x2e68 <action_exec>

MATRIX_LOOP_END:

    hook_keyboard_loop();
    2622:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2626:	0e 94 28 25 	call	0x4a50	; 0x4a50 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    262a:	10 91 43 01 	lds	r17, 0x0143
    262e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    2632:	18 17       	cp	r17, r24
    2634:	21 f1       	breq	.+72     	; 0x267e <keyboard_task+0x17e>
        led_status = host_keyboard_leds();
    2636:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    263a:	28 2f       	mov	r18, r24
    263c:	80 93 43 01 	sts	0x0143, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2640:	80 91 9f 01 	lds	r24, 0x019F
    2644:	82 ff       	sbrs	r24, 2
    2646:	17 c0       	rjmp	.+46     	; 0x2676 <keyboard_task+0x176>
    2648:	80 ff       	sbrs	r24, 0
    264a:	15 c0       	rjmp	.+42     	; 0x2676 <keyboard_task+0x176>
    264c:	00 d0       	rcall	.+0      	; 0x264e <keyboard_task+0x14e>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <keyboard_task+0x150>
    2650:	ed b7       	in	r30, 0x3d	; 61
    2652:	fe b7       	in	r31, 0x3e	; 62
    2654:	31 96       	adiw	r30, 0x01	; 1
    2656:	84 e7       	ldi	r24, 0x74	; 116
    2658:	95 e0       	ldi	r25, 0x05	; 5
    265a:	ad b7       	in	r26, 0x3d	; 61
    265c:	be b7       	in	r27, 0x3e	; 62
    265e:	12 96       	adiw	r26, 0x02	; 2
    2660:	9c 93       	st	X, r25
    2662:	8e 93       	st	-X, r24
    2664:	11 97       	sbiw	r26, 0x01	; 1
    2666:	22 83       	std	Z+2, r18	; 0x02
    2668:	13 82       	std	Z+3, r1	; 0x03
    266a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2676:	80 91 43 01 	lds	r24, 0x0143
    267a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <hook_keyboard_leds_change>
    }
}
    267e:	2a 96       	adiw	r28, 0x0a	; 10
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	df 90       	pop	r13
    2698:	cf 90       	pop	r12
    269a:	bf 90       	pop	r11
    269c:	af 90       	pop	r10
    269e:	9f 90       	pop	r9
    26a0:	8f 90       	pop	r8
    26a2:	7f 90       	pop	r7
    26a4:	6f 90       	pop	r6
    26a6:	5f 90       	pop	r5
    26a8:	3f 90       	pop	r3
    26aa:	2f 90       	pop	r2
    26ac:	08 95       	ret

000026ae <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    26ae:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <timer_init>
    matrix_init();
    26b2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    26b6:	0e 94 2a 21 	call	0x4254	; 0x4254 <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    26ba:	08 95       	ret

000026bc <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <debug_event+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <debug_event+0x8>
    26c4:	0f 92       	push	r0
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <debug_record>:

void debug_record(keyrecord_t record)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <debug_record+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <debug_record+0x8>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <debug_record+0xa>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    26e8:	26 96       	adiw	r28, 0x06	; 6
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    26fa:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <layer_switch_get_action>
    26fe:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    2700:	89 2f       	mov	r24, r25
    2702:	82 95       	swap	r24
    2704:	8f 70       	andi	r24, 0x0F	; 15
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	2c 30       	cpi	r18, 0x0C	; 12
    270c:	31 05       	cpc	r19, r1
    270e:	4c f4       	brge	.+18     	; 0x2722 <is_tap_key+0x28>
    2710:	2a 30       	cpi	r18, 0x0A	; 10
    2712:	31 05       	cpc	r19, r1
    2714:	6c f4       	brge	.+26     	; 0x2730 <is_tap_key+0x36>
    2716:	22 50       	subi	r18, 0x02	; 2
    2718:	30 40       	sbci	r19, 0x00	; 0
    271a:	22 30       	cpi	r18, 0x02	; 2
    271c:	31 05       	cpc	r19, r1
    271e:	c0 f4       	brcc	.+48     	; 0x2750 <is_tap_key+0x56>
    2720:	07 c0       	rjmp	.+14     	; 0x2730 <is_tap_key+0x36>
    2722:	2c 30       	cpi	r18, 0x0C	; 12
    2724:	31 05       	cpc	r19, r1
    2726:	51 f0       	breq	.+20     	; 0x273c <is_tap_key+0x42>
    2728:	2f 30       	cpi	r18, 0x0F	; 15
    272a:	31 05       	cpc	r19, r1
    272c:	89 f4       	brne	.+34     	; 0x2750 <is_tap_key+0x56>
    272e:	06 c0       	rjmp	.+12     	; 0x273c <is_tap_key+0x42>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2730:	40 3e       	cpi	r20, 0xE0	; 224
    2732:	10 f0       	brcs	.+4      	; 0x2738 <is_tap_key+0x3e>
    2734:	40 3f       	cpi	r20, 0xF0	; 240
    2736:	61 f4       	brne	.+24     	; 0x2750 <is_tap_key+0x56>
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	08 95       	ret
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    273c:	9f 70       	andi	r25, 0x0F	; 15
    273e:	89 2f       	mov	r24, r25
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	23 e0       	ldi	r18, 0x03	; 3
    2744:	96 95       	lsr	r25
    2746:	87 95       	ror	r24
    2748:	2a 95       	dec	r18
    274a:	e1 f7       	brne	.-8      	; 0x2744 <is_tap_key+0x4a>
    274c:	81 70       	andi	r24, 0x01	; 1
    274e:	08 95       	ret
    2750:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return false;
}
    2752:	08 95       	ret

00002754 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2754:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <clear_weak_mods>
    clear_keys();
    2758:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <clear_keys>
    send_keyboard_report();
    275c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2760:	0e 94 4c 24 	call	0x4898	; 0x4898 <mousekey_clear>
    mousekey_send();
    2764:	0e 94 58 24 	call	0x48b0	; 0x48b0 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <host_system_send>
    host_consumer_send(0);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 11 12 	call	0x2422	; 0x2422 <host_consumer_send>
#endif
}
    2778:	08 95       	ret

0000277a <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    277a:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <clear_mods>
    clear_keyboard_but_mods();
    277e:	0e 94 aa 13 	call	0x2754	; 0x2754 <clear_keyboard_but_mods>
}
    2782:	08 95       	ret

00002784 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2784:	88 23       	and	r24, r24
    2786:	21 f0       	breq	.+8      	; 0x2790 <unregister_mods+0xc>
        del_mods(mods);
    2788:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <del_mods>
        send_keyboard_report();
    278c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
    2790:	08 95       	ret

00002792 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2792:	88 23       	and	r24, r24
    2794:	21 f0       	breq	.+8      	; 0x279e <register_mods+0xc>
        add_mods(mods);
    2796:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <add_mods>
        send_keyboard_report();
    279a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
    279e:	08 95       	ret

000027a0 <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
    27a0:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    27a2:	88 23       	and	r24, r24
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <unregister_code+0x8>
    27a6:	4e c0       	rjmp	.+156    	; 0x2844 <unregister_code+0xa4>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    27a8:	82 38       	cpi	r24, 0x82	; 130
    27aa:	59 f4       	brne	.+22     	; 0x27c2 <unregister_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    27ac:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    27b0:	81 ff       	sbrs	r24, 1
    27b2:	48 c0       	rjmp	.+144    	; 0x2844 <unregister_code+0xa4>
#endif
        add_key(KC_CAPSLOCK);
    27b4:	89 e3       	ldi	r24, 0x39	; 57
    27b6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <add_key>
        send_keyboard_report();
    27ba:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    27be:	89 e3       	ldi	r24, 0x39	; 57
    27c0:	0c c0       	rjmp	.+24     	; 0x27da <unregister_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    27c2:	83 38       	cpi	r24, 0x83	; 131
    27c4:	69 f4       	brne	.+26     	; 0x27e0 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    27c6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    27ca:	80 ff       	sbrs	r24, 0
    27cc:	3b c0       	rjmp	.+118    	; 0x2844 <unregister_code+0xa4>
#endif
        add_key(KC_NUMLOCK);
    27ce:	83 e5       	ldi	r24, 0x53	; 83
    27d0:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <add_key>
        send_keyboard_report();
    27d4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    27d8:	83 e5       	ldi	r24, 0x53	; 83
    27da:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <del_key>
    27de:	1f c0       	rjmp	.+62     	; 0x281e <unregister_code+0x7e>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    27e0:	84 38       	cpi	r24, 0x84	; 132
    27e2:	59 f4       	brne	.+22     	; 0x27fa <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    27e4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    27e8:	82 ff       	sbrs	r24, 2
    27ea:	2c c0       	rjmp	.+88     	; 0x2844 <unregister_code+0xa4>
#endif
        add_key(KC_SCROLLLOCK);
    27ec:	87 e4       	ldi	r24, 0x47	; 71
    27ee:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <add_key>
        send_keyboard_report();
    27f2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    27f6:	87 e4       	ldi	r24, 0x47	; 71
    27f8:	f0 cf       	rjmp	.-32     	; 0x27da <unregister_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    27fa:	84 50       	subi	r24, 0x04	; 4
    27fc:	81 3a       	cpi	r24, 0xA1	; 161
    27fe:	10 f4       	brcc	.+4      	; 0x2804 <unregister_code+0x64>
        del_key(code);
    2800:	82 2f       	mov	r24, r18
    2802:	eb cf       	rjmp	.-42     	; 0x27da <unregister_code+0x3a>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2804:	82 2f       	mov	r24, r18
    2806:	80 5e       	subi	r24, 0xE0	; 224
    2808:	88 30       	cpi	r24, 0x08	; 8
    280a:	60 f4       	brcc	.+24     	; 0x2824 <unregister_code+0x84>
        del_mods(MOD_BIT(code));
    280c:	27 70       	andi	r18, 0x07	; 7
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <unregister_code+0x76>
    2814:	88 0f       	add	r24, r24
    2816:	2a 95       	dec	r18
    2818:	ea f7       	brpl	.-6      	; 0x2814 <unregister_code+0x74>
    281a:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <del_mods>
        send_keyboard_report();
    281e:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
    2822:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    2824:	82 2f       	mov	r24, r18
    2826:	85 5a       	subi	r24, 0xA5	; 165
    2828:	83 30       	cpi	r24, 0x03	; 3
    282a:	28 f4       	brcc	.+10     	; 0x2836 <unregister_code+0x96>
        host_system_send(0);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <host_system_send>
    2834:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    2836:	28 5a       	subi	r18, 0xA8	; 168
    2838:	25 31       	cpi	r18, 0x15	; 21
    283a:	20 f4       	brcc	.+8      	; 0x2844 <unregister_code+0xa4>
        host_consumer_send(0);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 11 12 	call	0x2422	; 0x2422 <host_consumer_send>
    2844:	08 95       	ret

00002846 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2846:	1f 93       	push	r17
    2848:	18 2f       	mov	r17, r24
    if (code == KC_NO) {
    284a:	88 23       	and	r24, r24
    284c:	09 f4       	brne	.+2      	; 0x2850 <register_code+0xa>
    284e:	d0 c0       	rjmp	.+416    	; 0x29f0 <register_code+0x1aa>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2850:	82 38       	cpi	r24, 0x82	; 130
    2852:	59 f4       	brne	.+22     	; 0x286a <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2854:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    2858:	81 fd       	sbrc	r24, 1
    285a:	ca c0       	rjmp	.+404    	; 0x29f0 <register_code+0x1aa>
#endif
        add_key(KC_CAPSLOCK);
    285c:	89 e3       	ldi	r24, 0x39	; 57
    285e:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <add_key>
        send_keyboard_report();
    2862:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2866:	89 e3       	ldi	r24, 0x39	; 57
    2868:	0c c0       	rjmp	.+24     	; 0x2882 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    286a:	83 38       	cpi	r24, 0x83	; 131
    286c:	79 f4       	brne	.+30     	; 0x288c <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    286e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    2872:	80 fd       	sbrc	r24, 0
    2874:	bd c0       	rjmp	.+378    	; 0x29f0 <register_code+0x1aa>
#endif
        add_key(KC_NUMLOCK);
    2876:	83 e5       	ldi	r24, 0x53	; 83
    2878:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <add_key>
        send_keyboard_report();
    287c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2880:	83 e5       	ldi	r24, 0x53	; 83
    2882:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <del_key>
        send_keyboard_report();
    2886:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
    288a:	b2 c0       	rjmp	.+356    	; 0x29f0 <register_code+0x1aa>
    }

    else if (KC_LOCKING_SCROLL == code) {
    288c:	84 38       	cpi	r24, 0x84	; 132
    288e:	59 f4       	brne	.+22     	; 0x28a6 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2890:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    2894:	82 fd       	sbrc	r24, 2
    2896:	ac c0       	rjmp	.+344    	; 0x29f0 <register_code+0x1aa>
#endif
        add_key(KC_SCROLLLOCK);
    2898:	87 e4       	ldi	r24, 0x47	; 71
    289a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <add_key>
        send_keyboard_report();
    289e:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28a2:	87 e4       	ldi	r24, 0x47	; 71
    28a4:	ee cf       	rjmp	.-36     	; 0x2882 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28a6:	84 50       	subi	r24, 0x04	; 4
    28a8:	81 3a       	cpi	r24, 0xA1	; 161
    28aa:	50 f4       	brcc	.+20     	; 0x28c0 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    28ac:	81 2f       	mov	r24, r17
    28ae:	0e 94 18 2b 	call	0x5630	; 0x5630 <command_proc>
    28b2:	88 23       	and	r24, r24
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <register_code+0x72>
    28b6:	9c c0       	rjmp	.+312    	; 0x29f0 <register_code+0x1aa>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    28b8:	81 2f       	mov	r24, r17
    28ba:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <add_key>
    28be:	e3 cf       	rjmp	.-58     	; 0x2886 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    28c0:	81 2f       	mov	r24, r17
    28c2:	80 5e       	subi	r24, 0xE0	; 224
    28c4:	88 30       	cpi	r24, 0x08	; 8
    28c6:	50 f4       	brcc	.+20     	; 0x28dc <register_code+0x96>
        add_mods(MOD_BIT(code));
    28c8:	17 70       	andi	r17, 0x07	; 7
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <register_code+0x8c>
    28d0:	88 0f       	add	r24, r24
    28d2:	1a 95       	dec	r17
    28d4:	ea f7       	brpl	.-6      	; 0x28d0 <register_code+0x8a>
    28d6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <add_mods>
    28da:	d5 cf       	rjmp	.-86     	; 0x2886 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    28dc:	81 2f       	mov	r24, r17
    28de:	85 5a       	subi	r24, 0xA5	; 165
    28e0:	83 30       	cpi	r24, 0x03	; 3
    28e2:	a0 f4       	brcc	.+40     	; 0x290c <register_code+0xc6>
        host_system_send(KEYCODE2SYSTEM(code));
    28e4:	15 3a       	cpi	r17, 0xA5	; 165
    28e6:	19 f4       	brne	.+6      	; 0x28ee <register_code+0xa8>
    28e8:	81 e8       	ldi	r24, 0x81	; 129
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0c c0       	rjmp	.+24     	; 0x2906 <register_code+0xc0>
    28ee:	16 3a       	cpi	r17, 0xA6	; 166
    28f0:	19 f4       	brne	.+6      	; 0x28f8 <register_code+0xb2>
    28f2:	82 e8       	ldi	r24, 0x82	; 130
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	07 c0       	rjmp	.+14     	; 0x2906 <register_code+0xc0>
    28f8:	17 3a       	cpi	r17, 0xA7	; 167
    28fa:	19 f0       	breq	.+6      	; 0x2902 <register_code+0xbc>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <register_code+0xc0>
    2902:	83 e8       	ldi	r24, 0x83	; 131
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <host_system_send>
    290a:	72 c0       	rjmp	.+228    	; 0x29f0 <register_code+0x1aa>
    }
    else if IS_CONSUMER(code) {
    290c:	81 2f       	mov	r24, r17
    290e:	88 5a       	subi	r24, 0xA8	; 168
    2910:	85 31       	cpi	r24, 0x15	; 21
    2912:	08 f0       	brcs	.+2      	; 0x2916 <register_code+0xd0>
    2914:	6d c0       	rjmp	.+218    	; 0x29f0 <register_code+0x1aa>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2916:	18 3a       	cpi	r17, 0xA8	; 168
    2918:	19 f4       	brne	.+6      	; 0x2920 <register_code+0xda>
    291a:	82 ee       	ldi	r24, 0xE2	; 226
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	66 c0       	rjmp	.+204    	; 0x29ec <register_code+0x1a6>
    2920:	19 3a       	cpi	r17, 0xA9	; 169
    2922:	19 f4       	brne	.+6      	; 0x292a <register_code+0xe4>
    2924:	89 ee       	ldi	r24, 0xE9	; 233
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	61 c0       	rjmp	.+194    	; 0x29ec <register_code+0x1a6>
    292a:	1a 3a       	cpi	r17, 0xAA	; 170
    292c:	19 f4       	brne	.+6      	; 0x2934 <register_code+0xee>
    292e:	8a ee       	ldi	r24, 0xEA	; 234
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	5c c0       	rjmp	.+184    	; 0x29ec <register_code+0x1a6>
    2934:	1b 3a       	cpi	r17, 0xAB	; 171
    2936:	19 f4       	brne	.+6      	; 0x293e <register_code+0xf8>
    2938:	85 eb       	ldi	r24, 0xB5	; 181
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	57 c0       	rjmp	.+174    	; 0x29ec <register_code+0x1a6>
    293e:	1c 3a       	cpi	r17, 0xAC	; 172
    2940:	19 f4       	brne	.+6      	; 0x2948 <register_code+0x102>
    2942:	86 eb       	ldi	r24, 0xB6	; 182
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	52 c0       	rjmp	.+164    	; 0x29ec <register_code+0x1a6>
    2948:	1d 3a       	cpi	r17, 0xAD	; 173
    294a:	19 f4       	brne	.+6      	; 0x2952 <register_code+0x10c>
    294c:	83 eb       	ldi	r24, 0xB3	; 179
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	4d c0       	rjmp	.+154    	; 0x29ec <register_code+0x1a6>
    2952:	1e 3a       	cpi	r17, 0xAE	; 174
    2954:	19 f4       	brne	.+6      	; 0x295c <register_code+0x116>
    2956:	84 eb       	ldi	r24, 0xB4	; 180
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	48 c0       	rjmp	.+144    	; 0x29ec <register_code+0x1a6>
    295c:	1f 3a       	cpi	r17, 0xAF	; 175
    295e:	19 f4       	brne	.+6      	; 0x2966 <register_code+0x120>
    2960:	87 eb       	ldi	r24, 0xB7	; 183
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	43 c0       	rjmp	.+134    	; 0x29ec <register_code+0x1a6>
    2966:	11 3b       	cpi	r17, 0xB1	; 177
    2968:	19 f4       	brne	.+6      	; 0x2970 <register_code+0x12a>
    296a:	8c ec       	ldi	r24, 0xCC	; 204
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	3e c0       	rjmp	.+124    	; 0x29ec <register_code+0x1a6>
    2970:	10 3b       	cpi	r17, 0xB0	; 176
    2972:	19 f4       	brne	.+6      	; 0x297a <register_code+0x134>
    2974:	8d ec       	ldi	r24, 0xCD	; 205
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	39 c0       	rjmp	.+114    	; 0x29ec <register_code+0x1a6>
    297a:	12 3b       	cpi	r17, 0xB2	; 178
    297c:	19 f4       	brne	.+6      	; 0x2984 <register_code+0x13e>
    297e:	83 e8       	ldi	r24, 0x83	; 131
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	34 c0       	rjmp	.+104    	; 0x29ec <register_code+0x1a6>
    2984:	13 3b       	cpi	r17, 0xB3	; 179
    2986:	19 f4       	brne	.+6      	; 0x298e <register_code+0x148>
    2988:	8a e8       	ldi	r24, 0x8A	; 138
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	2f c0       	rjmp	.+94     	; 0x29ec <register_code+0x1a6>
    298e:	14 3b       	cpi	r17, 0xB4	; 180
    2990:	19 f4       	brne	.+6      	; 0x2998 <register_code+0x152>
    2992:	82 e9       	ldi	r24, 0x92	; 146
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	2a c0       	rjmp	.+84     	; 0x29ec <register_code+0x1a6>
    2998:	15 3b       	cpi	r17, 0xB5	; 181
    299a:	19 f4       	brne	.+6      	; 0x29a2 <register_code+0x15c>
    299c:	84 e9       	ldi	r24, 0x94	; 148
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	25 c0       	rjmp	.+74     	; 0x29ec <register_code+0x1a6>
    29a2:	16 3b       	cpi	r17, 0xB6	; 182
    29a4:	19 f4       	brne	.+6      	; 0x29ac <register_code+0x166>
    29a6:	81 e2       	ldi	r24, 0x21	; 33
    29a8:	92 e0       	ldi	r25, 0x02	; 2
    29aa:	20 c0       	rjmp	.+64     	; 0x29ec <register_code+0x1a6>
    29ac:	17 3b       	cpi	r17, 0xB7	; 183
    29ae:	19 f4       	brne	.+6      	; 0x29b6 <register_code+0x170>
    29b0:	83 e2       	ldi	r24, 0x23	; 35
    29b2:	92 e0       	ldi	r25, 0x02	; 2
    29b4:	1b c0       	rjmp	.+54     	; 0x29ec <register_code+0x1a6>
    29b6:	18 3b       	cpi	r17, 0xB8	; 184
    29b8:	19 f4       	brne	.+6      	; 0x29c0 <register_code+0x17a>
    29ba:	84 e2       	ldi	r24, 0x24	; 36
    29bc:	92 e0       	ldi	r25, 0x02	; 2
    29be:	16 c0       	rjmp	.+44     	; 0x29ec <register_code+0x1a6>
    29c0:	19 3b       	cpi	r17, 0xB9	; 185
    29c2:	19 f4       	brne	.+6      	; 0x29ca <register_code+0x184>
    29c4:	85 e2       	ldi	r24, 0x25	; 37
    29c6:	92 e0       	ldi	r25, 0x02	; 2
    29c8:	11 c0       	rjmp	.+34     	; 0x29ec <register_code+0x1a6>
    29ca:	1a 3b       	cpi	r17, 0xBA	; 186
    29cc:	19 f4       	brne	.+6      	; 0x29d4 <register_code+0x18e>
    29ce:	86 e2       	ldi	r24, 0x26	; 38
    29d0:	92 e0       	ldi	r25, 0x02	; 2
    29d2:	0c c0       	rjmp	.+24     	; 0x29ec <register_code+0x1a6>
    29d4:	1b 3b       	cpi	r17, 0xBB	; 187
    29d6:	19 f4       	brne	.+6      	; 0x29de <register_code+0x198>
    29d8:	87 e2       	ldi	r24, 0x27	; 39
    29da:	92 e0       	ldi	r25, 0x02	; 2
    29dc:	07 c0       	rjmp	.+14     	; 0x29ec <register_code+0x1a6>
    29de:	1c 3b       	cpi	r17, 0xBC	; 188
    29e0:	19 f0       	breq	.+6      	; 0x29e8 <register_code+0x1a2>
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <register_code+0x1a6>
    29e8:	8a e2       	ldi	r24, 0x2A	; 42
    29ea:	92 e0       	ldi	r25, 0x02	; 2
    29ec:	0e 94 11 12 	call	0x2422	; 0x2422 <host_consumer_send>
    }
}
    29f0:	1f 91       	pop	r17
    29f2:	08 95       	ret

000029f4 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    29f4:	af 92       	push	r10
    29f6:	bf 92       	push	r11
    29f8:	cf 92       	push	r12
    29fa:	df 92       	push	r13
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	2a 97       	sbiw	r28, 0x0a	; 10
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    2a1a:	de 01       	movw	r26, r28
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	fc 01       	movw	r30, r24
    2a20:	85 e0       	ldi	r24, 0x05	; 5
    2a22:	01 90       	ld	r0, Z+
    2a24:	0d 92       	st	X+, r0
    2a26:	81 50       	subi	r24, 0x01	; 1
    2a28:	e1 f7       	brne	.-8      	; 0x2a22 <process_action+0x2e>
    2a2a:	0b 81       	ldd	r16, Y+3	; 0x03
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2a2c:	f5 01       	movw	r30, r10
    2a2e:	f5 80       	ldd	r15, Z+5	; 0x05
    2a30:	f2 94       	swap	r15
    2a32:	4f e0       	ldi	r20, 0x0F	; 15
    2a34:	f4 22       	and	r15, r20
#endif

    if (IS_NOEVENT(event)) { return; }
    2a36:	de 01       	movw	r26, r28
    2a38:	16 96       	adiw	r26, 0x06	; 6
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	31 96       	adiw	r30, 0x01	; 1
    2a3e:	85 e0       	ldi	r24, 0x05	; 5
    2a40:	01 90       	ld	r0, Z+
    2a42:	0d 92       	st	X+, r0
    2a44:	81 50       	subi	r24, 0x01	; 1
    2a46:	e1 f7       	brne	.-8      	; 0x2a40 <process_action+0x4c>
    2a48:	3e 81       	ldd	r19, Y+6	; 0x06
    2a4a:	2f 81       	ldd	r18, Y+7	; 0x07

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	89 2b       	or	r24, r25
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <process_action+0x62>
    2a54:	f8 c1       	rjmp	.+1008   	; 0x2e46 <process_action+0x452>
    2a56:	2f 3f       	cpi	r18, 0xFF	; 255
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <process_action+0x68>
    2a5a:	c8 c1       	rjmp	.+912    	; 0x2dec <process_action+0x3f8>
    2a5c:	3f 3f       	cpi	r19, 0xFF	; 255
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <process_action+0x6e>
    2a60:	c5 c1       	rjmp	.+906    	; 0x2dec <process_action+0x3f8>
    2a62:	f1 c1       	rjmp	.+994    	; 0x2e46 <process_action+0x452>
    2a64:	8d 2d       	mov	r24, r13
    2a66:	8f 70       	andi	r24, 0x0F	; 15
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
    2a68:	22 23       	and	r18, r18
    2a6a:	11 f4       	brne	.+4      	; 0x2a70 <process_action+0x7c>
    2a6c:	18 2f       	mov	r17, r24
    2a6e:	03 c0       	rjmp	.+6      	; 0x2a76 <process_action+0x82>
    2a70:	18 2f       	mov	r17, r24
    2a72:	12 95       	swap	r17
    2a74:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    2a76:	00 23       	and	r16, r16
    2a78:	49 f0       	breq	.+18     	; 0x2a8c <process_action+0x98>
                    if (mods) {
    2a7a:	11 23       	and	r17, r17
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <process_action+0x8c>
    2a7e:	90 c1       	rjmp	.+800    	; 0x2da0 <process_action+0x3ac>
                        add_weak_mods(mods);
    2a80:	81 2f       	mov	r24, r17
    2a82:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <add_weak_mods>
                        send_keyboard_report();
    2a86:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
    2a8a:	8a c1       	rjmp	.+788    	; 0x2da0 <process_action+0x3ac>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2a8c:	8c 2d       	mov	r24, r12
    2a8e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <unregister_code>
                    if (mods) {
    2a92:	11 23       	and	r17, r17
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <process_action+0xa4>
    2a96:	d7 c1       	rjmp	.+942    	; 0x2e46 <process_action+0x452>
                        del_weak_mods(mods);
    2a98:	81 2f       	mov	r24, r17
    2a9a:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <del_weak_mods>
                        send_keyboard_report();
    2a9e:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
    2aa2:	d1 c1       	rjmp	.+930    	; 0x2e46 <process_action+0x452>
    2aa4:	8d 2d       	mov	r24, r13
    2aa6:	8f 70       	andi	r24, 0x0F	; 15
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
                                                                    action.key.mods<<4;
    2aa8:	20 32       	cpi	r18, 0x20	; 32
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <process_action+0xbc>
    2aac:	18 2f       	mov	r17, r24
    2aae:	03 c0       	rjmp	.+6      	; 0x2ab6 <process_action+0xc2>
    2ab0:	18 2f       	mov	r17, r24
    2ab2:	12 95       	swap	r17
    2ab4:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.layer_tap.code) {
    2ab6:	cc 20       	and	r12, r12
    2ab8:	21 f0       	breq	.+8      	; 0x2ac2 <process_action+0xce>
    2aba:	f1 e0       	ldi	r31, 0x01	; 1
    2abc:	cf 16       	cp	r12, r31
    2abe:	29 f5       	brne	.+74     	; 0x2b0a <process_action+0x116>
    2ac0:	14 c0       	rjmp	.+40     	; 0x2aea <process_action+0xf6>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2ac2:	00 23       	and	r16, r16
    2ac4:	49 f0       	breq	.+18     	; 0x2ad8 <process_action+0xe4>
                            if (tap_count == 0) {
    2ac6:	ff 20       	and	r15, r15
    2ac8:	51 f1       	breq	.+84     	; 0x2b1e <process_action+0x12a>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2aca:	21 e0       	ldi	r18, 0x01	; 1
    2acc:	f2 16       	cp	r15, r18
    2ace:	39 f5       	brne	.+78     	; 0x2b1e <process_action+0x12a>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2ad0:	81 2f       	mov	r24, r17
    2ad2:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <set_oneshot_mods>
    2ad6:	b7 c1       	rjmp	.+878    	; 0x2e46 <process_action+0x452>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2ad8:	ff 20       	and	r15, r15
    2ada:	21 f0       	breq	.+8      	; 0x2ae4 <process_action+0xf0>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	f8 16       	cp	r15, r24
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <process_action+0xf0>
    2ae2:	b1 c1       	rjmp	.+866    	; 0x2e46 <process_action+0x452>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2ae4:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <clear_oneshot_mods>
    2ae8:	2f c1       	rjmp	.+606    	; 0x2d48 <process_action+0x354>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2aea:	00 23       	and	r16, r16
    2aec:	49 f0       	breq	.+18     	; 0x2b00 <process_action+0x10c>
                            if (tap_count <= TAPPING_TOGGLE) {
    2aee:	e5 e0       	ldi	r30, 0x05	; 5
    2af0:	ef 15       	cp	r30, r15
    2af2:	08 f4       	brcc	.+2      	; 0x2af6 <process_action+0x102>
    2af4:	a8 c1       	rjmp	.+848    	; 0x2e46 <process_action+0x452>
                                if (mods & get_mods()) {
    2af6:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <get_mods>
    2afa:	81 23       	and	r24, r17
    2afc:	81 f0       	breq	.+32     	; 0x2b1e <process_action+0x12a>
    2afe:	24 c1       	rjmp	.+584    	; 0x2d48 <process_action+0x354>
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2b00:	f4 e0       	ldi	r31, 0x04	; 4
    2b02:	ff 15       	cp	r31, r15
    2b04:	08 f4       	brcc	.+2      	; 0x2b08 <process_action+0x114>
    2b06:	9f c1       	rjmp	.+830    	; 0x2e46 <process_action+0x452>
    2b08:	1f c1       	rjmp	.+574    	; 0x2d48 <process_action+0x354>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2b0a:	00 23       	and	r16, r16
    2b0c:	61 f0       	breq	.+24     	; 0x2b26 <process_action+0x132>
                            if (tap_count > 0) {
    2b0e:	ff 20       	and	r15, r15
    2b10:	31 f0       	breq	.+12     	; 0x2b1e <process_action+0x12a>
                                if (record->tap.interrupted) {
    2b12:	f5 01       	movw	r30, r10
    2b14:	85 81       	ldd	r24, Z+5	; 0x05
    2b16:	80 ff       	sbrs	r24, 0
    2b18:	43 c1       	rjmp	.+646    	; 0x2da0 <process_action+0x3ac>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2b1a:	8f 70       	andi	r24, 0x0F	; 15
    2b1c:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    2b1e:	81 2f       	mov	r24, r17
    2b20:	0e 94 c9 13 	call	0x2792	; 0x2792 <register_mods>
    2b24:	90 c1       	rjmp	.+800    	; 0x2e46 <process_action+0x452>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2b26:	ff 20       	and	r15, r15
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <process_action+0x138>
    2b2a:	0e c1       	rjmp	.+540    	; 0x2d48 <process_action+0x354>
    2b2c:	44 c1       	rjmp	.+648    	; 0x2db6 <process_action+0x3c2>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2b2e:	8d 2d       	mov	r24, r13
    2b30:	86 95       	lsr	r24
    2b32:	86 95       	lsr	r24
    2b34:	83 70       	andi	r24, 0x03	; 3
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	21 f0       	breq	.+8      	; 0x2b44 <process_action+0x150>
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <process_action+0x14e>
    2b40:	82 c1       	rjmp	.+772    	; 0x2e46 <process_action+0x452>
    2b42:	0a c0       	rjmp	.+20     	; 0x2b58 <process_action+0x164>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2b44:	00 23       	and	r16, r16
    2b46:	19 f0       	breq	.+6      	; 0x2b4e <process_action+0x15a>
                        host_system_send(action.usage.code);
    2b48:	c6 01       	movw	r24, r12
    2b4a:	93 70       	andi	r25, 0x03	; 3
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <process_action+0x15e>
                    } else {
                        host_system_send(0);
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <host_system_send>
    2b56:	77 c1       	rjmp	.+750    	; 0x2e46 <process_action+0x452>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2b58:	00 23       	and	r16, r16
    2b5a:	19 f0       	breq	.+6      	; 0x2b62 <process_action+0x16e>
                        host_consumer_send(action.usage.code);
    2b5c:	c6 01       	movw	r24, r12
    2b5e:	93 70       	andi	r25, 0x03	; 3
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <process_action+0x172>
                    } else {
                        host_consumer_send(0);
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 11 12 	call	0x2422	; 0x2422 <host_consumer_send>
    2b6a:	6d c1       	rjmp	.+730    	; 0x2e46 <process_action+0x452>
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2b6c:	00 23       	and	r16, r16
    2b6e:	21 f0       	breq	.+8      	; 0x2b78 <process_action+0x184>
                mousekey_on(action.key.code);
    2b70:	8c 2d       	mov	r24, r12
    2b72:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <mousekey_on>
    2b76:	03 c0       	rjmp	.+6      	; 0x2b7e <process_action+0x18a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2b78:	8c 2d       	mov	r24, r12
    2b7a:	0e 94 c4 23 	call	0x4788	; 0x4788 <mousekey_off>
                mousekey_send();
    2b7e:	0e 94 58 24 	call	0x48b0	; 0x48b0 <mousekey_send>
    2b82:	61 c1       	rjmp	.+706    	; 0x2e46 <process_action+0x452>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2b84:	8d 2d       	mov	r24, r13
    2b86:	83 70       	andi	r24, 0x03	; 3
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <process_action+0x198>
    2b8a:	5e c0       	rjmp	.+188    	; 0x2c48 <process_action+0x254>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2b8c:	00 23       	and	r16, r16
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <process_action+0x19e>
    2b90:	5a c1       	rjmp	.+692    	; 0x2e46 <process_action+0x452>
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b92:	2c 2d       	mov	r18, r12
    2b94:	22 95       	swap	r18
    2b96:	26 95       	lsr	r18
    2b98:	27 70       	andi	r18, 0x07	; 7
    2b9a:	22 0f       	add	r18, r18
    2b9c:	22 0f       	add	r18, r18
    2b9e:	8c 2d       	mov	r24, r12
    2ba0:	8f 70       	andi	r24, 0x0F	; 15
    2ba2:	e8 2e       	mov	r14, r24
    2ba4:	ff 24       	eor	r15, r15
    2ba6:	00 e0       	ldi	r16, 0x00	; 0
    2ba8:	10 e0       	ldi	r17, 0x00	; 0
    2baa:	02 2e       	mov	r0, r18
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <process_action+0x1c2>
    2bae:	ee 0c       	add	r14, r14
    2bb0:	ff 1c       	adc	r15, r15
    2bb2:	00 1f       	adc	r16, r16
    2bb4:	11 1f       	adc	r17, r17
    2bb6:	0a 94       	dec	r0
    2bb8:	d2 f7       	brpl	.-12     	; 0x2bae <process_action+0x1ba>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2bba:	c4 fc       	sbrc	r12, 4
    2bbc:	05 c0       	rjmp	.+10     	; 0x2bc8 <process_action+0x1d4>
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0f c0       	rjmp	.+30     	; 0x2be6 <process_action+0x1f2>
    2bc8:	6f e0       	ldi	r22, 0x0F	; 15
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	04 c0       	rjmp	.+8      	; 0x2bda <process_action+0x1e6>
    2bd2:	66 0f       	add	r22, r22
    2bd4:	77 1f       	adc	r23, r23
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	2a 95       	dec	r18
    2bdc:	d2 f7       	brpl	.-12     	; 0x2bd2 <process_action+0x1de>
    2bde:	60 95       	com	r22
    2be0:	70 95       	com	r23
    2be2:	80 95       	com	r24
    2be4:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2be6:	d6 94       	lsr	r13
    2be8:	d6 94       	lsr	r13
    2bea:	f3 e0       	ldi	r31, 0x03	; 3
    2bec:	df 22       	and	r13, r31
    2bee:	4d 2d       	mov	r20, r13
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	41 30       	cpi	r20, 0x01	; 1
    2bf4:	51 05       	cpc	r21, r1
    2bf6:	a9 f0       	breq	.+42     	; 0x2c22 <process_action+0x22e>
    2bf8:	42 30       	cpi	r20, 0x02	; 2
    2bfa:	51 05       	cpc	r21, r1
    2bfc:	1c f4       	brge	.+6      	; 0x2c04 <process_action+0x210>
    2bfe:	45 2b       	or	r20, r21
    2c00:	49 f0       	breq	.+18     	; 0x2c14 <process_action+0x220>
    2c02:	21 c1       	rjmp	.+578    	; 0x2e46 <process_action+0x452>
    2c04:	42 30       	cpi	r20, 0x02	; 2
    2c06:	51 05       	cpc	r21, r1
    2c08:	89 f0       	breq	.+34     	; 0x2c2c <process_action+0x238>
    2c0a:	43 30       	cpi	r20, 0x03	; 3
    2c0c:	51 05       	cpc	r21, r1
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <process_action+0x21e>
    2c10:	1a c1       	rjmp	.+564    	; 0x2e46 <process_action+0x452>
    2c12:	13 c0       	rjmp	.+38     	; 0x2c3a <process_action+0x246>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2c14:	6e 29       	or	r22, r14
    2c16:	7f 29       	or	r23, r15
    2c18:	80 2b       	or	r24, r16
    2c1a:	91 2b       	or	r25, r17
    2c1c:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <default_layer_and>
    2c20:	12 c1       	rjmp	.+548    	; 0x2e46 <process_action+0x452>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    2c22:	6e 29       	or	r22, r14
    2c24:	7f 29       	or	r23, r15
    2c26:	80 2b       	or	r24, r16
    2c28:	91 2b       	or	r25, r17
    2c2a:	0b c0       	rjmp	.+22     	; 0x2c42 <process_action+0x24e>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2c2c:	6e 29       	or	r22, r14
    2c2e:	7f 29       	or	r23, r15
    2c30:	80 2b       	or	r24, r16
    2c32:	91 2b       	or	r25, r17
    2c34:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <default_layer_xor>
    2c38:	06 c1       	rjmp	.+524    	; 0x2e46 <process_action+0x452>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c3a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <default_layer_and>
    2c3e:	c8 01       	movw	r24, r16
    2c40:	b7 01       	movw	r22, r14
    2c42:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <default_layer_or>
    2c46:	ff c0       	rjmp	.+510    	; 0x2e46 <process_action+0x452>
    2c48:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2c4a:	00 23       	and	r16, r16
    2c4c:	11 f4       	brne	.+4      	; 0x2c52 <process_action+0x25e>
    2c4e:	96 95       	lsr	r25
    2c50:	87 95       	ror	r24
    2c52:	81 70       	andi	r24, 0x01	; 1
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <process_action+0x264>
    2c56:	f7 c0       	rjmp	.+494    	; 0x2e46 <process_action+0x452>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2c58:	2c 2d       	mov	r18, r12
    2c5a:	22 95       	swap	r18
    2c5c:	26 95       	lsr	r18
    2c5e:	27 70       	andi	r18, 0x07	; 7
    2c60:	22 0f       	add	r18, r18
    2c62:	22 0f       	add	r18, r18
    2c64:	8c 2d       	mov	r24, r12
    2c66:	8f 70       	andi	r24, 0x0F	; 15
    2c68:	e8 2e       	mov	r14, r24
    2c6a:	ff 24       	eor	r15, r15
    2c6c:	00 e0       	ldi	r16, 0x00	; 0
    2c6e:	10 e0       	ldi	r17, 0x00	; 0
    2c70:	02 2e       	mov	r0, r18
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <process_action+0x288>
    2c74:	ee 0c       	add	r14, r14
    2c76:	ff 1c       	adc	r15, r15
    2c78:	00 1f       	adc	r16, r16
    2c7a:	11 1f       	adc	r17, r17
    2c7c:	0a 94       	dec	r0
    2c7e:	d2 f7       	brpl	.-12     	; 0x2c74 <process_action+0x280>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2c80:	c4 fc       	sbrc	r12, 4
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <process_action+0x29a>
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	70 e0       	ldi	r23, 0x00	; 0
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <process_action+0x2b8>
    2c8e:	6f e0       	ldi	r22, 0x0F	; 15
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	04 c0       	rjmp	.+8      	; 0x2ca0 <process_action+0x2ac>
    2c98:	66 0f       	add	r22, r22
    2c9a:	77 1f       	adc	r23, r23
    2c9c:	88 1f       	adc	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	2a 95       	dec	r18
    2ca2:	d2 f7       	brpl	.-12     	; 0x2c98 <process_action+0x2a4>
    2ca4:	60 95       	com	r22
    2ca6:	70 95       	com	r23
    2ca8:	80 95       	com	r24
    2caa:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2cac:	d6 94       	lsr	r13
    2cae:	d6 94       	lsr	r13
    2cb0:	23 e0       	ldi	r18, 0x03	; 3
    2cb2:	d2 22       	and	r13, r18
    2cb4:	4d 2d       	mov	r20, r13
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	41 30       	cpi	r20, 0x01	; 1
    2cba:	51 05       	cpc	r21, r1
    2cbc:	a9 f0       	breq	.+42     	; 0x2ce8 <process_action+0x2f4>
    2cbe:	42 30       	cpi	r20, 0x02	; 2
    2cc0:	51 05       	cpc	r21, r1
    2cc2:	1c f4       	brge	.+6      	; 0x2cca <process_action+0x2d6>
    2cc4:	45 2b       	or	r20, r21
    2cc6:	49 f0       	breq	.+18     	; 0x2cda <process_action+0x2e6>
    2cc8:	be c0       	rjmp	.+380    	; 0x2e46 <process_action+0x452>
    2cca:	42 30       	cpi	r20, 0x02	; 2
    2ccc:	51 05       	cpc	r21, r1
    2cce:	89 f0       	breq	.+34     	; 0x2cf2 <process_action+0x2fe>
    2cd0:	43 30       	cpi	r20, 0x03	; 3
    2cd2:	51 05       	cpc	r21, r1
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <process_action+0x2e4>
    2cd6:	b7 c0       	rjmp	.+366    	; 0x2e46 <process_action+0x452>
    2cd8:	13 c0       	rjmp	.+38     	; 0x2d00 <process_action+0x30c>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2cda:	6e 29       	or	r22, r14
    2cdc:	7f 29       	or	r23, r15
    2cde:	80 2b       	or	r24, r16
    2ce0:	91 2b       	or	r25, r17
    2ce2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <layer_and>
    2ce6:	af c0       	rjmp	.+350    	; 0x2e46 <process_action+0x452>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    2ce8:	6e 29       	or	r22, r14
    2cea:	7f 29       	or	r23, r15
    2cec:	80 2b       	or	r24, r16
    2cee:	91 2b       	or	r25, r17
    2cf0:	0b c0       	rjmp	.+22     	; 0x2d08 <process_action+0x314>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2cf2:	6e 29       	or	r22, r14
    2cf4:	7f 29       	or	r23, r15
    2cf6:	80 2b       	or	r24, r16
    2cf8:	91 2b       	or	r25, r17
    2cfa:	0e 94 42 1c 	call	0x3884	; 0x3884 <layer_xor>
    2cfe:	a3 c0       	rjmp	.+326    	; 0x2e46 <process_action+0x452>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d00:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <layer_and>
    2d04:	c8 01       	movw	r24, r16
    2d06:	b7 01       	movw	r22, r14
    2d08:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <layer_or>
    2d0c:	9c c0       	rjmp	.+312    	; 0x2e46 <process_action+0x452>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d0e:	80 ef       	ldi	r24, 0xF0	; 240
    2d10:	c8 16       	cp	r12, r24
    2d12:	f1 f0       	breq	.+60     	; 0x2d50 <process_action+0x35c>
    2d14:	8c 15       	cp	r24, r12
    2d16:	20 f0       	brcs	.+8      	; 0x2d20 <process_action+0x32c>
    2d18:	e0 ee       	ldi	r30, 0xE0	; 224
    2d1a:	ce 16       	cp	r12, r30
    2d1c:	e8 f1       	brcs	.+122    	; 0x2d98 <process_action+0x3a4>
    2d1e:	09 c0       	rjmp	.+18     	; 0x2d32 <process_action+0x33e>
    2d20:	f2 ef       	ldi	r31, 0xF2	; 242
    2d22:	cf 16       	cp	r12, r31
    2d24:	51 f1       	breq	.+84     	; 0x2d7a <process_action+0x386>
    2d26:	cf 16       	cp	r12, r31
    2d28:	18 f1       	brcs	.+70     	; 0x2d70 <process_action+0x37c>
    2d2a:	23 ef       	ldi	r18, 0xF3	; 243
    2d2c:	c2 16       	cp	r12, r18
    2d2e:	a1 f5       	brne	.+104    	; 0x2d98 <process_action+0x3a4>
    2d30:	29 c0       	rjmp	.+82     	; 0x2d84 <process_action+0x390>
    2d32:	1c 2d       	mov	r17, r12
    2d34:	1f 70       	andi	r17, 0x0F	; 15
    2d36:	8d 2d       	mov	r24, r13
    2d38:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2d3a:	00 23       	and	r16, r16
    2d3c:	19 f0       	breq	.+6      	; 0x2d44 <process_action+0x350>
                        layer_on(action.layer_tap.val);
    2d3e:	0e 94 b1 1c 	call	0x3962	; 0x3962 <layer_on>
    2d42:	ed ce       	rjmp	.-550    	; 0x2b1e <process_action+0x12a>
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
    2d44:	0e 94 91 1c 	call	0x3922	; 0x3922 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d48:	81 2f       	mov	r24, r17
    2d4a:	0e 94 c2 13 	call	0x2784	; 0x2784 <unregister_mods>
    2d4e:	7b c0       	rjmp	.+246    	; 0x2e46 <process_action+0x452>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2d50:	00 23       	and	r16, r16
    2d52:	29 f0       	breq	.+10     	; 0x2d5e <process_action+0x36a>
                        if (tap_count < TAPPING_TOGGLE) {
    2d54:	84 e0       	ldi	r24, 0x04	; 4
    2d56:	8f 15       	cp	r24, r15
    2d58:	08 f4       	brcc	.+2      	; 0x2d5c <process_action+0x368>
    2d5a:	75 c0       	rjmp	.+234    	; 0x2e46 <process_action+0x452>
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <process_action+0x372>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2d5e:	e5 e0       	ldi	r30, 0x05	; 5
    2d60:	ef 15       	cp	r30, r15
    2d62:	08 f4       	brcc	.+2      	; 0x2d66 <process_action+0x372>
    2d64:	70 c0       	rjmp	.+224    	; 0x2e46 <process_action+0x452>
                            layer_invert(action.layer_tap.val);
    2d66:	8d 2d       	mov	r24, r13
    2d68:	8f 71       	andi	r24, 0x1F	; 31
    2d6a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <layer_invert>
    2d6e:	6b c0       	rjmp	.+214    	; 0x2e46 <process_action+0x452>
    2d70:	8d 2d       	mov	r24, r13
    2d72:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2d74:	00 23       	and	r16, r16
    2d76:	29 f1       	breq	.+74     	; 0x2dc2 <process_action+0x3ce>
    2d78:	19 c0       	rjmp	.+50     	; 0x2dac <process_action+0x3b8>
    2d7a:	8d 2d       	mov	r24, r13
    2d7c:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2d7e:	00 23       	and	r16, r16
    2d80:	a9 f0       	breq	.+42     	; 0x2dac <process_action+0x3b8>
    2d82:	1f c0       	rjmp	.+62     	; 0x2dc2 <process_action+0x3ce>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2d84:	00 23       	and	r16, r16
    2d86:	29 f0       	breq	.+10     	; 0x2d92 <process_action+0x39e>
    2d88:	8d 2d       	mov	r24, r13
    2d8a:	8f 71       	andi	r24, 0x1F	; 31
    2d8c:	0e 94 cd 1c 	call	0x399a	; 0x399a <layer_move>
    2d90:	5a c0       	rjmp	.+180    	; 0x2e46 <process_action+0x452>
    2d92:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <layer_clear>
    2d96:	57 c0       	rjmp	.+174    	; 0x2e46 <process_action+0x452>
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2d98:	00 23       	and	r16, r16
    2d9a:	59 f0       	breq	.+22     	; 0x2db2 <process_action+0x3be>
                        if (tap_count > 0) {
    2d9c:	ff 20       	and	r15, r15
    2d9e:	21 f0       	breq	.+8      	; 0x2da8 <process_action+0x3b4>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2da0:	8c 2d       	mov	r24, r12
    2da2:	0e 94 23 14 	call	0x2846	; 0x2846 <register_code>
    2da6:	4f c0       	rjmp	.+158    	; 0x2e46 <process_action+0x452>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    2da8:	8d 2d       	mov	r24, r13
    2daa:	8f 71       	andi	r24, 0x1F	; 31
    2dac:	0e 94 b1 1c 	call	0x3962	; 0x3962 <layer_on>
    2db0:	4a c0       	rjmp	.+148    	; 0x2e46 <process_action+0x452>
                        }
                    } else {
                        if (tap_count > 0) {
    2db2:	ff 20       	and	r15, r15
    2db4:	21 f0       	breq	.+8      	; 0x2dbe <process_action+0x3ca>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2db6:	8c 2d       	mov	r24, r12
    2db8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <unregister_code>
    2dbc:	44 c0       	rjmp	.+136    	; 0x2e46 <process_action+0x452>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    2dbe:	8d 2d       	mov	r24, r13
    2dc0:	8f 71       	andi	r24, 0x1F	; 31
    2dc2:	0e 94 91 1c 	call	0x3922	; 0x3922 <layer_off>
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <process_action+0x452>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2dc8:	ff e0       	ldi	r31, 0x0F	; 15
    2dca:	df 22       	and	r13, r31
    2dcc:	c5 01       	movw	r24, r10
    2dce:	6c 2d       	mov	r22, r12
    2dd0:	4d 2d       	mov	r20, r13
    2dd2:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <action_get_macro>
    2dd6:	0e 94 56 1b 	call	0x36ac	; 0x36ac <action_macro_play>
    2dda:	35 c0       	rjmp	.+106    	; 0x2e46 <process_action+0x452>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2ddc:	2f e0       	ldi	r18, 0x0F	; 15
    2dde:	d2 22       	and	r13, r18
    2de0:	c5 01       	movw	r24, r10
    2de2:	6c 2d       	mov	r22, r12
    2de4:	4d 2d       	mov	r20, r13
    2de6:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <action_function>
    2dea:	2d c0       	rjmp	.+90     	; 0x2e46 <process_action+0x452>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	9a 81       	ldd	r25, Y+2	; 0x02
    2df0:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <layer_switch_get_action>
    2df4:	6c 01       	movw	r12, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2df6:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2dfa:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2dfe:	8d 2d       	mov	r24, r13
    2e00:	82 95       	swap	r24
    2e02:	8f 70       	andi	r24, 0x0F	; 15
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	85 30       	cpi	r24, 0x05	; 5
    2e08:	91 05       	cpc	r25, r1
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <process_action+0x41a>
    2e0c:	af ce       	rjmp	.-674    	; 0x2b6c <process_action+0x178>
    2e0e:	86 30       	cpi	r24, 0x06	; 6
    2e10:	91 05       	cpc	r25, r1
    2e12:	54 f4       	brge	.+20     	; 0x2e28 <process_action+0x434>
    2e14:	84 30       	cpi	r24, 0x04	; 4
    2e16:	91 05       	cpc	r25, r1
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <process_action+0x428>
    2e1a:	89 ce       	rjmp	.-750    	; 0x2b2e <process_action+0x13a>
    2e1c:	2d 2d       	mov	r18, r13
    2e1e:	20 7f       	andi	r18, 0xF0	; 240
    2e20:	02 97       	sbiw	r24, 0x02	; 2
    2e22:	0c f0       	brlt	.+2      	; 0x2e26 <process_action+0x432>
    2e24:	3f ce       	rjmp	.-898    	; 0x2aa4 <process_action+0xb0>
    2e26:	1e ce       	rjmp	.-964    	; 0x2a64 <process_action+0x70>
    2e28:	8c 30       	cpi	r24, 0x0C	; 12
    2e2a:	91 05       	cpc	r25, r1
    2e2c:	3c f4       	brge	.+14     	; 0x2e3c <process_action+0x448>
    2e2e:	8a 30       	cpi	r24, 0x0A	; 10
    2e30:	91 05       	cpc	r25, r1
    2e32:	0c f0       	brlt	.+2      	; 0x2e36 <process_action+0x442>
    2e34:	6c cf       	rjmp	.-296    	; 0x2d0e <process_action+0x31a>
    2e36:	08 97       	sbiw	r24, 0x08	; 8
    2e38:	31 f4       	brne	.+12     	; 0x2e46 <process_action+0x452>
    2e3a:	a4 ce       	rjmp	.-696    	; 0x2b84 <process_action+0x190>
    2e3c:	8c 30       	cpi	r24, 0x0C	; 12
    2e3e:	91 05       	cpc	r25, r1
    2e40:	19 f2       	breq	.-122    	; 0x2dc8 <process_action+0x3d4>
    2e42:	0f 97       	sbiw	r24, 0x0f	; 15
    2e44:	59 f2       	breq	.-106    	; 0x2ddc <process_action+0x3e8>
            break;
#endif
        default:
            break;
    }
}
    2e46:	2a 96       	adiw	r28, 0x0a	; 10
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	df 90       	pop	r13
    2e60:	cf 90       	pop	r12
    2e62:	bf 90       	pop	r11
    2e64:	af 90       	pop	r10
    2e66:	08 95       	ret

00002e68 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	2b 97       	sbiw	r28, 0x0b	; 11
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	4f 83       	std	Y+7, r20	; 0x07
    2e88:	58 87       	std	Y+8, r21	; 0x08
    2e8a:	69 87       	std	Y+9, r22	; 0x09
    2e8c:	7a 87       	std	Y+10, r23	; 0x0a
    2e8e:	8b 87       	std	Y+11, r24	; 0x0b
    2e90:	d6 2e       	mov	r13, r22
    2e92:	e4 2e       	mov	r14, r20
    2e94:	f5 2e       	mov	r15, r21
    2e96:	0a 85       	ldd	r16, Y+10	; 0x0a
    2e98:	1b 85       	ldd	r17, Y+11	; 0x0b
    2e9a:	01 15       	cp	r16, r1
    2e9c:	11 05       	cpc	r17, r1
    2e9e:	b9 f0       	breq	.+46     	; 0x2ece <action_exec+0x66>
    2ea0:	2f ef       	ldi	r18, 0xFF	; 255
    2ea2:	52 17       	cp	r21, r18
    2ea4:	49 f4       	brne	.+18     	; 0x2eb8 <action_exec+0x50>
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	af ef       	ldi	r26, 0xFF	; 255
    2eac:	4a 17       	cp	r20, r26
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <action_exec+0x4c>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    if (!IS_NOEVENT(event)) {
    2eb4:	88 23       	and	r24, r24
    2eb6:	59 f4       	brne	.+22     	; 0x2ece <action_exec+0x66>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2eb8:	d9 86       	std	Y+9, r13	; 0x09
    2eba:	ef 82       	std	Y+7, r14	; 0x07
    2ebc:	f8 86       	std	Y+8, r15	; 0x08
    2ebe:	70 2f       	mov	r23, r16
    2ec0:	1b 87       	std	Y+11, r17	; 0x0b
    2ec2:	0a 87       	std	Y+10, r16	; 0x0a
    2ec4:	a7 01       	movw	r20, r14
    2ec6:	6d 2d       	mov	r22, r13
    2ec8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eca:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2ece:	fe 01       	movw	r30, r28
    2ed0:	31 96       	adiw	r30, 0x01	; 1
    2ed2:	86 e0       	ldi	r24, 0x06	; 6
    2ed4:	df 01       	movw	r26, r30
    2ed6:	1d 92       	st	X+, r1
    2ed8:	8a 95       	dec	r24
    2eda:	e9 f7       	brne	.-6      	; 0x2ed6 <action_exec+0x6e>
    2edc:	db 82       	std	Y+3, r13	; 0x03
    2ede:	e9 82       	std	Y+1, r14	; 0x01
    2ee0:	fa 82       	std	Y+2, r15	; 0x02
    2ee2:	70 2f       	mov	r23, r16
    2ee4:	1d 83       	std	Y+5, r17	; 0x05
    2ee6:	0c 83       	std	Y+4, r16	; 0x04

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2ee8:	a7 01       	movw	r20, r14
    2eea:	6d 2d       	mov	r22, r13
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	0e 94 97 1a 	call	0x352e	; 0x352e <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2ef4:	2b 96       	adiw	r28, 0x0b	; 11
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	df 90       	pop	r13
    2f0e:	08 95       	ret

00002f10 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f14:	00 91 53 01 	lds	r16, 0x0153
    2f18:	15 c0       	rjmp	.+42     	; 0x2f44 <debug_waiting_buffer+0x34>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f1a:	10 e0       	ldi	r17, 0x00	; 0
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	ee 0f       	add	r30, r30
    2f20:	ff 1f       	adc	r31, r31
    2f22:	e0 0f       	add	r30, r16
    2f24:	f1 1f       	adc	r31, r17
    2f26:	ee 0f       	add	r30, r30
    2f28:	ff 1f       	adc	r31, r31
    2f2a:	ec 5a       	subi	r30, 0xAC	; 172
    2f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2e:	40 81       	ld	r20, Z
    2f30:	51 81       	ldd	r21, Z+1	; 0x01
    2f32:	62 81       	ldd	r22, Z+2	; 0x02
    2f34:	73 81       	ldd	r23, Z+3	; 0x03
    2f36:	84 81       	ldd	r24, Z+4	; 0x04
    2f38:	95 81       	ldd	r25, Z+5	; 0x05
    2f3a:	0e 94 6d 13 	call	0x26da	; 0x26da <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f3e:	0f 5f       	subi	r16, 0xFF	; 255
    2f40:	1f 4f       	sbci	r17, 0xFF	; 255
    2f42:	07 70       	andi	r16, 0x07	; 7
    2f44:	80 91 52 01 	lds	r24, 0x0152
    2f48:	08 17       	cp	r16, r24
    2f4a:	39 f7       	brne	.-50     	; 0x2f1a <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2f4c:	1f 91       	pop	r17
    2f4e:	0f 91       	pop	r16
    2f50:	08 95       	ret

00002f52 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2f52:	40 91 4c 01 	lds	r20, 0x014C
    2f56:	50 91 4d 01 	lds	r21, 0x014D
    2f5a:	60 91 4e 01 	lds	r22, 0x014E
    2f5e:	70 91 4f 01 	lds	r23, 0x014F
    2f62:	80 91 50 01 	lds	r24, 0x0150
    2f66:	90 91 51 01 	lds	r25, 0x0151
    2f6a:	0e 94 6d 13 	call	0x26da	; 0x26da <debug_record>
}
    2f6e:	08 95       	ret

00002f70 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2f78:	80 91 51 01 	lds	r24, 0x0151
    2f7c:	82 95       	swap	r24
    2f7e:	8f 70       	andi	r24, 0x0F	; 15
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <waiting_buffer_scan_tap+0x14>
    2f82:	6d c0       	rjmp	.+218    	; 0x305e <waiting_buffer_scan_tap+0xee>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2f84:	80 91 4e 01 	lds	r24, 0x014E
    2f88:	88 23       	and	r24, r24
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <waiting_buffer_scan_tap+0x1e>
    2f8c:	68 c0       	rjmp	.+208    	; 0x305e <waiting_buffer_scan_tap+0xee>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f8e:	60 91 53 01 	lds	r22, 0x0153
    2f92:	00 91 52 01 	lds	r16, 0x0152
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f96:	40 91 4f 01 	lds	r20, 0x014F
    2f9a:	50 91 50 01 	lds	r21, 0x0150
    2f9e:	10 91 4d 01 	lds	r17, 0x014D
    2fa2:	70 91 4c 01 	lds	r23, 0x014C
    2fa6:	ea 01       	movw	r28, r20
    2fa8:	c0 95       	com	r28
    2faa:	d0 95       	com	r29
    2fac:	55 c0       	rjmp	.+170    	; 0x3058 <waiting_buffer_scan_tap+0xe8>
    2fae:	41 15       	cp	r20, r1
    2fb0:	51 05       	cpc	r21, r1
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <waiting_buffer_scan_tap+0x46>
    2fb4:	4f c0       	rjmp	.+158    	; 0x3054 <waiting_buffer_scan_tap+0xe4>
    2fb6:	1f 3f       	cpi	r17, 0xFF	; 255
    2fb8:	49 f4       	brne	.+18     	; 0x2fcc <waiting_buffer_scan_tap+0x5c>
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	7f 3f       	cpi	r23, 0xFF	; 255
    2fc0:	11 f4       	brne	.+4      	; 0x2fc6 <waiting_buffer_scan_tap+0x56>
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	88 23       	and	r24, r24
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <waiting_buffer_scan_tap+0x5c>
    2fca:	44 c0       	rjmp	.+136    	; 0x3054 <waiting_buffer_scan_tap+0xe4>
    2fcc:	26 2f       	mov	r18, r22
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	f9 01       	movw	r30, r18
    2fd2:	ee 0f       	add	r30, r30
    2fd4:	ff 1f       	adc	r31, r31
    2fd6:	e2 0f       	add	r30, r18
    2fd8:	f3 1f       	adc	r31, r19
    2fda:	df 01       	movw	r26, r30
    2fdc:	aa 0f       	add	r26, r26
    2fde:	bb 1f       	adc	r27, r27
    2fe0:	ac 5a       	subi	r26, 0xAC	; 172
    2fe2:	be 4f       	sbci	r27, 0xFE	; 254
    2fe4:	11 96       	adiw	r26, 0x01	; 1
    2fe6:	8c 91       	ld	r24, X
    2fe8:	11 97       	sbiw	r26, 0x01	; 1
    2fea:	18 17       	cp	r17, r24
    2fec:	99 f5       	brne	.+102    	; 0x3054 <waiting_buffer_scan_tap+0xe4>
    2fee:	8c 91       	ld	r24, X
    2ff0:	78 17       	cp	r23, r24
    2ff2:	81 f5       	brne	.+96     	; 0x3054 <waiting_buffer_scan_tap+0xe4>
    2ff4:	ee 0f       	add	r30, r30
    2ff6:	ff 1f       	adc	r31, r31
    2ff8:	ea 5a       	subi	r30, 0xAA	; 170
    2ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffc:	80 81       	ld	r24, Z
    2ffe:	88 23       	and	r24, r24
    3000:	49 f5       	brne	.+82     	; 0x3054 <waiting_buffer_scan_tap+0xe4>
    3002:	13 96       	adiw	r26, 0x03	; 3
    3004:	8d 91       	ld	r24, X+
    3006:	9c 91       	ld	r25, X
    3008:	14 97       	sbiw	r26, 0x04	; 4
    300a:	84 17       	cp	r24, r20
    300c:	95 07       	cpc	r25, r21
    300e:	18 f0       	brcs	.+6      	; 0x3016 <waiting_buffer_scan_tap+0xa6>
    3010:	84 1b       	sub	r24, r20
    3012:	95 0b       	sbc	r25, r21
    3014:	02 c0       	rjmp	.+4      	; 0x301a <waiting_buffer_scan_tap+0xaa>
    3016:	8c 0f       	add	r24, r28
    3018:	9d 1f       	adc	r25, r29
    301a:	88 3c       	cpi	r24, 0xC8	; 200
    301c:	91 05       	cpc	r25, r1
    301e:	d0 f4       	brcc	.+52     	; 0x3054 <waiting_buffer_scan_tap+0xe4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
    3020:	80 91 51 01 	lds	r24, 0x0151
    3024:	8f 70       	andi	r24, 0x0F	; 15
    3026:	80 61       	ori	r24, 0x10	; 16
    3028:	80 93 51 01 	sts	0x0151, r24
            waiting_buffer[i].tap.count = 1;
    302c:	f9 01       	movw	r30, r18
    302e:	ee 0f       	add	r30, r30
    3030:	ff 1f       	adc	r31, r31
    3032:	e2 0f       	add	r30, r18
    3034:	f3 1f       	adc	r31, r19
    3036:	ee 0f       	add	r30, r30
    3038:	ff 1f       	adc	r31, r31
    303a:	e7 5a       	subi	r30, 0xA7	; 167
    303c:	fe 4f       	sbci	r31, 0xFE	; 254
    303e:	80 81       	ld	r24, Z
    3040:	8f 70       	andi	r24, 0x0F	; 15
    3042:	80 61       	ori	r24, 0x10	; 16
    3044:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3046:	8c e4       	ldi	r24, 0x4C	; 76
    3048:	91 e0       	ldi	r25, 0x01	; 1
    304a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    304e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <debug_waiting_buffer>
    3052:	05 c0       	rjmp	.+10     	; 0x305e <waiting_buffer_scan_tap+0xee>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3054:	6f 5f       	subi	r22, 0xFF	; 255
    3056:	67 70       	andi	r22, 0x07	; 7
    3058:	60 17       	cp	r22, r16
    305a:	09 f0       	breq	.+2      	; 0x305e <waiting_buffer_scan_tap+0xee>
    305c:	a8 cf       	rjmp	.-176    	; 0x2fae <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	08 95       	ret

00003068 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3068:	df 92       	push	r13
    306a:	ef 92       	push	r14
    306c:	ff 92       	push	r15
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	6b 97       	sbiw	r28, 0x1b	; 27
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3088:	dc 01       	movw	r26, r24
    308a:	12 96       	adiw	r26, 0x02	; 2
    308c:	dc 90       	ld	r13, X
    308e:	12 97       	sbiw	r26, 0x02	; 2
    3090:	4c 91       	ld	r20, X
    3092:	11 96       	adiw	r26, 0x01	; 1
    3094:	5c 91       	ld	r21, X
    3096:	11 97       	sbiw	r26, 0x01	; 1
    3098:	13 96       	adiw	r26, 0x03	; 3
    309a:	ed 90       	ld	r14, X+
    309c:	fc 90       	ld	r15, X
    309e:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    30a0:	20 91 4f 01 	lds	r18, 0x014F
    30a4:	30 91 50 01 	lds	r19, 0x0150
    30a8:	60 91 4d 01 	lds	r22, 0x014D
    30ac:	70 91 4c 01 	lds	r23, 0x014C
    30b0:	21 15       	cp	r18, r1
    30b2:	31 05       	cpc	r19, r1
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <process_tapping+0x50>
    30b6:	db c1       	rjmp	.+950    	; 0x346e <process_tapping+0x406>
    30b8:	6f 3f       	cpi	r22, 0xFF	; 255
    30ba:	09 f0       	breq	.+2      	; 0x30be <process_tapping+0x56>
    30bc:	03 c2       	rjmp	.+1030   	; 0x34c4 <process_tapping+0x45c>
    30be:	7f 3f       	cpi	r23, 0xFF	; 255
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <process_tapping+0x5c>
    30c2:	00 c2       	rjmp	.+1024   	; 0x34c4 <process_tapping+0x45c>
    30c4:	d4 c1       	rjmp	.+936    	; 0x346e <process_tapping+0x406>
        if (WITHIN_TAPPING_TERM(event)) {
    30c6:	e2 16       	cp	r14, r18
    30c8:	f3 06       	cpc	r15, r19
    30ca:	40 f0       	brcs	.+16     	; 0x30dc <process_tapping+0x74>
    30cc:	c7 01       	movw	r24, r14
    30ce:	82 1b       	sub	r24, r18
    30d0:	93 0b       	sbc	r25, r19
    30d2:	88 3c       	cpi	r24, 0xC8	; 200
    30d4:	91 05       	cpc	r25, r1
    30d6:	08 f0       	brcs	.+2      	; 0x30da <process_tapping+0x72>
    30d8:	ee c0       	rjmp	.+476    	; 0x32b6 <process_tapping+0x24e>
    30da:	08 c0       	rjmp	.+16     	; 0x30ec <process_tapping+0x84>
    30dc:	20 95       	com	r18
    30de:	30 95       	com	r19
    30e0:	2e 0d       	add	r18, r14
    30e2:	3f 1d       	adc	r19, r15
    30e4:	28 3c       	cpi	r18, 0xC8	; 200
    30e6:	31 05       	cpc	r19, r1
    30e8:	08 f0       	brcs	.+2      	; 0x30ec <process_tapping+0x84>
    30ea:	e5 c0       	rjmp	.+458    	; 0x32b6 <process_tapping+0x24e>
            if (tapping_key.tap.count == 0) {
    30ec:	80 91 51 01 	lds	r24, 0x0151
    30f0:	80 7f       	andi	r24, 0xF0	; 240
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <process_tapping+0x8e>
    30f4:	95 c0       	rjmp	.+298    	; 0x3220 <process_tapping+0x1b8>
    30f6:	6f 3f       	cpi	r22, 0xFF	; 255
    30f8:	09 f0       	breq	.+2      	; 0x30fc <process_tapping+0x94>
    30fa:	ea c1       	rjmp	.+980    	; 0x34d0 <process_tapping+0x468>
    30fc:	7f 3f       	cpi	r23, 0xFF	; 255
    30fe:	09 f0       	breq	.+2      	; 0x3102 <process_tapping+0x9a>
    3100:	e7 c1       	rjmp	.+974    	; 0x34d0 <process_tapping+0x468>
    3102:	15 c0       	rjmp	.+42     	; 0x312e <process_tapping+0xc6>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3104:	74 17       	cp	r23, r20
    3106:	99 f4       	brne	.+38     	; 0x312e <process_tapping+0xc6>
    3108:	dd 20       	and	r13, r13
    310a:	89 f4       	brne	.+34     	; 0x312e <process_tapping+0xc6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    310c:	80 91 51 01 	lds	r24, 0x0151
    3110:	8f 70       	andi	r24, 0x0F	; 15
    3112:	80 61       	ori	r24, 0x10	; 16
    3114:	80 93 51 01 	sts	0x0151, r24
                    debug_tapping_key();
    3118:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <debug_tapping_key>
                    process_action(&tapping_key);
    311c:	8c e4       	ldi	r24, 0x4C	; 76
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    3124:	80 91 51 01 	lds	r24, 0x0151
    3128:	f8 01       	movw	r30, r16
    312a:	85 83       	std	Z+5, r24	; 0x05
    312c:	bc c1       	rjmp	.+888    	; 0x34a6 <process_tapping+0x43e>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    312e:	fd 82       	std	Y+5, r15	; 0x05
    3130:	ec 82       	std	Y+4, r14	; 0x04
    3132:	5a 83       	std	Y+2, r21	; 0x02
    3134:	49 83       	std	Y+1, r20	; 0x01
    3136:	db 82       	std	Y+3, r13	; 0x03
    3138:	de 01       	movw	r26, r28
    313a:	16 96       	adiw	r26, 0x06	; 6
    313c:	fe 01       	movw	r30, r28
    313e:	31 96       	adiw	r30, 0x01	; 1
    3140:	85 e0       	ldi	r24, 0x05	; 5
    3142:	01 90       	ld	r0, Z+
    3144:	0d 92       	st	X+, r0
    3146:	81 50       	subi	r24, 0x01	; 1
    3148:	e1 f7       	brne	.-8      	; 0x3142 <process_tapping+0xda>
    314a:	68 85       	ldd	r22, Y+8	; 0x08
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    314c:	de 01       	movw	r26, r28
    314e:	1b 96       	adiw	r26, 0x0b	; 11
    3150:	fe 01       	movw	r30, r28
    3152:	36 96       	adiw	r30, 0x06	; 6
    3154:	85 e0       	ldi	r24, 0x05	; 5
    3156:	01 90       	ld	r0, Z+
    3158:	0d 92       	st	X+, r0
    315a:	81 50       	subi	r24, 0x01	; 1
    315c:	e1 f7       	brne	.-8      	; 0x3156 <process_tapping+0xee>
    315e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3160:	3b 85       	ldd	r19, Y+11	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3162:	8e 85       	ldd	r24, Y+14	; 0x0e
    3164:	9f 85       	ldd	r25, Y+15	; 0x0f
    3166:	89 2b       	or	r24, r25
    3168:	09 f4       	brne	.+2      	; 0x316c <process_tapping+0x104>
    316a:	51 c0       	rjmp	.+162    	; 0x320e <process_tapping+0x1a6>
    316c:	2f 3f       	cpi	r18, 0xFF	; 255
    316e:	09 f0       	breq	.+2      	; 0x3172 <process_tapping+0x10a>
    3170:	b3 c1       	rjmp	.+870    	; 0x34d8 <process_tapping+0x470>
    3172:	3f 3f       	cpi	r19, 0xFF	; 255
    3174:	09 f0       	breq	.+2      	; 0x3178 <process_tapping+0x110>
    3176:	b0 c1       	rjmp	.+864    	; 0x34d8 <process_tapping+0x470>
    3178:	4a c0       	rjmp	.+148    	; 0x320e <process_tapping+0x1a6>
    317a:	fd 82       	std	Y+5, r15	; 0x05
    317c:	ec 82       	std	Y+4, r14	; 0x04
    317e:	5a 83       	std	Y+2, r21	; 0x02
    3180:	49 83       	std	Y+1, r20	; 0x01
    3182:	db 82       	std	Y+3, r13	; 0x03
    3184:	de 01       	movw	r26, r28
    3186:	1b 96       	adiw	r26, 0x0b	; 11
    3188:	fe 01       	movw	r30, r28
    318a:	31 96       	adiw	r30, 0x01	; 1
    318c:	85 e0       	ldi	r24, 0x05	; 5
    318e:	01 90       	ld	r0, Z+
    3190:	0d 92       	st	X+, r0
    3192:	81 50       	subi	r24, 0x01	; 1
    3194:	e1 f7       	brne	.-8      	; 0x318e <process_tapping+0x126>
    3196:	fc 84       	ldd	r15, Y+12	; 0x0c
    3198:	7b 85       	ldd	r23, Y+11	; 0x0b
    319a:	6d 85       	ldd	r22, Y+13	; 0x0d
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    319c:	80 91 53 01 	lds	r24, 0x0153
    31a0:	90 91 52 01 	lds	r25, 0x0152
    31a4:	1f c0       	rjmp	.+62     	; 0x31e4 <process_tapping+0x17c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    31a6:	28 2f       	mov	r18, r24
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	f9 01       	movw	r30, r18
    31ac:	ee 0f       	add	r30, r30
    31ae:	ff 1f       	adc	r31, r31
    31b0:	e2 0f       	add	r30, r18
    31b2:	f3 1f       	adc	r31, r19
    31b4:	df 01       	movw	r26, r30
    31b6:	aa 0f       	add	r26, r26
    31b8:	bb 1f       	adc	r27, r27
    31ba:	ac 5a       	subi	r26, 0xAC	; 172
    31bc:	be 4f       	sbci	r27, 0xFE	; 254
    31be:	11 96       	adiw	r26, 0x01	; 1
    31c0:	8c 91       	ld	r24, X
    31c2:	11 97       	sbiw	r26, 0x01	; 1
    31c4:	f8 16       	cp	r15, r24
    31c6:	51 f4       	brne	.+20     	; 0x31dc <process_tapping+0x174>
    31c8:	8c 91       	ld	r24, X
    31ca:	78 17       	cp	r23, r24
    31cc:	39 f4       	brne	.+14     	; 0x31dc <process_tapping+0x174>
    31ce:	ee 0f       	add	r30, r30
    31d0:	ff 1f       	adc	r31, r31
    31d2:	ea 5a       	subi	r30, 0xAA	; 170
    31d4:	fe 4f       	sbci	r31, 0xFE	; 254
    31d6:	80 81       	ld	r24, Z
    31d8:	68 17       	cp	r22, r24
    31da:	c9 f4       	brne	.+50     	; 0x320e <process_tapping+0x1a6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31dc:	2f 5f       	subi	r18, 0xFF	; 255
    31de:	3f 4f       	sbci	r19, 0xFF	; 255
    31e0:	82 2f       	mov	r24, r18
    31e2:	87 70       	andi	r24, 0x07	; 7
    31e4:	89 17       	cp	r24, r25
    31e6:	f9 f6       	brne	.-66     	; 0x31a6 <process_tapping+0x13e>
    31e8:	8d c1       	rjmp	.+794    	; 0x3504 <process_tapping+0x49c>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    31ea:	9f 70       	andi	r25, 0x0F	; 15
    31ec:	59 f0       	breq	.+22     	; 0x3204 <process_tapping+0x19c>
    31ee:	44 23       	and	r20, r20
    31f0:	49 f4       	brne	.+18     	; 0x3204 <process_tapping+0x19c>
    31f2:	59 c1       	rjmp	.+690    	; 0x34a6 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    31f4:	9f 70       	andi	r25, 0x0F	; 15
    31f6:	31 f0       	breq	.+12     	; 0x3204 <process_tapping+0x19c>
    31f8:	d8 01       	movw	r26, r16
    31fa:	15 96       	adiw	r26, 0x05	; 5
    31fc:	8c 91       	ld	r24, X
    31fe:	80 7f       	andi	r24, 0xF0	; 240
    3200:	09 f4       	brne	.+2      	; 0x3204 <process_tapping+0x19c>
    3202:	51 c1       	rjmp	.+674    	; 0x34a6 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
    3204:	40 5e       	subi	r20, 0xE0	; 224
    3206:	48 30       	cpi	r20, 0x08	; 8
    3208:	08 f4       	brcc	.+2      	; 0x320c <process_tapping+0x1a4>
    320a:	4d c1       	rjmp	.+666    	; 0x34a6 <process_tapping+0x43e>
    320c:	48 c1       	rjmp	.+656    	; 0x349e <process_tapping+0x436>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    320e:	dd 20       	and	r13, r13
    3210:	09 f4       	brne	.+2      	; 0x3214 <process_tapping+0x1ac>
    3212:	49 c1       	rjmp	.+658    	; 0x34a6 <process_tapping+0x43e>
                        tapping_key.tap.interrupted = true;
    3214:	80 91 51 01 	lds	r24, 0x0151
    3218:	81 60       	ori	r24, 0x01	; 1
    321a:	80 93 51 01 	sts	0x0151, r24
    321e:	43 c1       	rjmp	.+646    	; 0x34a6 <process_tapping+0x43e>
    3220:	6f 3f       	cpi	r22, 0xFF	; 255
    3222:	09 f0       	breq	.+2      	; 0x3226 <process_tapping+0x1be>
    3224:	5d c1       	rjmp	.+698    	; 0x34e0 <process_tapping+0x478>
    3226:	7f 3f       	cpi	r23, 0xFF	; 255
    3228:	09 f0       	breq	.+2      	; 0x322c <process_tapping+0x1c4>
    322a:	5a c1       	rjmp	.+692    	; 0x34e0 <process_tapping+0x478>
    322c:	14 c0       	rjmp	.+40     	; 0x3256 <process_tapping+0x1ee>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    322e:	74 17       	cp	r23, r20
    3230:	91 f4       	brne	.+36     	; 0x3256 <process_tapping+0x1ee>
    3232:	dd 20       	and	r13, r13
    3234:	81 f4       	brne	.+32     	; 0x3256 <process_tapping+0x1ee>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3236:	80 91 51 01 	lds	r24, 0x0151
    323a:	f8 01       	movw	r30, r16
    323c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    323e:	c8 01       	movw	r24, r16
    3240:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>
                    tapping_key = *keyp;
    3244:	ac e4       	ldi	r26, 0x4C	; 76
    3246:	b1 e0       	ldi	r27, 0x01	; 1
    3248:	f8 01       	movw	r30, r16
    324a:	86 e0       	ldi	r24, 0x06	; 6
    324c:	01 90       	ld	r0, Z+
    324e:	0d 92       	st	X+, r0
    3250:	81 50       	subi	r24, 0x01	; 1
    3252:	e1 f7       	brne	.-8      	; 0x324c <process_tapping+0x1e4>
    3254:	20 c1       	rjmp	.+576    	; 0x3496 <process_tapping+0x42e>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3256:	5a 83       	std	Y+2, r21	; 0x02
    3258:	49 83       	std	Y+1, r20	; 0x01
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <is_tap_key>
    3262:	88 23       	and	r24, r24
    3264:	09 f4       	brne	.+2      	; 0x3268 <process_tapping+0x200>
    3266:	1b c1       	rjmp	.+566    	; 0x349e <process_tapping+0x436>
    3268:	dd 20       	and	r13, r13
    326a:	09 f4       	brne	.+2      	; 0x326e <process_tapping+0x206>
    326c:	18 c1       	rjmp	.+560    	; 0x349e <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    326e:	30 91 51 01 	lds	r19, 0x0151
    3272:	83 2f       	mov	r24, r19
    3274:	82 95       	swap	r24
    3276:	8f 70       	andi	r24, 0x0F	; 15
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	02 97       	sbiw	r24, 0x02	; 2
    327c:	9c f0       	brlt	.+38     	; 0x32a4 <process_tapping+0x23c>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    327e:	90 91 4d 01 	lds	r25, 0x014D
    3282:	20 91 4c 01 	lds	r18, 0x014C
    3286:	fe 01       	movw	r30, r28
    3288:	70 96       	adiw	r30, 0x10	; 16
    328a:	86 e0       	ldi	r24, 0x06	; 6
    328c:	df 01       	movw	r26, r30
    328e:	1d 92       	st	X+, r1
    3290:	8a 95       	dec	r24
    3292:	e9 f7       	brne	.-6      	; 0x328e <process_tapping+0x226>
    3294:	99 8b       	std	Y+17, r25	; 0x11
    3296:	28 8b       	std	Y+16, r18	; 0x10
    3298:	fc 8a       	std	Y+20, r15	; 0x14
    329a:	eb 8a       	std	Y+19, r14	; 0x13
    329c:	3d 8b       	std	Y+21, r19	; 0x15
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    329e:	cf 01       	movw	r24, r30
    32a0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    32a4:	ac e4       	ldi	r26, 0x4C	; 76
    32a6:	b1 e0       	ldi	r27, 0x01	; 1
    32a8:	f8 01       	movw	r30, r16
    32aa:	86 e0       	ldi	r24, 0x06	; 6
    32ac:	01 90       	ld	r0, Z+
    32ae:	0d 92       	st	X+, r0
    32b0:	81 50       	subi	r24, 0x01	; 1
    32b2:	e1 f7       	brne	.-8      	; 0x32ac <process_tapping+0x244>
    32b4:	ee c0       	rjmp	.+476    	; 0x3492 <process_tapping+0x42a>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    32b6:	80 91 51 01 	lds	r24, 0x0151
    32ba:	80 7f       	andi	r24, 0xF0	; 240
    32bc:	a9 f4       	brne	.+42     	; 0x32e8 <process_tapping+0x280>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    32be:	7e 2d       	mov	r23, r14
    32c0:	fd 82       	std	Y+5, r15	; 0x05
    32c2:	ec 82       	std	Y+4, r14	; 0x04
    32c4:	5a 83       	std	Y+2, r21	; 0x02
    32c6:	49 83       	std	Y+1, r20	; 0x01
    32c8:	db 82       	std	Y+3, r13	; 0x03
    32ca:	6d 2d       	mov	r22, r13
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	0e 94 5e 13 	call	0x26bc	; 0x26bc <debug_event>
                process_action(&tapping_key);
    32d2:	0c e4       	ldi	r16, 0x4C	; 76
    32d4:	11 e0       	ldi	r17, 0x01	; 1
    32d6:	c8 01       	movw	r24, r16
    32d8:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>
                tapping_key = (keyrecord_t){};
    32dc:	86 e0       	ldi	r24, 0x06	; 6
    32de:	f8 01       	movw	r30, r16
    32e0:	11 92       	st	Z+, r1
    32e2:	8a 95       	dec	r24
    32e4:	e9 f7       	brne	.-6      	; 0x32e0 <process_tapping+0x278>
    32e6:	c0 c0       	rjmp	.+384    	; 0x3468 <process_tapping+0x400>
    32e8:	6f 3f       	cpi	r22, 0xFF	; 255
    32ea:	09 f0       	breq	.+2      	; 0x32ee <process_tapping+0x286>
    32ec:	fd c0       	rjmp	.+506    	; 0x34e8 <process_tapping+0x480>
    32ee:	7f 3f       	cpi	r23, 0xFF	; 255
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <process_tapping+0x28c>
    32f2:	fa c0       	rjmp	.+500    	; 0x34e8 <process_tapping+0x480>
    32f4:	14 c0       	rjmp	.+40     	; 0x331e <process_tapping+0x2b6>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32f6:	74 17       	cp	r23, r20
    32f8:	91 f4       	brne	.+36     	; 0x331e <process_tapping+0x2b6>
    32fa:	dd 20       	and	r13, r13
    32fc:	81 f4       	brne	.+32     	; 0x331e <process_tapping+0x2b6>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    32fe:	80 91 51 01 	lds	r24, 0x0151
    3302:	d8 01       	movw	r26, r16
    3304:	15 96       	adiw	r26, 0x05	; 5
    3306:	8c 93       	st	X, r24
                    process_action(keyp);
    3308:	c8 01       	movw	r24, r16
    330a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>
                    tapping_key = (keyrecord_t){};
    330e:	ec e4       	ldi	r30, 0x4C	; 76
    3310:	f1 e0       	ldi	r31, 0x01	; 1
    3312:	86 e0       	ldi	r24, 0x06	; 6
    3314:	df 01       	movw	r26, r30
    3316:	1d 92       	st	X+, r1
    3318:	8a 95       	dec	r24
    331a:	e9 f7       	brne	.-6      	; 0x3316 <process_tapping+0x2ae>
    331c:	be c0       	rjmp	.+380    	; 0x349a <process_tapping+0x432>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    331e:	5a 83       	std	Y+2, r21	; 0x02
    3320:	49 83       	std	Y+1, r20	; 0x01
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	0e 94 7d 13 	call	0x26fa	; 0x26fa <is_tap_key>
    332a:	88 23       	and	r24, r24
    332c:	09 f4       	brne	.+2      	; 0x3330 <process_tapping+0x2c8>
    332e:	b7 c0       	rjmp	.+366    	; 0x349e <process_tapping+0x436>
    3330:	dd 20       	and	r13, r13
    3332:	09 f4       	brne	.+2      	; 0x3336 <process_tapping+0x2ce>
    3334:	b4 c0       	rjmp	.+360    	; 0x349e <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    3336:	30 91 51 01 	lds	r19, 0x0151
    333a:	83 2f       	mov	r24, r19
    333c:	82 95       	swap	r24
    333e:	8f 70       	andi	r24, 0x0F	; 15
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	02 97       	sbiw	r24, 0x02	; 2
    3344:	9c f0       	brlt	.+38     	; 0x336c <process_tapping+0x304>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    3346:	90 91 4d 01 	lds	r25, 0x014D
    334a:	20 91 4c 01 	lds	r18, 0x014C
    334e:	fe 01       	movw	r30, r28
    3350:	76 96       	adiw	r30, 0x16	; 22
    3352:	86 e0       	ldi	r24, 0x06	; 6
    3354:	df 01       	movw	r26, r30
    3356:	1d 92       	st	X+, r1
    3358:	8a 95       	dec	r24
    335a:	e9 f7       	brne	.-6      	; 0x3356 <process_tapping+0x2ee>
    335c:	9f 8b       	std	Y+23, r25	; 0x17
    335e:	2e 8b       	std	Y+22, r18	; 0x16
    3360:	fa 8e       	std	Y+26, r15	; 0x1a
    3362:	e9 8e       	std	Y+25, r14	; 0x19
    3364:	3b 8f       	std	Y+27, r19	; 0x1b
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3366:	cf 01       	movw	r24, r30
    3368:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    336c:	ac e4       	ldi	r26, 0x4C	; 76
    336e:	b1 e0       	ldi	r27, 0x01	; 1
    3370:	f8 01       	movw	r30, r16
    3372:	86 e0       	ldi	r24, 0x06	; 6
    3374:	01 90       	ld	r0, Z+
    3376:	0d 92       	st	X+, r0
    3378:	81 50       	subi	r24, 0x01	; 1
    337a:	e1 f7       	brne	.-8      	; 0x3374 <process_tapping+0x30c>
    337c:	8a c0       	rjmp	.+276    	; 0x3492 <process_tapping+0x42a>
    337e:	6f 3f       	cpi	r22, 0xFF	; 255
    3380:	09 f0       	breq	.+2      	; 0x3384 <process_tapping+0x31c>
    3382:	b6 c0       	rjmp	.+364    	; 0x34f0 <process_tapping+0x488>
    3384:	7f 3f       	cpi	r23, 0xFF	; 255
    3386:	09 f0       	breq	.+2      	; 0x338a <process_tapping+0x322>
    3388:	b3 c0       	rjmp	.+358    	; 0x34f0 <process_tapping+0x488>
    338a:	71 c0       	rjmp	.+226    	; 0x346e <process_tapping+0x406>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    338c:	e2 16       	cp	r14, r18
    338e:	f3 06       	cpc	r15, r19
    3390:	40 f0       	brcs	.+16     	; 0x33a2 <process_tapping+0x33a>
    3392:	c7 01       	movw	r24, r14
    3394:	82 1b       	sub	r24, r18
    3396:	93 0b       	sbc	r25, r19
    3398:	88 3c       	cpi	r24, 0xC8	; 200
    339a:	91 05       	cpc	r25, r1
    339c:	08 f0       	brcs	.+2      	; 0x33a0 <process_tapping+0x338>
    339e:	53 c0       	rjmp	.+166    	; 0x3446 <process_tapping+0x3de>
    33a0:	08 c0       	rjmp	.+16     	; 0x33b2 <process_tapping+0x34a>
    33a2:	20 95       	com	r18
    33a4:	30 95       	com	r19
    33a6:	2e 0d       	add	r18, r14
    33a8:	3f 1d       	adc	r19, r15
    33aa:	28 3c       	cpi	r18, 0xC8	; 200
    33ac:	31 05       	cpc	r19, r1
    33ae:	08 f0       	brcs	.+2      	; 0x33b2 <process_tapping+0x34a>
    33b0:	4a c0       	rjmp	.+148    	; 0x3446 <process_tapping+0x3de>
            if (event.pressed) {
    33b2:	dd 20       	and	r13, r13
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <process_tapping+0x350>
    33b6:	73 c0       	rjmp	.+230    	; 0x349e <process_tapping+0x436>
    33b8:	6f 3f       	cpi	r22, 0xFF	; 255
    33ba:	09 f0       	breq	.+2      	; 0x33be <process_tapping+0x356>
    33bc:	9f c0       	rjmp	.+318    	; 0x34fc <process_tapping+0x494>
    33be:	7f 3f       	cpi	r23, 0xFF	; 255
    33c0:	09 f0       	breq	.+2      	; 0x33c4 <process_tapping+0x35c>
    33c2:	9c c0       	rjmp	.+312    	; 0x34fc <process_tapping+0x494>
    33c4:	29 c0       	rjmp	.+82     	; 0x3418 <process_tapping+0x3b0>
                if (IS_TAPPING_KEY(event.key)) {
    33c6:	74 17       	cp	r23, r20
    33c8:	39 f5       	brne	.+78     	; 0x3418 <process_tapping+0x3b0>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    33ca:	90 91 51 01 	lds	r25, 0x0151
    33ce:	90 fd       	sbrc	r25, 0
    33d0:	1a c0       	rjmp	.+52     	; 0x3406 <process_tapping+0x39e>
    33d2:	89 2f       	mov	r24, r25
    33d4:	82 95       	swap	r24
    33d6:	8f 70       	andi	r24, 0x0F	; 15
    33d8:	b1 f0       	breq	.+44     	; 0x3406 <process_tapping+0x39e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    33da:	f8 01       	movw	r30, r16
    33dc:	95 83       	std	Z+5, r25	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    33de:	8f 30       	cpi	r24, 0x0F	; 15
    33e0:	31 f0       	breq	.+12     	; 0x33ee <process_tapping+0x386>
    33e2:	8f 5f       	subi	r24, 0xFF	; 255
    33e4:	82 95       	swap	r24
    33e6:	80 7f       	andi	r24, 0xF0	; 240
    33e8:	9f 70       	andi	r25, 0x0F	; 15
    33ea:	98 2b       	or	r25, r24
    33ec:	95 83       	std	Z+5, r25	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    33ee:	c8 01       	movw	r24, r16
    33f0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>
                        tapping_key = *keyp;
    33f4:	ac e4       	ldi	r26, 0x4C	; 76
    33f6:	b1 e0       	ldi	r27, 0x01	; 1
    33f8:	f8 01       	movw	r30, r16
    33fa:	86 e0       	ldi	r24, 0x06	; 6
    33fc:	01 90       	ld	r0, Z+
    33fe:	0d 92       	st	X+, r0
    3400:	81 50       	subi	r24, 0x01	; 1
    3402:	e1 f7       	brne	.-8      	; 0x33fc <process_tapping+0x394>
    3404:	48 c0       	rjmp	.+144    	; 0x3496 <process_tapping+0x42e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3406:	ac e4       	ldi	r26, 0x4C	; 76
    3408:	b1 e0       	ldi	r27, 0x01	; 1
    340a:	f8 01       	movw	r30, r16
    340c:	86 e0       	ldi	r24, 0x06	; 6
    340e:	01 90       	ld	r0, Z+
    3410:	0d 92       	st	X+, r0
    3412:	81 50       	subi	r24, 0x01	; 1
    3414:	e1 f7       	brne	.-8      	; 0x340e <process_tapping+0x3a6>
    3416:	41 c0       	rjmp	.+130    	; 0x349a <process_tapping+0x432>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    3418:	5a 83       	std	Y+2, r21	; 0x02
    341a:	49 83       	std	Y+1, r20	; 0x01
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	9a 81       	ldd	r25, Y+2	; 0x02
    3420:	0e 94 7d 13 	call	0x26fa	; 0x26fa <is_tap_key>
    3424:	88 23       	and	r24, r24
    3426:	49 f0       	breq	.+18     	; 0x343a <process_tapping+0x3d2>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3428:	ac e4       	ldi	r26, 0x4C	; 76
    342a:	b1 e0       	ldi	r27, 0x01	; 1
    342c:	f8 01       	movw	r30, r16
    342e:	86 e0       	ldi	r24, 0x06	; 6
    3430:	01 90       	ld	r0, Z+
    3432:	0d 92       	st	X+, r0
    3434:	81 50       	subi	r24, 0x01	; 1
    3436:	e1 f7       	brne	.-8      	; 0x3430 <process_tapping+0x3c8>
    3438:	2c c0       	rjmp	.+88     	; 0x3492 <process_tapping+0x42a>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    343a:	80 91 51 01 	lds	r24, 0x0151
    343e:	81 60       	ori	r24, 0x01	; 1
    3440:	80 93 51 01 	sts	0x0151, r24
    3444:	2c c0       	rjmp	.+88     	; 0x349e <process_tapping+0x436>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3446:	7e 2d       	mov	r23, r14
    3448:	fd 82       	std	Y+5, r15	; 0x05
    344a:	ec 82       	std	Y+4, r14	; 0x04
    344c:	5a 83       	std	Y+2, r21	; 0x02
    344e:	49 83       	std	Y+1, r20	; 0x01
    3450:	db 82       	std	Y+3, r13	; 0x03
    3452:	6d 2d       	mov	r22, r13
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	0e 94 5e 13 	call	0x26bc	; 0x26bc <debug_event>
            tapping_key = (keyrecord_t){};
    345a:	ec e4       	ldi	r30, 0x4C	; 76
    345c:	f1 e0       	ldi	r31, 0x01	; 1
    345e:	86 e0       	ldi	r24, 0x06	; 6
    3460:	df 01       	movw	r26, r30
    3462:	1d 92       	st	X+, r1
    3464:	8a 95       	dec	r24
    3466:	e9 f7       	brne	.-6      	; 0x3462 <process_tapping+0x3fa>
            debug_tapping_key();
    3468:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <debug_tapping_key>
    346c:	1c c0       	rjmp	.+56     	; 0x34a6 <process_tapping+0x43e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    346e:	dd 20       	and	r13, r13
    3470:	b1 f0       	breq	.+44     	; 0x349e <process_tapping+0x436>
    3472:	5a 83       	std	Y+2, r21	; 0x02
    3474:	49 83       	std	Y+1, r20	; 0x01
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	9a 81       	ldd	r25, Y+2	; 0x02
    347a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <is_tap_key>
    347e:	88 23       	and	r24, r24
    3480:	71 f0       	breq	.+28     	; 0x349e <process_tapping+0x436>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    3482:	ac e4       	ldi	r26, 0x4C	; 76
    3484:	b1 e0       	ldi	r27, 0x01	; 1
    3486:	f8 01       	movw	r30, r16
    3488:	86 e0       	ldi	r24, 0x06	; 6
    348a:	01 90       	ld	r0, Z+
    348c:	0d 92       	st	X+, r0
    348e:	81 50       	subi	r24, 0x01	; 1
    3490:	e1 f7       	brne	.-8      	; 0x348a <process_tapping+0x422>
            waiting_buffer_scan_tap();
    3492:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <waiting_buffer_scan_tap>
            debug_tapping_key();
    3496:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <debug_tapping_key>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <process_tapping+0x440>
            return true;
        } else {
            process_action(keyp);
    349e:	c8 01       	movw	r24, r16
    34a0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <process_action>
    34a4:	fa cf       	rjmp	.-12     	; 0x349a <process_tapping+0x432>
            return true;
    34a6:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    34a8:	6b 96       	adiw	r28, 0x1b	; 27
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	ff 90       	pop	r15
    34be:	ef 90       	pop	r14
    34c0:	df 90       	pop	r13
    34c2:	08 95       	ret
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    34c4:	80 91 4e 01 	lds	r24, 0x014E
    34c8:	88 23       	and	r24, r24
    34ca:	09 f4       	brne	.+2      	; 0x34ce <process_tapping+0x466>
    34cc:	58 cf       	rjmp	.-336    	; 0x337e <process_tapping+0x316>
    34ce:	fb cd       	rjmp	.-1034   	; 0x30c6 <process_tapping+0x5e>
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34d0:	65 17       	cp	r22, r21
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <process_tapping+0x46e>
    34d4:	2c ce       	rjmp	.-936    	; 0x312e <process_tapping+0xc6>
    34d6:	16 ce       	rjmp	.-980    	; 0x3104 <process_tapping+0x9c>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    34d8:	61 30       	cpi	r22, 0x01	; 1
    34da:	09 f4       	brne	.+2      	; 0x34de <process_tapping+0x476>
    34dc:	98 ce       	rjmp	.-720    	; 0x320e <process_tapping+0x1a6>
    34de:	4d ce       	rjmp	.-870    	; 0x317a <process_tapping+0x112>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34e0:	65 17       	cp	r22, r21
    34e2:	09 f0       	breq	.+2      	; 0x34e6 <process_tapping+0x47e>
    34e4:	b8 ce       	rjmp	.-656    	; 0x3256 <process_tapping+0x1ee>
    34e6:	a3 ce       	rjmp	.-698    	; 0x322e <process_tapping+0x1c6>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34e8:	65 17       	cp	r22, r21
    34ea:	09 f0       	breq	.+2      	; 0x34ee <process_tapping+0x486>
    34ec:	18 cf       	rjmp	.-464    	; 0x331e <process_tapping+0x2b6>
    34ee:	03 cf       	rjmp	.-506    	; 0x32f6 <process_tapping+0x28e>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
    34f0:	80 91 4e 01 	lds	r24, 0x014E
    34f4:	88 23       	and	r24, r24
    34f6:	09 f0       	breq	.+2      	; 0x34fa <process_tapping+0x492>
    34f8:	ba cf       	rjmp	.-140    	; 0x346e <process_tapping+0x406>
    34fa:	48 cf       	rjmp	.-368    	; 0x338c <process_tapping+0x324>
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
    34fc:	65 17       	cp	r22, r21
    34fe:	09 f0       	breq	.+2      	; 0x3502 <process_tapping+0x49a>
    3500:	8b cf       	rjmp	.-234    	; 0x3418 <process_tapping+0x3b0>
    3502:	61 cf       	rjmp	.-318    	; 0x33c6 <process_tapping+0x35e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3504:	5a 83       	std	Y+2, r21	; 0x02
    3506:	49 83       	std	Y+1, r20	; 0x01
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	9a 81       	ldd	r25, Y+2	; 0x02
    350c:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <layer_switch_get_action>
    3510:	48 2f       	mov	r20, r24
                    switch (action.kind.id) {
    3512:	89 2f       	mov	r24, r25
    3514:	82 95       	swap	r24
    3516:	8f 70       	andi	r24, 0x0F	; 15
    3518:	28 2f       	mov	r18, r24
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	22 30       	cpi	r18, 0x02	; 2
    351e:	31 05       	cpc	r19, r1
    3520:	0c f4       	brge	.+2      	; 0x3524 <process_tapping+0x4bc>
    3522:	63 ce       	rjmp	.-826    	; 0x31ea <process_tapping+0x182>
    3524:	24 30       	cpi	r18, 0x04	; 4
    3526:	31 05       	cpc	r19, r1
    3528:	0c f0       	brlt	.+2      	; 0x352c <process_tapping+0x4c4>
    352a:	b9 cf       	rjmp	.-142    	; 0x349e <process_tapping+0x436>
    352c:	63 ce       	rjmp	.-826    	; 0x31f4 <process_tapping+0x18c>

0000352e <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    352e:	0f 93       	push	r16
    3530:	1f 93       	push	r17
    3532:	df 93       	push	r29
    3534:	cf 93       	push	r28
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	2c 97       	sbiw	r28, 0x0c	; 12
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	4f 83       	std	Y+7, r20	; 0x07
    3548:	58 87       	std	Y+8, r21	; 0x08
    354a:	69 87       	std	Y+9, r22	; 0x09
    354c:	7a 87       	std	Y+10, r23	; 0x0a
    354e:	8b 87       	std	Y+11, r24	; 0x0b
    3550:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3552:	8e 01       	movw	r16, r28
    3554:	09 5f       	subi	r16, 0xF9	; 249
    3556:	1f 4f       	sbci	r17, 0xFF	; 255
    3558:	c8 01       	movw	r24, r16
    355a:	0e 94 34 18 	call	0x3068	; 0x3068 <process_tapping>
    355e:	88 23       	and	r24, r24
    3560:	d9 f0       	breq	.+54     	; 0x3598 <action_tapping_process+0x6a>
        if (!IS_NOEVENT(record.event)) {
    3562:	28 85       	ldd	r18, Y+8	; 0x08
    3564:	3f 81       	ldd	r19, Y+7	; 0x07
    3566:	8a 85       	ldd	r24, Y+10	; 0x0a
    3568:	9b 85       	ldd	r25, Y+11	; 0x0b
    356a:	89 2b       	or	r24, r25
    356c:	09 f4       	brne	.+2      	; 0x3570 <action_tapping_process+0x42>
    356e:	6b c0       	rjmp	.+214    	; 0x3646 <action_tapping_process+0x118>
    3570:	2f 3f       	cpi	r18, 0xFF	; 255
    3572:	49 f4       	brne	.+18     	; 0x3586 <action_tapping_process+0x58>
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	3f 3f       	cpi	r19, 0xFF	; 255
    357a:	11 f4       	brne	.+4      	; 0x3580 <action_tapping_process+0x52>
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	88 23       	and	r24, r24
    3582:	09 f0       	breq	.+2      	; 0x3586 <action_tapping_process+0x58>
    3584:	60 c0       	rjmp	.+192    	; 0x3646 <action_tapping_process+0x118>
            debug("processed: "); debug_record(record); debug("\n");
    3586:	4f 81       	ldd	r20, Y+7	; 0x07
    3588:	58 85       	ldd	r21, Y+8	; 0x08
    358a:	69 85       	ldd	r22, Y+9	; 0x09
    358c:	7a 85       	ldd	r23, Y+10	; 0x0a
    358e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3590:	9c 85       	ldd	r25, Y+12	; 0x0c
    3592:	0e 94 6d 13 	call	0x26da	; 0x26da <debug_record>
    3596:	57 c0       	rjmp	.+174    	; 0x3646 <action_tapping_process+0x118>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
    3598:	de 01       	movw	r26, r28
    359a:	11 96       	adiw	r26, 0x01	; 1
    359c:	f8 01       	movw	r30, r16
    359e:	86 e0       	ldi	r24, 0x06	; 6
    35a0:	01 90       	ld	r0, Z+
    35a2:	0d 92       	st	X+, r0
    35a4:	81 50       	subi	r24, 0x01	; 1
    35a6:	e1 f7       	brne	.-8      	; 0x35a0 <action_tapping_process+0x72>
    35a8:	f9 81       	ldd	r31, Y+1	; 0x01
    35aa:	ea 81       	ldd	r30, Y+2	; 0x02
    35ac:	4c 81       	ldd	r20, Y+4	; 0x04
    35ae:	5d 81       	ldd	r21, Y+5	; 0x05
    35b0:	41 15       	cp	r20, r1
    35b2:	51 05       	cpc	r21, r1
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <action_tapping_process+0x8a>
    35b6:	47 c0       	rjmp	.+142    	; 0x3646 <action_tapping_process+0x118>
    35b8:	ef 3f       	cpi	r30, 0xFF	; 255
    35ba:	09 f0       	breq	.+2      	; 0x35be <action_tapping_process+0x90>
    35bc:	4c c0       	rjmp	.+152    	; 0x3656 <action_tapping_process+0x128>
    35be:	ff 3f       	cpi	r31, 0xFF	; 255
    35c0:	09 f0       	breq	.+2      	; 0x35c4 <action_tapping_process+0x96>
    35c2:	49 c0       	rjmp	.+146    	; 0x3656 <action_tapping_process+0x128>
    35c4:	40 c0       	rjmp	.+128    	; 0x3646 <action_tapping_process+0x118>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    35c6:	f9 83       	std	Y+1, r31	; 0x01
    35c8:	ea 83       	std	Y+2, r30	; 0x02
    35ca:	5d 83       	std	Y+5, r21	; 0x05
    35cc:	4c 83       	std	Y+4, r20	; 0x04
    35ce:	f9 01       	movw	r30, r18
    35d0:	ee 0f       	add	r30, r30
    35d2:	ff 1f       	adc	r31, r31
    35d4:	e2 0f       	add	r30, r18
    35d6:	f3 1f       	adc	r31, r19
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	ec 5a       	subi	r30, 0xAC	; 172
    35de:	fe 4f       	sbci	r31, 0xFE	; 254
    35e0:	de 01       	movw	r26, r28
    35e2:	11 96       	adiw	r26, 0x01	; 1
    35e4:	86 e0       	ldi	r24, 0x06	; 6
    35e6:	0d 90       	ld	r0, X+
    35e8:	01 92       	st	Z+, r0
    35ea:	81 50       	subi	r24, 0x01	; 1
    35ec:	e1 f7       	brne	.-8      	; 0x35e6 <action_tapping_process+0xb8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    35ee:	60 93 52 01 	sts	0x0152, r22

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    35f2:	0e 94 88 17 	call	0x2f10	; 0x2f10 <debug_waiting_buffer>
    35f6:	27 c0       	rjmp	.+78     	; 0x3646 <action_tapping_process+0x118>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35f8:	91 9f       	mul	r25, r17
    35fa:	c0 01       	movw	r24, r0
    35fc:	11 24       	eor	r1, r1
    35fe:	8c 5a       	subi	r24, 0xAC	; 172
    3600:	9e 4f       	sbci	r25, 0xFE	; 254
    3602:	0e 94 34 18 	call	0x3068	; 0x3068 <process_tapping>
    3606:	88 23       	and	r24, r24
    3608:	09 f4       	brne	.+2      	; 0x360c <action_tapping_process+0xde>
    360a:	45 c0       	rjmp	.+138    	; 0x3696 <action_tapping_process+0x168>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    360c:	80 91 53 01 	lds	r24, 0x0153
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	fc 01       	movw	r30, r24
    3614:	ee 0f       	add	r30, r30
    3616:	ff 1f       	adc	r31, r31
    3618:	e8 0f       	add	r30, r24
    361a:	f9 1f       	adc	r31, r25
    361c:	ee 0f       	add	r30, r30
    361e:	ff 1f       	adc	r31, r31
    3620:	ec 5a       	subi	r30, 0xAC	; 172
    3622:	fe 4f       	sbci	r31, 0xFE	; 254
    3624:	40 81       	ld	r20, Z
    3626:	51 81       	ldd	r21, Z+1	; 0x01
    3628:	62 81       	ldd	r22, Z+2	; 0x02
    362a:	73 81       	ldd	r23, Z+3	; 0x03
    362c:	84 81       	ldd	r24, Z+4	; 0x04
    362e:	95 81       	ldd	r25, Z+5	; 0x05
    3630:	0e 94 6d 13 	call	0x26da	; 0x26da <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3634:	80 91 53 01 	lds	r24, 0x0153
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	01 96       	adiw	r24, 0x01	; 1
    363c:	87 70       	andi	r24, 0x07	; 7
    363e:	90 70       	andi	r25, 0x00	; 0
    3640:	80 93 53 01 	sts	0x0153, r24
    3644:	01 c0       	rjmp	.+2      	; 0x3648 <action_tapping_process+0x11a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3646:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3648:	90 91 53 01 	lds	r25, 0x0153
    364c:	80 91 52 01 	lds	r24, 0x0152
    3650:	98 17       	cp	r25, r24
    3652:	91 f6       	brne	.-92     	; 0x35f8 <action_tapping_process+0xca>
    3654:	20 c0       	rjmp	.+64     	; 0x3696 <action_tapping_process+0x168>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3656:	80 91 52 01 	lds	r24, 0x0152
    365a:	28 2f       	mov	r18, r24
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	2f 5f       	subi	r18, 0xFF	; 255
    3660:	3f 4f       	sbci	r19, 0xFF	; 255
    3662:	b9 01       	movw	r22, r18
    3664:	67 70       	andi	r22, 0x07	; 7
    3666:	70 70       	andi	r23, 0x00	; 0
    3668:	21 50       	subi	r18, 0x01	; 1
    366a:	30 40       	sbci	r19, 0x00	; 0
    366c:	80 91 53 01 	lds	r24, 0x0153
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	68 17       	cp	r22, r24
    3674:	79 07       	cpc	r23, r25
    3676:	09 f0       	breq	.+2      	; 0x367a <action_tapping_process+0x14c>
    3678:	a6 cf       	rjmp	.-180    	; 0x35c6 <action_tapping_process+0x98>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    367a:	0e 94 bd 13 	call	0x277a	; 0x277a <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    367e:	10 92 52 01 	sts	0x0152, r1
    waiting_buffer_tail = 0;
    3682:	10 92 53 01 	sts	0x0153, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3686:	ec e4       	ldi	r30, 0x4C	; 76
    3688:	f1 e0       	ldi	r31, 0x01	; 1
    368a:	86 e0       	ldi	r24, 0x06	; 6
    368c:	df 01       	movw	r26, r30
    368e:	1d 92       	st	X+, r1
    3690:	8a 95       	dec	r24
    3692:	e9 f7       	brne	.-6      	; 0x368e <action_tapping_process+0x160>
    3694:	d8 cf       	rjmp	.-80     	; 0x3646 <action_tapping_process+0x118>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3696:	2c 96       	adiw	r28, 0x0c	; 12
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	08 95       	ret

000036ac <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    36ac:	cf 92       	push	r12
    36ae:	df 92       	push	r13
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <action_macro_play+0x18>
    36c2:	7f c0       	rjmp	.+254    	; 0x37c2 <action_macro_play+0x116>
    36c4:	ee 24       	eor	r14, r14
    36c6:	ff 24       	eor	r15, r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36c8:	80 ea       	ldi	r24, 0xA0	; 160
    36ca:	c8 2e       	mov	r12, r24
    36cc:	8f e0       	ldi	r24, 0x0F	; 15
    36ce:	d8 2e       	mov	r13, r24
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    36d0:	01 e0       	ldi	r16, 0x01	; 1
    36d2:	10 e0       	ldi	r17, 0x00	; 0

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    36d4:	fe 01       	movw	r30, r28
    36d6:	21 96       	adiw	r28, 0x01	; 1
    36d8:	94 91       	lpm	r25, Z+
    36da:	95 37       	cpi	r25, 0x75	; 117
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <action_macro_play+0x34>
    36de:	50 c0       	rjmp	.+160    	; 0x3780 <action_macro_play+0xd4>
    36e0:	96 37       	cpi	r25, 0x76	; 118
    36e2:	60 f4       	brcc	.+24     	; 0x36fc <action_macro_play+0x50>
    36e4:	94 37       	cpi	r25, 0x74	; 116
    36e6:	08 f0       	brcs	.+2      	; 0x36ea <action_macro_play+0x3e>
    36e8:	40 c0       	rjmp	.+128    	; 0x376a <action_macro_play+0xbe>
    36ea:	94 30       	cpi	r25, 0x04	; 4
    36ec:	08 f0       	brcs	.+2      	; 0x36f0 <action_macro_play+0x44>
    36ee:	57 c0       	rjmp	.+174    	; 0x379e <action_macro_play+0xf2>
    36f0:	91 30       	cpi	r25, 0x01	; 1
    36f2:	b1 f0       	breq	.+44     	; 0x3720 <action_macro_play+0x74>
    36f4:	92 30       	cpi	r25, 0x02	; 2
    36f6:	09 f0       	breq	.+2      	; 0x36fa <action_macro_play+0x4e>
    36f8:	64 c0       	rjmp	.+200    	; 0x37c2 <action_macro_play+0x116>
    36fa:	23 c0       	rjmp	.+70     	; 0x3742 <action_macro_play+0x96>
    36fc:	98 37       	cpi	r25, 0x78	; 120
    36fe:	09 f4       	brne	.+2      	; 0x3702 <action_macro_play+0x56>
    3700:	4b c0       	rjmp	.+150    	; 0x3798 <action_macro_play+0xec>
    3702:	99 37       	cpi	r25, 0x79	; 121
    3704:	38 f4       	brcc	.+14     	; 0x3714 <action_macro_play+0x68>
    3706:	96 37       	cpi	r25, 0x76	; 118
    3708:	09 f4       	brne	.+2      	; 0x370c <action_macro_play+0x60>
    370a:	3e c0       	rjmp	.+124    	; 0x3788 <action_macro_play+0xdc>
    370c:	97 37       	cpi	r25, 0x77	; 119
    370e:	09 f0       	breq	.+2      	; 0x3712 <action_macro_play+0x66>
    3710:	58 c0       	rjmp	.+176    	; 0x37c2 <action_macro_play+0x116>
    3712:	3e c0       	rjmp	.+124    	; 0x3790 <action_macro_play+0xe4>
    3714:	89 2f       	mov	r24, r25
    3716:	84 58       	subi	r24, 0x84	; 132
    3718:	80 37       	cpi	r24, 0x70	; 112
    371a:	08 f0       	brcs	.+2      	; 0x371e <action_macro_play+0x72>
    371c:	52 c0       	rjmp	.+164    	; 0x37c2 <action_macro_play+0x116>
    371e:	43 c0       	rjmp	.+134    	; 0x37a6 <action_macro_play+0xfa>
            case KEY_DOWN:
                MACRO_READ();
    3720:	fe 01       	movw	r30, r28
    3722:	21 96       	adiw	r28, 0x01	; 1
    3724:	94 91       	lpm	r25, Z+
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3726:	89 2f       	mov	r24, r25
    3728:	80 5e       	subi	r24, 0xE0	; 224
    372a:	88 30       	cpi	r24, 0x08	; 8
    372c:	08 f0       	brcs	.+2      	; 0x3730 <action_macro_play+0x84>
    372e:	37 c0       	rjmp	.+110    	; 0x379e <action_macro_play+0xf2>
                    add_weak_mods(MOD_BIT(macro));
    3730:	97 70       	andi	r25, 0x07	; 7
    3732:	80 2f       	mov	r24, r16
    3734:	01 c0       	rjmp	.+2      	; 0x3738 <action_macro_play+0x8c>
    3736:	88 0f       	add	r24, r24
    3738:	9a 95       	dec	r25
    373a:	ea f7       	brpl	.-6      	; 0x3736 <action_macro_play+0x8a>
    373c:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <add_weak_mods>
    3740:	0f c0       	rjmp	.+30     	; 0x3760 <action_macro_play+0xb4>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3742:	fe 01       	movw	r30, r28
    3744:	21 96       	adiw	r28, 0x01	; 1
    3746:	94 91       	lpm	r25, Z+
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3748:	89 2f       	mov	r24, r25
    374a:	80 5e       	subi	r24, 0xE0	; 224
    374c:	88 30       	cpi	r24, 0x08	; 8
    374e:	58 f4       	brcc	.+22     	; 0x3766 <action_macro_play+0xba>
                    del_weak_mods(MOD_BIT(macro));
    3750:	97 70       	andi	r25, 0x07	; 7
    3752:	80 2f       	mov	r24, r16
    3754:	01 c0       	rjmp	.+2      	; 0x3758 <action_macro_play+0xac>
    3756:	88 0f       	add	r24, r24
    3758:	9a 95       	dec	r25
    375a:	ea f7       	brpl	.-6      	; 0x3756 <action_macro_play+0xaa>
    375c:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <del_weak_mods>
                    send_keyboard_report();
    3760:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <send_keyboard_report>
    3764:	24 c0       	rjmp	.+72     	; 0x37ae <action_macro_play+0x102>
                } else {
                    unregister_code(macro);
    3766:	89 2f       	mov	r24, r25
    3768:	20 c0       	rjmp	.+64     	; 0x37aa <action_macro_play+0xfe>
                }
                break;
            case WAIT:
                MACRO_READ();
    376a:	fe 01       	movw	r30, r28
    376c:	24 91       	lpm	r18, Z+
    376e:	04 c0       	rjmp	.+8      	; 0x3778 <action_macro_play+0xcc>
    3770:	c6 01       	movw	r24, r12
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	f1 f7       	brne	.-4      	; 0x3772 <action_macro_play+0xc6>
    3776:	21 50       	subi	r18, 0x01	; 1
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3778:	22 23       	and	r18, r18
    377a:	d1 f7       	brne	.-12     	; 0x3770 <action_macro_play+0xc4>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    377c:	21 96       	adiw	r28, 0x01	; 1
    377e:	17 c0       	rjmp	.+46     	; 0x37ae <action_macro_play+0x102>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3780:	fe 01       	movw	r30, r28
    3782:	21 96       	adiw	r28, 0x01	; 1
    3784:	e4 90       	lpm	r14, Z+
    3786:	13 c0       	rjmp	.+38     	; 0x37ae <action_macro_play+0x102>
                dprintf("INTERVAL(%u)\n", interval);
                break;
            case MOD_STORE:
                mod_storage = get_mods();
    3788:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <get_mods>
    378c:	f8 2e       	mov	r15, r24
    378e:	0f c0       	rjmp	.+30     	; 0x37ae <action_macro_play+0x102>
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3790:	8f 2d       	mov	r24, r15
    3792:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <set_mods>
    3796:	e4 cf       	rjmp	.-56     	; 0x3760 <action_macro_play+0xb4>
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3798:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <clear_mods>
    379c:	e1 cf       	rjmp	.-62     	; 0x3760 <action_macro_play+0xb4>
                send_keyboard_report();
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    379e:	89 2f       	mov	r24, r25
    37a0:	0e 94 23 14 	call	0x2846	; 0x2846 <register_code>
    37a4:	04 c0       	rjmp	.+8      	; 0x37ae <action_macro_play+0x102>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    37a6:	89 2f       	mov	r24, r25
    37a8:	8f 77       	andi	r24, 0x7F	; 127
    37aa:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <unregister_code>
    37ae:	2e 2d       	mov	r18, r14
    37b0:	04 c0       	rjmp	.+8      	; 0x37ba <action_macro_play+0x10e>
    37b2:	c6 01       	movw	r24, r12
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <action_macro_play+0x108>
    37b8:	21 50       	subi	r18, 0x01	; 1
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    37ba:	22 23       	and	r18, r18
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <action_macro_play+0x114>
    37be:	8a cf       	rjmp	.-236    	; 0x36d4 <action_macro_play+0x28>
    37c0:	f8 cf       	rjmp	.-16     	; 0x37b2 <action_macro_play+0x106>
    }
}
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	ff 90       	pop	r15
    37cc:	ef 90       	pop	r14
    37ce:	df 90       	pop	r13
    37d0:	cf 90       	pop	r12
    37d2:	08 95       	ret

000037d4 <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    37d4:	08 95       	ret

000037d6 <layer_debug>:
}

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    37d6:	08 95       	ret

000037d8 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    37d8:	cf 92       	push	r12
    37da:	df 92       	push	r13
    37dc:	ef 92       	push	r14
    37de:	ff 92       	push	r15
    37e0:	0f 93       	push	r16
    37e2:	1f 93       	push	r17
    37e4:	cf 93       	push	r28
    37e6:	df 93       	push	r29
    37e8:	6c 01       	movw	r12, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    37ea:	e0 90 84 01 	lds	r14, 0x0184
    37ee:	f0 90 85 01 	lds	r15, 0x0185
    37f2:	00 91 86 01 	lds	r16, 0x0186
    37f6:	10 91 87 01 	lds	r17, 0x0187
    37fa:	80 91 88 01 	lds	r24, 0x0188
    37fe:	90 91 89 01 	lds	r25, 0x0189
    3802:	a0 91 8a 01 	lds	r26, 0x018A
    3806:	b0 91 8b 01 	lds	r27, 0x018B
    380a:	e8 2a       	or	r14, r24
    380c:	f9 2a       	or	r15, r25
    380e:	0a 2b       	or	r16, r26
    3810:	1b 2b       	or	r17, r27
    3812:	cf e1       	ldi	r28, 0x1F	; 31
    3814:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3816:	d8 01       	movw	r26, r16
    3818:	c7 01       	movw	r24, r14
    381a:	0c 2e       	mov	r0, r28
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <layer_switch_get_action+0x4e>
    381e:	b6 95       	lsr	r27
    3820:	a7 95       	ror	r26
    3822:	97 95       	ror	r25
    3824:	87 95       	ror	r24
    3826:	0a 94       	dec	r0
    3828:	d2 f7       	brpl	.-12     	; 0x381e <layer_switch_get_action+0x46>
    382a:	81 70       	andi	r24, 0x01	; 1
    382c:	90 70       	andi	r25, 0x00	; 0
    382e:	89 2b       	or	r24, r25
    3830:	41 f0       	breq	.+16     	; 0x3842 <layer_switch_get_action+0x6a>
            action = action_for_key(i, key);
    3832:	8c 2f       	mov	r24, r28
    3834:	b6 01       	movw	r22, r12
    3836:	0e 94 52 20 	call	0x40a4	; 0x40a4 <action_for_key>
    383a:	9c 01       	movw	r18, r24
            if (action.code != ACTION_TRANSPARENT) {
    383c:	81 30       	cpi	r24, 0x01	; 1
    383e:	91 05       	cpc	r25, r1
    3840:	51 f4       	brne	.+20     	; 0x3856 <layer_switch_get_action+0x7e>
                return action;
    3842:	21 97       	sbiw	r28, 0x01	; 1
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    3844:	8f ef       	ldi	r24, 0xFF	; 255
    3846:	cf 3f       	cpi	r28, 0xFF	; 255
    3848:	d8 07       	cpc	r29, r24
    384a:	29 f7       	brne	.-54     	; 0x3816 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	b6 01       	movw	r22, r12
    3850:	0e 94 52 20 	call	0x40a4	; 0x40a4 <action_for_key>
    3854:	9c 01       	movw	r18, r24
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3856:	82 2f       	mov	r24, r18
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	1f 91       	pop	r17
    385e:	0f 91       	pop	r16
    3860:	ff 90       	pop	r15
    3862:	ef 90       	pop	r14
    3864:	df 90       	pop	r13
    3866:	cf 90       	pop	r12
    3868:	08 95       	ret

0000386a <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    386a:	60 93 88 01 	sts	0x0188, r22
    386e:	70 93 89 01 	sts	0x0189, r23
    3872:	80 93 8a 01 	sts	0x018A, r24
    3876:	90 93 8b 01 	sts	0x018B, r25
    hook_layer_change(layer_state);
    387a:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    387e:	0e 94 aa 13 	call	0x2754	; 0x2754 <clear_keyboard_but_mods>
}
    3882:	08 95       	ret

00003884 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3884:	9b 01       	movw	r18, r22
    3886:	ac 01       	movw	r20, r24
    layer_state_set(layer_state ^ state);
    3888:	60 91 88 01 	lds	r22, 0x0188
    388c:	70 91 89 01 	lds	r23, 0x0189
    3890:	80 91 8a 01 	lds	r24, 0x018A
    3894:	90 91 8b 01 	lds	r25, 0x018B
    3898:	62 27       	eor	r22, r18
    389a:	73 27       	eor	r23, r19
    389c:	84 27       	eor	r24, r20
    389e:	95 27       	eor	r25, r21
    38a0:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    38a4:	08 95       	ret

000038a6 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    38a6:	9b 01       	movw	r18, r22
    38a8:	ac 01       	movw	r20, r24
    layer_state_set(layer_state & state);
    38aa:	60 91 88 01 	lds	r22, 0x0188
    38ae:	70 91 89 01 	lds	r23, 0x0189
    38b2:	80 91 8a 01 	lds	r24, 0x018A
    38b6:	90 91 8b 01 	lds	r25, 0x018B
    38ba:	62 23       	and	r22, r18
    38bc:	73 23       	and	r23, r19
    38be:	84 23       	and	r24, r20
    38c0:	95 23       	and	r25, r21
    38c2:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    38c6:	08 95       	ret

000038c8 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    38c8:	9b 01       	movw	r18, r22
    38ca:	ac 01       	movw	r20, r24
    layer_state_set(layer_state | state);
    38cc:	60 91 88 01 	lds	r22, 0x0188
    38d0:	70 91 89 01 	lds	r23, 0x0189
    38d4:	80 91 8a 01 	lds	r24, 0x018A
    38d8:	90 91 8b 01 	lds	r25, 0x018B
    38dc:	62 2b       	or	r22, r18
    38de:	73 2b       	or	r23, r19
    38e0:	84 2b       	or	r24, r20
    38e2:	95 2b       	or	r25, r21
    38e4:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    38e8:	08 95       	ret

000038ea <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    38ea:	21 e0       	ldi	r18, 0x01	; 1
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	04 c0       	rjmp	.+8      	; 0x38fc <layer_invert+0x12>
    38f4:	22 0f       	add	r18, r18
    38f6:	33 1f       	adc	r19, r19
    38f8:	44 1f       	adc	r20, r20
    38fa:	55 1f       	adc	r21, r21
    38fc:	8a 95       	dec	r24
    38fe:	d2 f7       	brpl	.-12     	; 0x38f4 <layer_invert+0xa>
    3900:	80 91 88 01 	lds	r24, 0x0188
    3904:	90 91 89 01 	lds	r25, 0x0189
    3908:	a0 91 8a 01 	lds	r26, 0x018A
    390c:	b0 91 8b 01 	lds	r27, 0x018B
    3910:	28 27       	eor	r18, r24
    3912:	39 27       	eor	r19, r25
    3914:	4a 27       	eor	r20, r26
    3916:	5b 27       	eor	r21, r27
    3918:	ca 01       	movw	r24, r20
    391a:	b9 01       	movw	r22, r18
    391c:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    3920:	08 95       	ret

00003922 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3922:	21 e0       	ldi	r18, 0x01	; 1
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e0       	ldi	r20, 0x00	; 0
    3928:	50 e0       	ldi	r21, 0x00	; 0
    392a:	04 c0       	rjmp	.+8      	; 0x3934 <layer_off+0x12>
    392c:	22 0f       	add	r18, r18
    392e:	33 1f       	adc	r19, r19
    3930:	44 1f       	adc	r20, r20
    3932:	55 1f       	adc	r21, r21
    3934:	8a 95       	dec	r24
    3936:	d2 f7       	brpl	.-12     	; 0x392c <layer_off+0xa>
    3938:	20 95       	com	r18
    393a:	30 95       	com	r19
    393c:	40 95       	com	r20
    393e:	50 95       	com	r21
    3940:	80 91 88 01 	lds	r24, 0x0188
    3944:	90 91 89 01 	lds	r25, 0x0189
    3948:	a0 91 8a 01 	lds	r26, 0x018A
    394c:	b0 91 8b 01 	lds	r27, 0x018B
    3950:	28 23       	and	r18, r24
    3952:	39 23       	and	r19, r25
    3954:	4a 23       	and	r20, r26
    3956:	5b 23       	and	r21, r27
    3958:	ca 01       	movw	r24, r20
    395a:	b9 01       	movw	r22, r18
    395c:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    3960:	08 95       	ret

00003962 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3962:	21 e0       	ldi	r18, 0x01	; 1
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	50 e0       	ldi	r21, 0x00	; 0
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <layer_on+0x12>
    396c:	22 0f       	add	r18, r18
    396e:	33 1f       	adc	r19, r19
    3970:	44 1f       	adc	r20, r20
    3972:	55 1f       	adc	r21, r21
    3974:	8a 95       	dec	r24
    3976:	d2 f7       	brpl	.-12     	; 0x396c <layer_on+0xa>
    3978:	80 91 88 01 	lds	r24, 0x0188
    397c:	90 91 89 01 	lds	r25, 0x0189
    3980:	a0 91 8a 01 	lds	r26, 0x018A
    3984:	b0 91 8b 01 	lds	r27, 0x018B
    3988:	28 2b       	or	r18, r24
    398a:	39 2b       	or	r19, r25
    398c:	4a 2b       	or	r20, r26
    398e:	5b 2b       	or	r21, r27
    3990:	ca 01       	movw	r24, r20
    3992:	b9 01       	movw	r22, r18
    3994:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    3998:	08 95       	ret

0000399a <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    399a:	21 e0       	ldi	r18, 0x01	; 1
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	04 c0       	rjmp	.+8      	; 0x39ac <layer_move+0x12>
    39a4:	22 0f       	add	r18, r18
    39a6:	33 1f       	adc	r19, r19
    39a8:	44 1f       	adc	r20, r20
    39aa:	55 1f       	adc	r21, r21
    39ac:	8a 95       	dec	r24
    39ae:	d2 f7       	brpl	.-12     	; 0x39a4 <layer_move+0xa>
    39b0:	ca 01       	movw	r24, r20
    39b2:	b9 01       	movw	r22, r18
    39b4:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    39b8:	08 95       	ret

000039ba <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    39ba:	60 e0       	ldi	r22, 0x00	; 0
    39bc:	70 e0       	ldi	r23, 0x00	; 0
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	0e 94 35 1c 	call	0x386a	; 0x386a <layer_state_set>
}
    39c6:	08 95       	ret

000039c8 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    39c8:	60 93 84 01 	sts	0x0184, r22
    39cc:	70 93 85 01 	sts	0x0185, r23
    39d0:	80 93 86 01 	sts	0x0186, r24
    39d4:	90 93 87 01 	sts	0x0187, r25
    hook_default_layer_change(default_layer_state);
    39d8:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    39dc:	0e 94 aa 13 	call	0x2754	; 0x2754 <clear_keyboard_but_mods>
}
    39e0:	08 95       	ret

000039e2 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    39e2:	9b 01       	movw	r18, r22
    39e4:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state ^ state);
    39e6:	60 91 84 01 	lds	r22, 0x0184
    39ea:	70 91 85 01 	lds	r23, 0x0185
    39ee:	80 91 86 01 	lds	r24, 0x0186
    39f2:	90 91 87 01 	lds	r25, 0x0187
    39f6:	62 27       	eor	r22, r18
    39f8:	73 27       	eor	r23, r19
    39fa:	84 27       	eor	r24, r20
    39fc:	95 27       	eor	r25, r21
    39fe:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <default_layer_state_set>
}
    3a02:	08 95       	ret

00003a04 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3a04:	9b 01       	movw	r18, r22
    3a06:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state & state);
    3a08:	60 91 84 01 	lds	r22, 0x0184
    3a0c:	70 91 85 01 	lds	r23, 0x0185
    3a10:	80 91 86 01 	lds	r24, 0x0186
    3a14:	90 91 87 01 	lds	r25, 0x0187
    3a18:	62 23       	and	r22, r18
    3a1a:	73 23       	and	r23, r19
    3a1c:	84 23       	and	r24, r20
    3a1e:	95 23       	and	r25, r21
    3a20:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <default_layer_state_set>
}
    3a24:	08 95       	ret

00003a26 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3a26:	9b 01       	movw	r18, r22
    3a28:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state | state);
    3a2a:	60 91 84 01 	lds	r22, 0x0184
    3a2e:	70 91 85 01 	lds	r23, 0x0185
    3a32:	80 91 86 01 	lds	r24, 0x0186
    3a36:	90 91 87 01 	lds	r25, 0x0187
    3a3a:	62 2b       	or	r22, r18
    3a3c:	73 2b       	or	r23, r19
    3a3e:	84 2b       	or	r24, r20
    3a40:	95 2b       	or	r25, r21
    3a42:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <default_layer_state_set>
}
    3a46:	08 95       	ret

00003a48 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3a48:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <default_layer_state_set>
}
    3a4c:	08 95       	ret

00003a4e <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3a52:	e0 91 0d 01 	lds	r30, 0x010D
    3a56:	f0 91 0e 01 	lds	r31, 0x010E
    3a5a:	e8 0f       	add	r30, r24
    3a5c:	f9 1f       	adc	r31, r25
    3a5e:	10 82       	st	Z, r1
    3a60:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a62:	80 31       	cpi	r24, 0x10	; 16
    3a64:	91 05       	cpc	r25, r1
    3a66:	a9 f7       	brne	.-22     	; 0x3a52 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3a68:	08 95       	ret

00003a6a <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3a6a:	80 91 9c 01 	lds	r24, 0x019C
    3a6e:	08 95       	ret

00003a70 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3a70:	90 91 9c 01 	lds	r25, 0x019C
    3a74:	98 2b       	or	r25, r24
    3a76:	90 93 9c 01 	sts	0x019C, r25
    3a7a:	08 95       	ret

00003a7c <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3a7c:	80 95       	com	r24
    3a7e:	90 91 9c 01 	lds	r25, 0x019C
    3a82:	98 23       	and	r25, r24
    3a84:	90 93 9c 01 	sts	0x019C, r25
    3a88:	08 95       	ret

00003a8a <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3a8a:	80 93 9c 01 	sts	0x019C, r24
    3a8e:	08 95       	ret

00003a90 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3a90:	10 92 9c 01 	sts	0x019C, r1
    3a94:	08 95       	ret

00003a96 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3a96:	90 91 9e 01 	lds	r25, 0x019E
    3a9a:	98 2b       	or	r25, r24
    3a9c:	90 93 9e 01 	sts	0x019E, r25
    3aa0:	08 95       	ret

00003aa2 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3aa2:	80 95       	com	r24
    3aa4:	90 91 9e 01 	lds	r25, 0x019E
    3aa8:	98 23       	and	r25, r24
    3aaa:	90 93 9e 01 	sts	0x019E, r25
    3aae:	08 95       	ret

00003ab0 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3ab0:	10 92 9e 01 	sts	0x019E, r1
    3ab4:	08 95       	ret

00003ab6 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3ab6:	80 93 9d 01 	sts	0x019D, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3aba:	08 95       	ret

00003abc <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3abc:	10 92 9d 01 	sts	0x019D, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3ac0:	08 95       	ret

00003ac2 <has_anykey>:

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    3ac2:	e0 91 0d 01 	lds	r30, 0x010D
    3ac6:	f0 91 0e 01 	lds	r31, 0x010E
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	91 e0       	ldi	r25, 0x01	; 1
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3ace:	81 81       	ldd	r24, Z+1	; 0x01
    3ad0:	81 11       	cpse	r24, r1
            cnt++;
    3ad2:	2f 5f       	subi	r18, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3ad4:	9f 5f       	subi	r25, 0xFF	; 255
    3ad6:	31 96       	adiw	r30, 0x01	; 1
    3ad8:	90 31       	cpi	r25, 0x10	; 16
    3ada:	c9 f7       	brne	.-14     	; 0x3ace <has_anykey+0xc>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3adc:	82 2f       	mov	r24, r18
    3ade:	08 95       	ret

00003ae0 <del_key>:
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
{
    3ae0:	48 2f       	mov	r20, r24
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3ae2:	80 91 01 01 	lds	r24, 0x0101
    3ae6:	88 23       	and	r24, r24
    3ae8:	b9 f1       	breq	.+110    	; 0x3b58 <del_key+0x78>
    3aea:	80 91 0c 01 	lds	r24, 0x010C
    3aee:	88 23       	and	r24, r24
    3af0:	99 f1       	breq	.+102    	; 0x3b58 <del_key+0x78>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3af2:	84 2f       	mov	r24, r20
    3af4:	86 95       	lsr	r24
    3af6:	86 95       	lsr	r24
    3af8:	86 95       	lsr	r24
    3afa:	8f 30       	cpi	r24, 0x0F	; 15
    3afc:	98 f4       	brcc	.+38     	; 0x3b24 <del_key+0x44>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3afe:	e0 91 0d 01 	lds	r30, 0x010D
    3b02:	f0 91 0e 01 	lds	r31, 0x010E
    3b06:	e8 0f       	add	r30, r24
    3b08:	f1 1d       	adc	r31, r1
    3b0a:	47 70       	andi	r20, 0x07	; 7
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <del_key+0x36>
    3b12:	88 0f       	add	r24, r24
    3b14:	99 1f       	adc	r25, r25
    3b16:	4a 95       	dec	r20
    3b18:	e2 f7       	brpl	.-8      	; 0x3b12 <del_key+0x32>
    3b1a:	80 95       	com	r24
    3b1c:	21 81       	ldd	r18, Z+1	; 0x01
    3b1e:	82 23       	and	r24, r18
    3b20:	81 83       	std	Z+1, r24	; 0x01
    3b22:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3b24:	80 91 9f 01 	lds	r24, 0x019F
    3b28:	80 ff       	sbrs	r24, 0
    3b2a:	27 c0       	rjmp	.+78     	; 0x3b7a <del_key+0x9a>
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <del_key+0x4e>
    3b2e:	00 d0       	rcall	.+0      	; 0x3b30 <del_key+0x50>
    3b30:	ed b7       	in	r30, 0x3d	; 61
    3b32:	fe b7       	in	r31, 0x3e	; 62
    3b34:	31 96       	adiw	r30, 0x01	; 1
    3b36:	8f e7       	ldi	r24, 0x7F	; 127
    3b38:	95 e0       	ldi	r25, 0x05	; 5
    3b3a:	ad b7       	in	r26, 0x3d	; 61
    3b3c:	be b7       	in	r27, 0x3e	; 62
    3b3e:	12 96       	adiw	r26, 0x02	; 2
    3b40:	9c 93       	st	X, r25
    3b42:	8e 93       	st	-X, r24
    3b44:	11 97       	sbiw	r26, 0x01	; 1
    3b46:	42 83       	std	Z+2, r20	; 0x02
    3b48:	13 82       	std	Z+3, r1	; 0x03
    3b4a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	08 95       	ret
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3b5c:	e0 91 0d 01 	lds	r30, 0x010D
    3b60:	f0 91 0e 01 	lds	r31, 0x010E
    3b64:	e2 0f       	add	r30, r18
    3b66:	f3 1f       	adc	r31, r19
    3b68:	82 81       	ldd	r24, Z+2	; 0x02
    3b6a:	84 17       	cp	r24, r20
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <del_key+0x90>
            keyboard_report->keys[i] = 0;
    3b6e:	12 82       	std	Z+2, r1	; 0x02
    3b70:	2f 5f       	subi	r18, 0xFF	; 255
    3b72:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3b74:	2e 30       	cpi	r18, 0x0E	; 14
    3b76:	31 05       	cpc	r19, r1
    3b78:	89 f7       	brne	.-30     	; 0x3b5c <del_key+0x7c>
    3b7a:	08 95       	ret

00003b7c <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    3b7c:	38 2f       	mov	r19, r24
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3b7e:	80 91 01 01 	lds	r24, 0x0101
    3b82:	88 23       	and	r24, r24
    3b84:	b1 f1       	breq	.+108    	; 0x3bf2 <add_key+0x76>
    3b86:	80 91 0c 01 	lds	r24, 0x010C
    3b8a:	88 23       	and	r24, r24
    3b8c:	91 f1       	breq	.+100    	; 0x3bf2 <add_key+0x76>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3b8e:	83 2f       	mov	r24, r19
    3b90:	86 95       	lsr	r24
    3b92:	86 95       	lsr	r24
    3b94:	86 95       	lsr	r24
    3b96:	8f 30       	cpi	r24, 0x0F	; 15
    3b98:	90 f4       	brcc	.+36     	; 0x3bbe <add_key+0x42>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3b9a:	e0 91 0d 01 	lds	r30, 0x010D
    3b9e:	f0 91 0e 01 	lds	r31, 0x010E
    3ba2:	e8 0f       	add	r30, r24
    3ba4:	f1 1d       	adc	r31, r1
    3ba6:	37 70       	andi	r19, 0x07	; 7
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <add_key+0x36>
    3bae:	88 0f       	add	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	3a 95       	dec	r19
    3bb4:	e2 f7       	brpl	.-8      	; 0x3bae <add_key+0x32>
    3bb6:	21 81       	ldd	r18, Z+1	; 0x01
    3bb8:	28 2b       	or	r18, r24
    3bba:	21 83       	std	Z+1, r18	; 0x01
    3bbc:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3bbe:	80 91 9f 01 	lds	r24, 0x019F
    3bc2:	80 ff       	sbrs	r24, 0
    3bc4:	32 c0       	rjmp	.+100    	; 0x3c2a <add_key+0xae>
    3bc6:	00 d0       	rcall	.+0      	; 0x3bc8 <add_key+0x4c>
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <add_key+0x4e>
    3bca:	ed b7       	in	r30, 0x3d	; 61
    3bcc:	fe b7       	in	r31, 0x3e	; 62
    3bce:	31 96       	adiw	r30, 0x01	; 1
    3bd0:	8d e9       	ldi	r24, 0x9D	; 157
    3bd2:	95 e0       	ldi	r25, 0x05	; 5
    3bd4:	ad b7       	in	r26, 0x3d	; 61
    3bd6:	be b7       	in	r27, 0x3e	; 62
    3bd8:	12 96       	adiw	r26, 0x02	; 2
    3bda:	9c 93       	st	X, r25
    3bdc:	8e 93       	st	-X, r24
    3bde:	11 97       	sbiw	r26, 0x01	; 1
    3be0:	32 83       	std	Z+2, r19	; 0x02
    3be2:	13 82       	std	Z+3, r1	; 0x03
    3be4:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    3be8:	0f 90       	pop	r0
    3bea:	0f 90       	pop	r0
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3bf2:	a0 91 0d 01 	lds	r26, 0x010D
    3bf6:	b0 91 0e 01 	lds	r27, 0x010E
    3bfa:	fd 01       	movw	r30, r26
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	8f ef       	ldi	r24, 0xFF	; 255
    3c00:	92 81       	ldd	r25, Z+2	; 0x02
    3c02:	93 17       	cp	r25, r19
    3c04:	91 f0       	breq	.+36     	; 0x3c2a <add_key+0xae>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3c06:	8f 3f       	cpi	r24, 0xFF	; 255
    3c08:	19 f4       	brne	.+6      	; 0x3c10 <add_key+0x94>
    3c0a:	99 23       	and	r25, r25
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <add_key+0x94>
    3c0e:	82 2f       	mov	r24, r18
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3c10:	2f 5f       	subi	r18, 0xFF	; 255
    3c12:	31 96       	adiw	r30, 0x01	; 1
    3c14:	2e 30       	cpi	r18, 0x0E	; 14
    3c16:	a1 f7       	brne	.-24     	; 0x3c00 <add_key+0x84>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3c18:	8f 3f       	cpi	r24, 0xFF	; 255
    3c1a:	39 f0       	breq	.+14     	; 0x3c2a <add_key+0xae>
            keyboard_report->keys[empty] = code;
    3c1c:	99 27       	eor	r25, r25
    3c1e:	87 fd       	sbrc	r24, 7
    3c20:	90 95       	com	r25
    3c22:	a8 0f       	add	r26, r24
    3c24:	b9 1f       	adc	r27, r25
    3c26:	12 96       	adiw	r26, 0x02	; 2
    3c28:	3c 93       	st	X, r19
    3c2a:	08 95       	ret

00003c2c <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3c2c:	e0 91 0d 01 	lds	r30, 0x010D
    3c30:	f0 91 0e 01 	lds	r31, 0x010E
    3c34:	80 91 9c 01 	lds	r24, 0x019C
    3c38:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3c3a:	e0 91 0d 01 	lds	r30, 0x010D
    3c3e:	f0 91 0e 01 	lds	r31, 0x010E
    3c42:	80 81       	ld	r24, Z
    3c44:	90 91 9e 01 	lds	r25, 0x019E
    3c48:	89 2b       	or	r24, r25
    3c4a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3c4c:	90 91 9d 01 	lds	r25, 0x019D
    3c50:	99 23       	and	r25, r25
    3c52:	69 f0       	breq	.+26     	; 0x3c6e <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3c54:	e0 91 0d 01 	lds	r30, 0x010D
    3c58:	f0 91 0e 01 	lds	r31, 0x010E
    3c5c:	80 81       	ld	r24, Z
    3c5e:	89 2b       	or	r24, r25
    3c60:	80 83       	st	Z, r24
        if (has_anykey()) {
    3c62:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <has_anykey>
    3c66:	88 23       	and	r24, r24
    3c68:	11 f0       	breq	.+4      	; 0x3c6e <send_keyboard_report+0x42>
            clear_oneshot_mods();
    3c6a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3c6e:	80 91 0d 01 	lds	r24, 0x010D
    3c72:	90 91 0e 01 	lds	r25, 0x010E
    3c76:	0e 94 29 12 	call	0x2452	; 0x2452 <host_keyboard_send>
}
    3c7a:	08 95       	ret

00003c7c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3c7c:	90 93 17 01 	sts	0x0117, r25
    3c80:	80 93 16 01 	sts	0x0116, r24
}
    3c84:	08 95       	ret

00003c86 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3c86:	28 2f       	mov	r18, r24
    3c88:	22 95       	swap	r18
    3c8a:	2f 70       	andi	r18, 0x0F	; 15
    3c8c:	82 95       	swap	r24
    3c8e:	80 7f       	andi	r24, 0xF0	; 240
    3c90:	28 2b       	or	r18, r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	c9 01       	movw	r24, r18
    3c96:	8c 7c       	andi	r24, 0xCC	; 204
    3c98:	90 70       	andi	r25, 0x00	; 0
    3c9a:	95 95       	asr	r25
    3c9c:	87 95       	ror	r24
    3c9e:	95 95       	asr	r25
    3ca0:	87 95       	ror	r24
    3ca2:	23 73       	andi	r18, 0x33	; 51
    3ca4:	30 70       	andi	r19, 0x00	; 0
    3ca6:	22 0f       	add	r18, r18
    3ca8:	33 1f       	adc	r19, r19
    3caa:	22 0f       	add	r18, r18
    3cac:	33 1f       	adc	r19, r19
    3cae:	82 2b       	or	r24, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3cb0:	28 2f       	mov	r18, r24
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	c9 01       	movw	r24, r18
    3cb6:	8a 7a       	andi	r24, 0xAA	; 170
    3cb8:	90 70       	andi	r25, 0x00	; 0
    3cba:	95 95       	asr	r25
    3cbc:	87 95       	ror	r24
    3cbe:	25 75       	andi	r18, 0x55	; 85
    3cc0:	30 70       	andi	r19, 0x00	; 0
    3cc2:	22 0f       	add	r18, r18
    3cc4:	33 1f       	adc	r19, r19
    return bits;
}
    3cc6:	82 2b       	or	r24, r18
    3cc8:	08 95       	ret

00003cca <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	19 2f       	mov	r17, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3cd0:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <bitrev>
    3cd4:	08 2f       	mov	r16, r24
    3cd6:	81 2f       	mov	r24, r17
    3cd8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <bitrev>
    3cdc:	50 2f       	mov	r21, r16
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	28 2f       	mov	r18, r24
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	24 2b       	or	r18, r20
    3ce6:	35 2b       	or	r19, r21
    return bits;
}
    3ce8:	c9 01       	movw	r24, r18
    3cea:	1f 91       	pop	r17
    3cec:	0f 91       	pop	r16
    3cee:	08 95       	ret

00003cf0 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3cf0:	08 95       	ret

00003cf2 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	00 d0       	rcall	.+0      	; 0x3cf8 <hook_matrix_change+0x6>
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <hook_matrix_change+0x8>
    3cfa:	0f 92       	push	r0
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	08 95       	ret

00003d10 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    3d10:	08 95       	ret

00003d12 <hook_layer_change>:

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    (void)layer_state;
}
    3d12:	08 95       	ret

00003d14 <hook_bootmagic>:
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3d14:	08 95       	ret

00003d16 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3d16:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keyboard_set_leds>
}
    3d1a:	08 95       	ret

00003d1c <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3d1c:	80 91 b4 01 	lds	r24, 0x01B4
    3d20:	84 30       	cpi	r24, 0x04	; 4
    3d22:	09 f1       	breq	.+66     	; 0x3d66 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3d24:	10 92 a0 01 	sts	0x01A0, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3d28:	20 e4       	ldi	r18, 0x40	; 64
    3d2a:	88 e1       	ldi	r24, 0x18	; 24
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	a8 95       	wdr
    3d34:	80 93 60 00 	sts	0x0060, r24
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3d3e:	83 b7       	in	r24, 0x33	; 51
    3d40:	81 7f       	andi	r24, 0xF1	; 241
    3d42:	84 60       	ori	r24, 0x04	; 4
    3d44:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3d46:	83 b7       	in	r24, 0x33	; 51
    3d48:	81 60       	ori	r24, 0x01	; 1
    3d4a:	83 bf       	out	0x33, r24	; 51
    sei();
    3d4c:	78 94       	sei
    sleep_cpu();
    3d4e:	88 95       	sleep
    sleep_disable();
    3d50:	83 b7       	in	r24, 0x33	; 51
    3d52:	8e 7f       	andi	r24, 0xFE	; 254
    3d54:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3d56:	88 e1       	ldi	r24, 0x18	; 24
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	80 93 60 00 	sts	0x0060, r24
    3d60:	10 92 60 00 	sts	0x0060, r1
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	08 95       	ret

00003d68 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3d68:	08 95       	ret

00003d6a <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3d6a:	08 95       	ret

00003d6c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3d6c:	1f 92       	push	r1
    3d6e:	0f 92       	push	r0
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	0f 92       	push	r0
    3d74:	11 24       	eor	r1, r1
    3d76:	8f 93       	push	r24
    3d78:	9f 93       	push	r25
    3d7a:	af 93       	push	r26
    3d7c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3d7e:	80 91 a0 01 	lds	r24, 0x01A0
    3d82:	88 23       	and	r24, r24
    3d84:	99 f4       	brne	.+38     	; 0x3dac <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3d86:	80 91 a1 01 	lds	r24, 0x01A1
    3d8a:	90 91 a2 01 	lds	r25, 0x01A2
    3d8e:	a0 91 a3 01 	lds	r26, 0x01A3
    3d92:	b0 91 a4 01 	lds	r27, 0x01A4
    3d96:	41 96       	adiw	r24, 0x11	; 17
    3d98:	a1 1d       	adc	r26, r1
    3d9a:	b1 1d       	adc	r27, r1
    3d9c:	80 93 a1 01 	sts	0x01A1, r24
    3da0:	90 93 a2 01 	sts	0x01A2, r25
    3da4:	a0 93 a3 01 	sts	0x01A3, r26
    3da8:	b0 93 a4 01 	sts	0x01A4, r27
            break;
        default:
            ;
    }
}
    3dac:	bf 91       	pop	r27
    3dae:	af 91       	pop	r26
    3db0:	9f 91       	pop	r25
    3db2:	8f 91       	pop	r24
    3db4:	0f 90       	pop	r0
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	0f 90       	pop	r0
    3dba:	1f 90       	pop	r1
    3dbc:	18 95       	reti

00003dbe <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3dbe:	0e 94 bd 13 	call	0x277a	; 0x277a <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    3dc2:	08 95       	ret

00003dc4 <suspend_wakeup_condition>:

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    3dc4:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <matrix_power_up>
    matrix_scan();
    3dc8:	0e 94 00 08 	call	0x1000	; 0x1000 <matrix_scan>
    matrix_power_down();
    3dcc:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <matrix_get_row>
    3dd6:	89 2b       	or	r24, r25
    3dd8:	81 f4       	brne	.+32     	; 0x3dfa <suspend_wakeup_condition+0x36>
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <matrix_get_row>
    3de0:	89 2b       	or	r24, r25
    3de2:	59 f4       	brne	.+22     	; 0x3dfa <suspend_wakeup_condition+0x36>
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <matrix_get_row>
    3dea:	89 2b       	or	r24, r25
    3dec:	31 f4       	brne	.+12     	; 0x3dfa <suspend_wakeup_condition+0x36>
    3dee:	83 e0       	ldi	r24, 0x03	; 3
    3df0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <matrix_get_row>
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	89 2b       	or	r24, r25
    3df8:	09 f0       	breq	.+2      	; 0x3dfc <suspend_wakeup_condition+0x38>
    3dfa:	21 e0       	ldi	r18, 0x01	; 1
    }
    return false;
}
    3dfc:	82 2f       	mov	r24, r18
    3dfe:	08 95       	ret

00003e00 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3e00:	82 e0       	ldi	r24, 0x02	; 2
    3e02:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3e04:	93 e0       	ldi	r25, 0x03	; 3
    3e06:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3e08:	9a ef       	ldi	r25, 0xFA	; 250
    3e0a:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3e0c:	80 93 6e 00 	sts	0x006E, r24
}
    3e10:	08 95       	ret

00003e12 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3e12:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3e14:	f8 94       	cli
    t = timer_count;
    3e16:	20 91 a1 01 	lds	r18, 0x01A1
    3e1a:	30 91 a2 01 	lds	r19, 0x01A2
    3e1e:	40 91 a3 01 	lds	r20, 0x01A3
    3e22:	50 91 a4 01 	lds	r21, 0x01A4
    SREG = sreg;
    3e26:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    3e28:	c9 01       	movw	r24, r18
    3e2a:	08 95       	ret

00003e2c <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3e2c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3e2e:	f8 94       	cli
    t = timer_count;
    3e30:	20 91 a1 01 	lds	r18, 0x01A1
    3e34:	30 91 a2 01 	lds	r19, 0x01A2
    3e38:	40 91 a3 01 	lds	r20, 0x01A3
    3e3c:	50 91 a4 01 	lds	r21, 0x01A4
    SREG = sreg;
    3e40:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    3e42:	b9 01       	movw	r22, r18
    3e44:	ca 01       	movw	r24, r20
    3e46:	08 95       	ret

00003e48 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3e48:	ef 92       	push	r14
    3e4a:	ff 92       	push	r15
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	bc 01       	movw	r22, r24
    uint32_t t;

    uint8_t sreg = SREG;
    3e52:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3e54:	f8 94       	cli
    t = timer_count;
    3e56:	e0 90 a1 01 	lds	r14, 0x01A1
    3e5a:	f0 90 a2 01 	lds	r15, 0x01A2
    3e5e:	00 91 a3 01 	lds	r16, 0x01A3
    3e62:	10 91 a4 01 	lds	r17, 0x01A4
    SREG = sreg;
    3e66:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3e68:	a8 01       	movw	r20, r16
    3e6a:	97 01       	movw	r18, r14
    3e6c:	40 70       	andi	r20, 0x00	; 0
    3e6e:	50 70       	andi	r21, 0x00	; 0
    3e70:	cb 01       	movw	r24, r22
    3e72:	a0 e0       	ldi	r26, 0x00	; 0
    3e74:	b0 e0       	ldi	r27, 0x00	; 0
    3e76:	28 17       	cp	r18, r24
    3e78:	39 07       	cpc	r19, r25
    3e7a:	4a 07       	cpc	r20, r26
    3e7c:	5b 07       	cpc	r21, r27
    3e7e:	20 f0       	brcs	.+8      	; 0x3e88 <timer_elapsed+0x40>
    3e80:	97 01       	movw	r18, r14
    3e82:	26 1b       	sub	r18, r22
    3e84:	37 0b       	sbc	r19, r23
    3e86:	05 c0       	rjmp	.+10     	; 0x3e92 <timer_elapsed+0x4a>
    3e88:	9b 01       	movw	r18, r22
    3e8a:	20 95       	com	r18
    3e8c:	30 95       	com	r19
    3e8e:	2e 0d       	add	r18, r14
    3e90:	3f 1d       	adc	r19, r15
}
    3e92:	c9 01       	movw	r24, r18
    3e94:	1f 91       	pop	r17
    3e96:	0f 91       	pop	r16
    3e98:	ff 90       	pop	r15
    3e9a:	ef 90       	pop	r14
    3e9c:	08 95       	ret

00003e9e <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3e9e:	1f 92       	push	r1
    3ea0:	0f 92       	push	r0
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	0f 92       	push	r0
    3ea6:	11 24       	eor	r1, r1
    3ea8:	8f 93       	push	r24
    3eaa:	9f 93       	push	r25
    3eac:	af 93       	push	r26
    3eae:	bf 93       	push	r27
    timer_count++;
    3eb0:	80 91 a1 01 	lds	r24, 0x01A1
    3eb4:	90 91 a2 01 	lds	r25, 0x01A2
    3eb8:	a0 91 a3 01 	lds	r26, 0x01A3
    3ebc:	b0 91 a4 01 	lds	r27, 0x01A4
    3ec0:	01 96       	adiw	r24, 0x01	; 1
    3ec2:	a1 1d       	adc	r26, r1
    3ec4:	b1 1d       	adc	r27, r1
    3ec6:	80 93 a1 01 	sts	0x01A1, r24
    3eca:	90 93 a2 01 	sts	0x01A2, r25
    3ece:	a0 93 a3 01 	sts	0x01A3, r26
    3ed2:	b0 93 a4 01 	sts	0x01A4, r27
}
    3ed6:	bf 91       	pop	r27
    3ed8:	af 91       	pop	r26
    3eda:	9f 91       	pop	r25
    3edc:	8f 91       	pop	r24
    3ede:	0f 90       	pop	r0
    3ee0:	0f be       	out	0x3f, r0	; 63
    3ee2:	0f 90       	pop	r0
    3ee4:	1f 90       	pop	r1
    3ee6:	18 95       	reti

00003ee8 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3ee8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <USB_Disable>
    cli();
    3eec:	f8 94       	cli
    3eee:	80 e2       	ldi	r24, 0x20	; 32
    3ef0:	9e e4       	ldi	r25, 0x4E	; 78
    3ef2:	20 e9       	ldi	r18, 0x90	; 144
    3ef4:	31 e0       	ldi	r19, 0x01	; 1
    3ef6:	f9 01       	movw	r30, r18
    3ef8:	31 97       	sbiw	r30, 0x01	; 1
    3efa:	f1 f7       	brne	.-4      	; 0x3ef8 <bootloader_jump+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efe:	d9 f7       	brne	.-10     	; 0x3ef6 <bootloader_jump+0xe>
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3f00:	87 e0       	ldi	r24, 0x07	; 7
    3f02:	90 eb       	ldi	r25, 0xB0	; 176
    3f04:	a7 e0       	ldi	r26, 0x07	; 7
    3f06:	b0 eb       	ldi	r27, 0xB0	; 176
    3f08:	80 93 be 01 	sts	0x01BE, r24
    3f0c:	90 93 bf 01 	sts	0x01BF, r25
    3f10:	a0 93 c0 01 	sts	0x01C0, r26
    3f14:	b0 93 c1 01 	sts	0x01C1, r27
    wdt_enable(WDTO_250MS);
    3f18:	2c e0       	ldi	r18, 0x0C	; 12
    3f1a:	88 e1       	ldi	r24, 0x18	; 24
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	f8 94       	cli
    3f22:	a8 95       	wdr
    3f24:	80 93 60 00 	sts	0x0060, r24
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	20 93 60 00 	sts	0x0060, r18
    3f2e:	ff cf       	rjmp	.-2      	; 0x3f2e <bootloader_jump+0x46>

00003f30 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	08 95       	ret

00003f36 <action_function>:
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    (void)record;
    (void)id;
    (void)opt;
}
    3f36:	08 95       	ret

00003f38 <keycode_to_action>:



/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	28 2f       	mov	r18, r24
    action_t action = {};
    3f3e:	c0 e0       	ldi	r28, 0x00	; 0
    3f40:	d0 e0       	ldi	r29, 0x00	; 0
    switch (keycode) {
    3f42:	8d 3b       	cpi	r24, 0xBD	; 189
    3f44:	50 f4       	brcc	.+20     	; 0x3f5a <keycode_to_action+0x22>
    3f46:	88 3a       	cpi	r24, 0xA8	; 168
    3f48:	28 f5       	brcc	.+74     	; 0x3f94 <keycode_to_action+0x5c>
    3f4a:	85 3a       	cpi	r24, 0xA5	; 165
    3f4c:	b0 f4       	brcc	.+44     	; 0x3f7a <keycode_to_action+0x42>
    3f4e:	84 30       	cpi	r24, 0x04	; 4
    3f50:	80 f4       	brcc	.+32     	; 0x3f72 <keycode_to_action+0x3a>
    3f52:	81 30       	cpi	r24, 0x01	; 1
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <keycode_to_action+0x20>
    3f56:	a0 c0       	rjmp	.+320    	; 0x4098 <keycode_to_action+0x160>
    3f58:	8e c0       	rjmp	.+284    	; 0x4076 <keycode_to_action+0x13e>
    3f5a:	88 3e       	cpi	r24, 0xE8	; 232
    3f5c:	30 f4       	brcc	.+12     	; 0x3f6a <keycode_to_action+0x32>
    3f5e:	80 3e       	cpi	r24, 0xE0	; 224
    3f60:	40 f4       	brcc	.+16     	; 0x3f72 <keycode_to_action+0x3a>
    3f62:	8f 3b       	cpi	r24, 0xBF	; 191
    3f64:	09 f0       	breq	.+2      	; 0x3f68 <keycode_to_action+0x30>
    3f66:	98 c0       	rjmp	.+304    	; 0x4098 <keycode_to_action+0x160>
    3f68:	89 c0       	rjmp	.+274    	; 0x407c <keycode_to_action+0x144>
    3f6a:	80 3f       	cpi	r24, 0xF0	; 240
    3f6c:	08 f4       	brcc	.+2      	; 0x3f70 <keycode_to_action+0x38>
    3f6e:	94 c0       	rjmp	.+296    	; 0x4098 <keycode_to_action+0x160>
    3f70:	7e c0       	rjmp	.+252    	; 0x406e <keycode_to_action+0x136>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3f72:	82 2f       	mov	r24, r18
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	9c 01       	movw	r18, r24
    3f78:	78 c0       	rjmp	.+240    	; 0x406a <keycode_to_action+0x132>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3f7a:	85 3a       	cpi	r24, 0xA5	; 165
    3f7c:	19 f4       	brne	.+6      	; 0x3f84 <keycode_to_action+0x4c>
    3f7e:	21 e8       	ldi	r18, 0x81	; 129
    3f80:	30 e4       	ldi	r19, 0x40	; 64
    3f82:	73 c0       	rjmp	.+230    	; 0x406a <keycode_to_action+0x132>
    3f84:	86 3a       	cpi	r24, 0xA6	; 166
    3f86:	19 f0       	breq	.+6      	; 0x3f8e <keycode_to_action+0x56>
    3f88:	23 e8       	ldi	r18, 0x83	; 131
    3f8a:	30 e4       	ldi	r19, 0x40	; 64
    3f8c:	6e c0       	rjmp	.+220    	; 0x406a <keycode_to_action+0x132>
    3f8e:	22 e8       	ldi	r18, 0x82	; 130
    3f90:	30 e4       	ldi	r19, 0x40	; 64
    3f92:	6b c0       	rjmp	.+214    	; 0x406a <keycode_to_action+0x132>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3f94:	88 3a       	cpi	r24, 0xA8	; 168
    3f96:	19 f4       	brne	.+6      	; 0x3f9e <keycode_to_action+0x66>
    3f98:	22 ee       	ldi	r18, 0xE2	; 226
    3f9a:	34 e4       	ldi	r19, 0x44	; 68
    3f9c:	66 c0       	rjmp	.+204    	; 0x406a <keycode_to_action+0x132>
    3f9e:	89 3a       	cpi	r24, 0xA9	; 169
    3fa0:	19 f4       	brne	.+6      	; 0x3fa8 <keycode_to_action+0x70>
    3fa2:	29 ee       	ldi	r18, 0xE9	; 233
    3fa4:	34 e4       	ldi	r19, 0x44	; 68
    3fa6:	61 c0       	rjmp	.+194    	; 0x406a <keycode_to_action+0x132>
    3fa8:	8a 3a       	cpi	r24, 0xAA	; 170
    3faa:	19 f4       	brne	.+6      	; 0x3fb2 <keycode_to_action+0x7a>
    3fac:	2a ee       	ldi	r18, 0xEA	; 234
    3fae:	34 e4       	ldi	r19, 0x44	; 68
    3fb0:	5c c0       	rjmp	.+184    	; 0x406a <keycode_to_action+0x132>
    3fb2:	8b 3a       	cpi	r24, 0xAB	; 171
    3fb4:	19 f4       	brne	.+6      	; 0x3fbc <keycode_to_action+0x84>
    3fb6:	25 eb       	ldi	r18, 0xB5	; 181
    3fb8:	34 e4       	ldi	r19, 0x44	; 68
    3fba:	57 c0       	rjmp	.+174    	; 0x406a <keycode_to_action+0x132>
    3fbc:	8c 3a       	cpi	r24, 0xAC	; 172
    3fbe:	19 f4       	brne	.+6      	; 0x3fc6 <keycode_to_action+0x8e>
    3fc0:	26 eb       	ldi	r18, 0xB6	; 182
    3fc2:	34 e4       	ldi	r19, 0x44	; 68
    3fc4:	52 c0       	rjmp	.+164    	; 0x406a <keycode_to_action+0x132>
    3fc6:	8d 3a       	cpi	r24, 0xAD	; 173
    3fc8:	19 f4       	brne	.+6      	; 0x3fd0 <keycode_to_action+0x98>
    3fca:	23 eb       	ldi	r18, 0xB3	; 179
    3fcc:	34 e4       	ldi	r19, 0x44	; 68
    3fce:	4d c0       	rjmp	.+154    	; 0x406a <keycode_to_action+0x132>
    3fd0:	8e 3a       	cpi	r24, 0xAE	; 174
    3fd2:	19 f4       	brne	.+6      	; 0x3fda <keycode_to_action+0xa2>
    3fd4:	24 eb       	ldi	r18, 0xB4	; 180
    3fd6:	34 e4       	ldi	r19, 0x44	; 68
    3fd8:	48 c0       	rjmp	.+144    	; 0x406a <keycode_to_action+0x132>
    3fda:	8f 3a       	cpi	r24, 0xAF	; 175
    3fdc:	19 f4       	brne	.+6      	; 0x3fe4 <keycode_to_action+0xac>
    3fde:	27 eb       	ldi	r18, 0xB7	; 183
    3fe0:	34 e4       	ldi	r19, 0x44	; 68
    3fe2:	43 c0       	rjmp	.+134    	; 0x406a <keycode_to_action+0x132>
    3fe4:	81 3b       	cpi	r24, 0xB1	; 177
    3fe6:	19 f4       	brne	.+6      	; 0x3fee <keycode_to_action+0xb6>
    3fe8:	2c ec       	ldi	r18, 0xCC	; 204
    3fea:	34 e4       	ldi	r19, 0x44	; 68
    3fec:	3e c0       	rjmp	.+124    	; 0x406a <keycode_to_action+0x132>
    3fee:	80 3b       	cpi	r24, 0xB0	; 176
    3ff0:	19 f4       	brne	.+6      	; 0x3ff8 <keycode_to_action+0xc0>
    3ff2:	2d ec       	ldi	r18, 0xCD	; 205
    3ff4:	34 e4       	ldi	r19, 0x44	; 68
    3ff6:	39 c0       	rjmp	.+114    	; 0x406a <keycode_to_action+0x132>
    3ff8:	82 3b       	cpi	r24, 0xB2	; 178
    3ffa:	19 f4       	brne	.+6      	; 0x4002 <keycode_to_action+0xca>
    3ffc:	23 e8       	ldi	r18, 0x83	; 131
    3ffe:	35 e4       	ldi	r19, 0x45	; 69
    4000:	34 c0       	rjmp	.+104    	; 0x406a <keycode_to_action+0x132>
    4002:	83 3b       	cpi	r24, 0xB3	; 179
    4004:	19 f4       	brne	.+6      	; 0x400c <keycode_to_action+0xd4>
    4006:	2a e8       	ldi	r18, 0x8A	; 138
    4008:	35 e4       	ldi	r19, 0x45	; 69
    400a:	2f c0       	rjmp	.+94     	; 0x406a <keycode_to_action+0x132>
    400c:	84 3b       	cpi	r24, 0xB4	; 180
    400e:	19 f4       	brne	.+6      	; 0x4016 <keycode_to_action+0xde>
    4010:	22 e9       	ldi	r18, 0x92	; 146
    4012:	35 e4       	ldi	r19, 0x45	; 69
    4014:	2a c0       	rjmp	.+84     	; 0x406a <keycode_to_action+0x132>
    4016:	85 3b       	cpi	r24, 0xB5	; 181
    4018:	19 f4       	brne	.+6      	; 0x4020 <keycode_to_action+0xe8>
    401a:	24 e9       	ldi	r18, 0x94	; 148
    401c:	35 e4       	ldi	r19, 0x45	; 69
    401e:	25 c0       	rjmp	.+74     	; 0x406a <keycode_to_action+0x132>
    4020:	86 3b       	cpi	r24, 0xB6	; 182
    4022:	19 f4       	brne	.+6      	; 0x402a <keycode_to_action+0xf2>
    4024:	21 e2       	ldi	r18, 0x21	; 33
    4026:	36 e4       	ldi	r19, 0x46	; 70
    4028:	20 c0       	rjmp	.+64     	; 0x406a <keycode_to_action+0x132>
    402a:	87 3b       	cpi	r24, 0xB7	; 183
    402c:	19 f4       	brne	.+6      	; 0x4034 <keycode_to_action+0xfc>
    402e:	23 e2       	ldi	r18, 0x23	; 35
    4030:	36 e4       	ldi	r19, 0x46	; 70
    4032:	1b c0       	rjmp	.+54     	; 0x406a <keycode_to_action+0x132>
    4034:	88 3b       	cpi	r24, 0xB8	; 184
    4036:	19 f4       	brne	.+6      	; 0x403e <keycode_to_action+0x106>
    4038:	24 e2       	ldi	r18, 0x24	; 36
    403a:	36 e4       	ldi	r19, 0x46	; 70
    403c:	16 c0       	rjmp	.+44     	; 0x406a <keycode_to_action+0x132>
    403e:	89 3b       	cpi	r24, 0xB9	; 185
    4040:	19 f4       	brne	.+6      	; 0x4048 <keycode_to_action+0x110>
    4042:	25 e2       	ldi	r18, 0x25	; 37
    4044:	36 e4       	ldi	r19, 0x46	; 70
    4046:	11 c0       	rjmp	.+34     	; 0x406a <keycode_to_action+0x132>
    4048:	8a 3b       	cpi	r24, 0xBA	; 186
    404a:	19 f4       	brne	.+6      	; 0x4052 <keycode_to_action+0x11a>
    404c:	26 e2       	ldi	r18, 0x26	; 38
    404e:	36 e4       	ldi	r19, 0x46	; 70
    4050:	0c c0       	rjmp	.+24     	; 0x406a <keycode_to_action+0x132>
    4052:	8b 3b       	cpi	r24, 0xBB	; 187
    4054:	19 f4       	brne	.+6      	; 0x405c <keycode_to_action+0x124>
    4056:	27 e2       	ldi	r18, 0x27	; 39
    4058:	36 e4       	ldi	r19, 0x46	; 70
    405a:	07 c0       	rjmp	.+14     	; 0x406a <keycode_to_action+0x132>
    405c:	8c 3b       	cpi	r24, 0xBC	; 188
    405e:	19 f0       	breq	.+6      	; 0x4066 <keycode_to_action+0x12e>
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	34 e4       	ldi	r19, 0x44	; 68
    4064:	02 c0       	rjmp	.+4      	; 0x406a <keycode_to_action+0x132>
    4066:	2a e2       	ldi	r18, 0x2A	; 42
    4068:	36 e4       	ldi	r19, 0x46	; 70
    406a:	e9 01       	movw	r28, r18
    406c:	17 c0       	rjmp	.+46     	; 0x409c <keycode_to_action+0x164>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    406e:	c8 2f       	mov	r28, r24
    4070:	d0 e0       	ldi	r29, 0x00	; 0
    4072:	d0 65       	ori	r29, 0x50	; 80
    4074:	13 c0       	rjmp	.+38     	; 0x409c <keycode_to_action+0x164>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    4076:	c1 e0       	ldi	r28, 0x01	; 1
    4078:	d0 e0       	ldi	r29, 0x00	; 0
    407a:	10 c0       	rjmp	.+32     	; 0x409c <keycode_to_action+0x164>
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    407c:	0e 94 bd 13 	call	0x277a	; 0x277a <clear_keyboard>
    4080:	84 ef       	ldi	r24, 0xF4	; 244
    4082:	91 e0       	ldi	r25, 0x01	; 1
    4084:	20 e9       	ldi	r18, 0x90	; 144
    4086:	31 e0       	ldi	r19, 0x01	; 1
    4088:	f9 01       	movw	r30, r18
    408a:	31 97       	sbiw	r30, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <keycode_to_action+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4090:	d9 f7       	brne	.-10     	; 0x4088 <keycode_to_action+0x150>
            wait_ms(50);
            bootloader_jump(); // not return
    4092:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <bootloader_jump>
    4096:	02 c0       	rjmp	.+4      	; 0x409c <keycode_to_action+0x164>
            break;
        default:
            action.code = ACTION_NO;
    4098:	c0 e0       	ldi	r28, 0x00	; 0
    409a:	d0 e0       	ldi	r29, 0x00	; 0
            break;
    }
    return action;
}
    409c:	ce 01       	movw	r24, r28
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	08 95       	ret

000040a4 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    40a4:	0e 94 aa 07 	call	0xf54	; 0xf54 <keymap_key_to_keycode>
    switch (keycode) {
    40a8:	80 3e       	cpi	r24, 0xE0	; 224
    40aa:	b0 f4       	brcc	.+44     	; 0x40d8 <action_for_key+0x34>
    40ac:	80 3c       	cpi	r24, 0xC0	; 192
    40ae:	20 f5       	brcc	.+72     	; 0x40f8 <action_for_key+0x54>
    40b0:	81 33       	cpi	r24, 0x31	; 49
    40b2:	09 f4       	brne	.+2      	; 0x40b6 <action_for_key+0x12>
    40b4:	60 c0       	rjmp	.+192    	; 0x4176 <action_for_key+0xd2>
    40b6:	82 33       	cpi	r24, 0x32	; 50
    40b8:	38 f4       	brcc	.+14     	; 0x40c8 <action_for_key+0x24>
    40ba:	89 32       	cpi	r24, 0x29	; 41
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <action_for_key+0x1c>
    40be:	53 c0       	rjmp	.+166    	; 0x4166 <action_for_key+0xc2>
    40c0:	8a 32       	cpi	r24, 0x2A	; 42
    40c2:	09 f0       	breq	.+2      	; 0x40c6 <action_for_key+0x22>
    40c4:	67 c0       	rjmp	.+206    	; 0x4194 <action_for_key+0xf0>
    40c6:	5c c0       	rjmp	.+184    	; 0x4180 <action_for_key+0xdc>
    40c8:	89 33       	cpi	r24, 0x39	; 57
    40ca:	c9 f0       	breq	.+50     	; 0x40fe <action_for_key+0x5a>
    40cc:	82 38       	cpi	r24, 0x82	; 130
    40ce:	b9 f0       	breq	.+46     	; 0x40fe <action_for_key+0x5a>
    40d0:	85 33       	cpi	r24, 0x35	; 53
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <action_for_key+0x32>
    40d4:	5f c0       	rjmp	.+190    	; 0x4194 <action_for_key+0xf0>
    40d6:	42 c0       	rjmp	.+132    	; 0x415c <action_for_key+0xb8>
    40d8:	83 3e       	cpi	r24, 0xE3	; 227
    40da:	29 f1       	breq	.+74     	; 0x4126 <action_for_key+0x82>
    40dc:	84 3e       	cpi	r24, 0xE4	; 228
    40de:	30 f4       	brcc	.+12     	; 0x40ec <action_for_key+0x48>
    40e0:	80 3e       	cpi	r24, 0xE0	; 224
    40e2:	a1 f0       	breq	.+40     	; 0x410c <action_for_key+0x68>
    40e4:	82 3e       	cpi	r24, 0xE2	; 226
    40e6:	09 f0       	breq	.+2      	; 0x40ea <action_for_key+0x46>
    40e8:	55 c0       	rjmp	.+170    	; 0x4194 <action_for_key+0xf0>
    40ea:	18 c0       	rjmp	.+48     	; 0x411c <action_for_key+0x78>
    40ec:	86 3e       	cpi	r24, 0xE6	; 230
    40ee:	29 f1       	breq	.+74     	; 0x413a <action_for_key+0x96>
    40f0:	87 3e       	cpi	r24, 0xE7	; 231
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <action_for_key+0x52>
    40f4:	4f c0       	rjmp	.+158    	; 0x4194 <action_for_key+0xf0>
    40f6:	26 c0       	rjmp	.+76     	; 0x4144 <action_for_key+0xa0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    40f8:	0e 94 bb 07 	call	0xf76	; 0xf76 <keymap_fn_to_action>
    40fc:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    40fe:	90 91 bd 01 	lds	r25, 0x01BD
    4102:	90 fd       	sbrc	r25, 0
    4104:	09 c0       	rjmp	.+18     	; 0x4118 <action_for_key+0x74>
    4106:	91 fd       	sbrc	r25, 1
    4108:	07 c0       	rjmp	.+14     	; 0x4118 <action_for_key+0x74>
    410a:	41 c0       	rjmp	.+130    	; 0x418e <action_for_key+0xea>
                return keycode_to_action(KC_LCTL);
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    410c:	80 91 bd 01 	lds	r24, 0x01BD
    4110:	80 ff       	sbrs	r24, 0
    4112:	02 c0       	rjmp	.+4      	; 0x4118 <action_for_key+0x74>
                return keycode_to_action(KC_CAPSLOCK);
    4114:	89 e3       	ldi	r24, 0x39	; 57
    4116:	3b c0       	rjmp	.+118    	; 0x418e <action_for_key+0xea>
            }
            return keycode_to_action(KC_LCTL);
    4118:	80 ee       	ldi	r24, 0xE0	; 224
    411a:	39 c0       	rjmp	.+114    	; 0x418e <action_for_key+0xea>
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    411c:	80 91 bd 01 	lds	r24, 0x01BD
    4120:	82 fd       	sbrc	r24, 2
    4122:	07 c0       	rjmp	.+14     	; 0x4132 <action_for_key+0x8e>
    4124:	04 c0       	rjmp	.+8      	; 0x412e <action_for_key+0x8a>
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    4126:	80 91 bd 01 	lds	r24, 0x01BD
    412a:	82 ff       	sbrs	r24, 2
    412c:	02 c0       	rjmp	.+4      	; 0x4132 <action_for_key+0x8e>
                return keycode_to_action(KC_LALT);
    412e:	82 ee       	ldi	r24, 0xE2	; 226
    4130:	2e c0       	rjmp	.+92     	; 0x418e <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    4132:	84 fd       	sbrc	r24, 4
    4134:	0f c0       	rjmp	.+30     	; 0x4154 <action_for_key+0xb0>
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
    4136:	83 ee       	ldi	r24, 0xE3	; 227
    4138:	2a c0       	rjmp	.+84     	; 0x418e <action_for_key+0xea>
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    413a:	80 91 bd 01 	lds	r24, 0x01BD
    413e:	83 fd       	sbrc	r24, 3
    4140:	07 c0       	rjmp	.+14     	; 0x4150 <action_for_key+0xac>
    4142:	04 c0       	rjmp	.+8      	; 0x414c <action_for_key+0xa8>
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    4144:	80 91 bd 01 	lds	r24, 0x01BD
    4148:	83 ff       	sbrs	r24, 3
    414a:	02 c0       	rjmp	.+4      	; 0x4150 <action_for_key+0xac>
                return keycode_to_action(KC_RALT);
    414c:	86 ee       	ldi	r24, 0xE6	; 230
    414e:	1f c0       	rjmp	.+62     	; 0x418e <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    4150:	84 ff       	sbrs	r24, 4
    4152:	02 c0       	rjmp	.+4      	; 0x4158 <action_for_key+0xb4>
                return keycode_to_action(ACTION_NO);
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	1b c0       	rjmp	.+54     	; 0x418e <action_for_key+0xea>
            }
            return keycode_to_action(KC_RGUI);
    4158:	87 ee       	ldi	r24, 0xE7	; 231
    415a:	19 c0       	rjmp	.+50     	; 0x418e <action_for_key+0xea>
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    415c:	80 91 bd 01 	lds	r24, 0x01BD
    4160:	85 ff       	sbrs	r24, 5
    4162:	05 c0       	rjmp	.+10     	; 0x416e <action_for_key+0xca>
    4164:	06 c0       	rjmp	.+12     	; 0x4172 <action_for_key+0xce>
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    4166:	80 91 bd 01 	lds	r24, 0x01BD
    416a:	85 ff       	sbrs	r24, 5
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <action_for_key+0xce>
                return keycode_to_action(KC_GRAVE);
    416e:	85 e3       	ldi	r24, 0x35	; 53
    4170:	0e c0       	rjmp	.+28     	; 0x418e <action_for_key+0xea>
            }
            return keycode_to_action(KC_ESC);
    4172:	89 e2       	ldi	r24, 0x29	; 41
    4174:	0c c0       	rjmp	.+24     	; 0x418e <action_for_key+0xea>
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    4176:	80 91 bd 01 	lds	r24, 0x01BD
    417a:	86 ff       	sbrs	r24, 6
    417c:	05 c0       	rjmp	.+10     	; 0x4188 <action_for_key+0xe4>
    417e:	06 c0       	rjmp	.+12     	; 0x418c <action_for_key+0xe8>
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    4180:	80 91 bd 01 	lds	r24, 0x01BD
    4184:	86 ff       	sbrs	r24, 6
    4186:	02 c0       	rjmp	.+4      	; 0x418c <action_for_key+0xe8>
                return keycode_to_action(KC_BSLASH);
    4188:	81 e3       	ldi	r24, 0x31	; 49
    418a:	01 c0       	rjmp	.+2      	; 0x418e <action_for_key+0xea>
            }
            return keycode_to_action(KC_BSPACE);
    418c:	8a e2       	ldi	r24, 0x2A	; 42
    418e:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <keycode_to_action>
    4192:	08 95       	ret
#endif
        default:
            return keycode_to_action(keycode);
    4194:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <keycode_to_action>
    }
}
    4198:	08 95       	ret

0000419a <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    419a:	af 92       	push	r10
    419c:	bf 92       	push	r11
    419e:	cf 92       	push	r12
    41a0:	df 92       	push	r13
    41a2:	ef 92       	push	r14
    41a4:	ff 92       	push	r15
    41a6:	1f 93       	push	r17
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	7c 01       	movw	r14, r24
    41ae:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	a8 2e       	mov	r10, r24
    41b4:	b1 2c       	mov	r11, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    41b6:	81 2f       	mov	r24, r17
    41b8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <matrix_get_row>
    41bc:	6c 01       	movw	r12, r24
    41be:	c0 e0       	ldi	r28, 0x00	; 0
    41c0:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    41c2:	c5 01       	movw	r24, r10
    41c4:	0c 2e       	mov	r0, r28
    41c6:	02 c0       	rjmp	.+4      	; 0x41cc <scan_key+0x32>
    41c8:	88 0f       	add	r24, r24
    41ca:	99 1f       	adc	r25, r25
    41cc:	0a 94       	dec	r0
    41ce:	e2 f7       	brpl	.-8      	; 0x41c8 <scan_key+0x2e>
    41d0:	8c 21       	and	r24, r12
    41d2:	9d 21       	and	r25, r13
    41d4:	89 2b       	or	r24, r25
    41d6:	d9 f0       	breq	.+54     	; 0x420e <scan_key+0x74>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	6c 2f       	mov	r22, r28
    41dc:	71 2f       	mov	r23, r17
    41de:	0e 94 52 20 	call	0x40a4	; 0x40a4 <action_for_key>
    41e2:	9c 01       	movw	r18, r24
                if (action.code == code ||
    41e4:	8e 15       	cp	r24, r14
    41e6:	9f 05       	cpc	r25, r15
    41e8:	d9 f0       	breq	.+54     	; 0x4220 <scan_key+0x86>
    41ea:	83 2f       	mov	r24, r19
    41ec:	80 7f       	andi	r24, 0xF0	; 240
    41ee:	51 f0       	breq	.+20     	; 0x4204 <scan_key+0x6a>
    41f0:	80 31       	cpi	r24, 0x10	; 16
    41f2:	41 f0       	breq	.+16     	; 0x4204 <scan_key+0x6a>
    41f4:	80 32       	cpi	r24, 0x20	; 32
    41f6:	31 f0       	breq	.+12     	; 0x4204 <scan_key+0x6a>
    41f8:	80 33       	cpi	r24, 0x30	; 48
    41fa:	21 f0       	breq	.+8      	; 0x4204 <scan_key+0x6a>
    41fc:	80 3a       	cpi	r24, 0xA0	; 160
    41fe:	11 f0       	breq	.+4      	; 0x4204 <scan_key+0x6a>
    4200:	80 3b       	cpi	r24, 0xB0	; 176
    4202:	29 f4       	brne	.+10     	; 0x420e <scan_key+0x74>
    4204:	82 2f       	mov	r24, r18
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	8e 15       	cp	r24, r14
    420a:	9f 05       	cpc	r25, r15
    420c:	49 f0       	breq	.+18     	; 0x4220 <scan_key+0x86>
    420e:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4210:	cd 30       	cpi	r28, 0x0D	; 13
    4212:	d1 05       	cpc	r29, r1
    4214:	b1 f6       	brne	.-84     	; 0x41c2 <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4216:	1f 5f       	subi	r17, 0xFF	; 255
    4218:	14 30       	cpi	r17, 0x04	; 4
    421a:	69 f6       	brne	.-102    	; 0x41b6 <scan_key+0x1c>
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	01 c0       	rjmp	.+2      	; 0x4222 <scan_key+0x88>
    4220:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	1f 91       	pop	r17
    4228:	ff 90       	pop	r15
    422a:	ef 90       	pop	r14
    422c:	df 90       	pop	r13
    422e:	cf 90       	pop	r12
    4230:	bf 90       	pop	r11
    4232:	af 90       	pop	r10
    4234:	08 95       	ret

00004236 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    423c:	8c e2       	ldi	r24, 0x2C	; 44
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0e 94 cd 20 	call	0x419a	; 0x419a <scan_key>
    4244:	88 23       	and	r24, r24
    4246:	19 f0       	breq	.+6      	; 0x424e <bootmagic_scan_key+0x18>

    return scan_key(code);
    4248:	ce 01       	movw	r24, r28
    424a:	0e 94 cd 20 	call	0x419a	; 0x419a <scan_key>
}
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	08 95       	ret

00004254 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    /* check signature */
    if (!eeconfig_is_enabled()) {
    425a:	0e 94 b9 22 	call	0x4572	; 0x4572 <eeconfig_is_enabled>
    425e:	88 23       	and	r24, r24
    4260:	11 f4       	brne	.+4      	; 0x4266 <bootmagic+0x12>
        eeconfig_init();
    4262:	0e 94 c4 22 	call	0x4588	; 0x4588 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    4266:	82 ec       	ldi	r24, 0xC2	; 194
    4268:	95 e0       	ldi	r25, 0x05	; 5
    426a:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    426e:	14 e6       	ldi	r17, 0x64	; 100
    4270:	c0 e4       	ldi	r28, 0x40	; 64
    4272:	dc e9       	ldi	r29, 0x9C	; 156
    4274:	05 c0       	rjmp	.+10     	; 0x4280 <bootmagic+0x2c>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    4276:	0e 94 00 08 	call	0x1000	; 0x1000 <matrix_scan>
    427a:	ce 01       	movw	r24, r28
    427c:	01 97       	sbiw	r24, 0x01	; 1
    427e:	f1 f7       	brne	.-4      	; 0x427c <bootmagic+0x28>
    4280:	11 50       	subi	r17, 0x01	; 1
    4282:	c8 f7       	brcc	.-14     	; 0x4276 <bootmagic+0x22>
    print("done.\n");
    4284:	8b eb       	ldi	r24, 0xBB	; 187
    4286:	95 e0       	ldi	r25, 0x05	; 5
    4288:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    428c:	89 e2       	ldi	r24, 0x29	; 41
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    4294:	88 23       	and	r24, r24
    4296:	09 f0       	breq	.+2      	; 0x429a <bootmagic+0x46>
    4298:	47 c1       	rjmp	.+654    	; 0x4528 <bootmagic+0x2d4>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    429a:	8a e2       	ldi	r24, 0x2A	; 42
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    42a2:	88 23       	and	r24, r24
    42a4:	11 f0       	breq	.+4      	; 0x42aa <bootmagic+0x56>
        eeconfig_init();
    42a6:	0e 94 c4 22 	call	0x4588	; 0x4588 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    42aa:	85 e0       	ldi	r24, 0x05	; 5
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    42b2:	88 23       	and	r24, r24
    42b4:	11 f0       	breq	.+4      	; 0x42ba <bootmagic+0x66>
        bootloader_jump();
    42b6:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    42ba:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    42be:	0e 94 b4 22 	call	0x4568	; 0x4568 <eeconfig_read_debug>
    42c2:	80 93 9f 01 	sts	0x019F, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    42c6:	87 e0       	ldi	r24, 0x07	; 7
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    42ce:	88 23       	and	r24, r24
    42d0:	d1 f1       	breq	.+116    	; 0x4346 <bootmagic+0xf2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    42d2:	8b e1       	ldi	r24, 0x1B	; 27
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    42da:	88 23       	and	r24, r24
    42dc:	49 f0       	breq	.+18     	; 0x42f0 <bootmagic+0x9c>
            debug_config.matrix = !debug_config.matrix;
    42de:	90 91 9f 01 	lds	r25, 0x019F
    42e2:	89 2f       	mov	r24, r25
    42e4:	86 95       	lsr	r24
    42e6:	80 95       	com	r24
    42e8:	81 70       	andi	r24, 0x01	; 1
    42ea:	88 0f       	add	r24, r24
    42ec:	9d 7f       	andi	r25, 0xFD	; 253
    42ee:	28 c0       	rjmp	.+80     	; 0x4340 <bootmagic+0xec>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    42f0:	8e e0       	ldi	r24, 0x0E	; 14
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    42f8:	88 23       	and	r24, r24
    42fa:	59 f0       	breq	.+22     	; 0x4312 <bootmagic+0xbe>
            debug_config.keyboard = !debug_config.keyboard;
    42fc:	90 91 9f 01 	lds	r25, 0x019F
    4300:	89 2f       	mov	r24, r25
    4302:	86 95       	lsr	r24
    4304:	86 95       	lsr	r24
    4306:	80 95       	com	r24
    4308:	81 70       	andi	r24, 0x01	; 1
    430a:	88 0f       	add	r24, r24
    430c:	88 0f       	add	r24, r24
    430e:	9b 7f       	andi	r25, 0xFB	; 251
    4310:	17 c0       	rjmp	.+46     	; 0x4340 <bootmagic+0xec>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4312:	80 e1       	ldi	r24, 0x10	; 16
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    431a:	90 91 9f 01 	lds	r25, 0x019F
    431e:	88 23       	and	r24, r24
    4320:	59 f0       	breq	.+22     	; 0x4338 <bootmagic+0xe4>
            debug_config.mouse = !debug_config.mouse;
    4322:	89 2f       	mov	r24, r25
    4324:	86 95       	lsr	r24
    4326:	86 95       	lsr	r24
    4328:	86 95       	lsr	r24
    432a:	80 95       	com	r24
    432c:	81 70       	andi	r24, 0x01	; 1
    432e:	88 0f       	add	r24, r24
    4330:	88 0f       	add	r24, r24
    4332:	88 0f       	add	r24, r24
    4334:	97 7f       	andi	r25, 0xF7	; 247
    4336:	04 c0       	rjmp	.+8      	; 0x4340 <bootmagic+0xec>
        } else {
            debug_config.enable = !debug_config.enable;
    4338:	89 2f       	mov	r24, r25
    433a:	80 95       	com	r24
    433c:	81 70       	andi	r24, 0x01	; 1
    433e:	9e 7f       	andi	r25, 0xFE	; 254
    4340:	98 2b       	or	r25, r24
    4342:	90 93 9f 01 	sts	0x019F, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4346:	80 91 9f 01 	lds	r24, 0x019F
    434a:	0e 94 a4 22 	call	0x4548	; 0x4548 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    434e:	0e 94 aa 22 	call	0x4554	; 0x4554 <eeconfig_read_keymap>
    4352:	80 93 bd 01 	sts	0x01BD, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4356:	80 ee       	ldi	r24, 0xE0	; 224
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    435e:	88 23       	and	r24, r24
    4360:	49 f0       	breq	.+18     	; 0x4374 <bootmagic+0x120>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4362:	80 91 bd 01 	lds	r24, 0x01BD
    4366:	98 2f       	mov	r25, r24
    4368:	90 95       	com	r25
    436a:	91 70       	andi	r25, 0x01	; 1
    436c:	8e 7f       	andi	r24, 0xFE	; 254
    436e:	89 2b       	or	r24, r25
    4370:	80 93 bd 01 	sts	0x01BD, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4374:	89 e3       	ldi	r24, 0x39	; 57
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    437c:	88 23       	and	r24, r24
    437e:	59 f0       	breq	.+22     	; 0x4396 <bootmagic+0x142>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4380:	90 91 bd 01 	lds	r25, 0x01BD
    4384:	89 2f       	mov	r24, r25
    4386:	86 95       	lsr	r24
    4388:	80 95       	com	r24
    438a:	81 70       	andi	r24, 0x01	; 1
    438c:	88 0f       	add	r24, r24
    438e:	9d 7f       	andi	r25, 0xFD	; 253
    4390:	98 2b       	or	r25, r24
    4392:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4396:	82 ee       	ldi	r24, 0xE2	; 226
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    439e:	88 23       	and	r24, r24
    43a0:	69 f0       	breq	.+26     	; 0x43bc <bootmagic+0x168>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    43a2:	90 91 bd 01 	lds	r25, 0x01BD
    43a6:	89 2f       	mov	r24, r25
    43a8:	86 95       	lsr	r24
    43aa:	86 95       	lsr	r24
    43ac:	80 95       	com	r24
    43ae:	81 70       	andi	r24, 0x01	; 1
    43b0:	88 0f       	add	r24, r24
    43b2:	88 0f       	add	r24, r24
    43b4:	9b 7f       	andi	r25, 0xFB	; 251
    43b6:	98 2b       	or	r25, r24
    43b8:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    43bc:	86 ee       	ldi	r24, 0xE6	; 230
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    43c4:	88 23       	and	r24, r24
    43c6:	79 f0       	breq	.+30     	; 0x43e6 <bootmagic+0x192>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    43c8:	90 91 bd 01 	lds	r25, 0x01BD
    43cc:	89 2f       	mov	r24, r25
    43ce:	86 95       	lsr	r24
    43d0:	86 95       	lsr	r24
    43d2:	86 95       	lsr	r24
    43d4:	80 95       	com	r24
    43d6:	81 70       	andi	r24, 0x01	; 1
    43d8:	88 0f       	add	r24, r24
    43da:	88 0f       	add	r24, r24
    43dc:	88 0f       	add	r24, r24
    43de:	97 7f       	andi	r25, 0xF7	; 247
    43e0:	98 2b       	or	r25, r24
    43e2:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    43e6:	83 ee       	ldi	r24, 0xE3	; 227
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    43ee:	88 23       	and	r24, r24
    43f0:	69 f0       	breq	.+26     	; 0x440c <bootmagic+0x1b8>
        keymap_config.no_gui = !keymap_config.no_gui;
    43f2:	90 91 bd 01 	lds	r25, 0x01BD
    43f6:	89 2f       	mov	r24, r25
    43f8:	82 95       	swap	r24
    43fa:	8f 70       	andi	r24, 0x0F	; 15
    43fc:	80 95       	com	r24
    43fe:	81 70       	andi	r24, 0x01	; 1
    4400:	82 95       	swap	r24
    4402:	80 7f       	andi	r24, 0xF0	; 240
    4404:	9f 7e       	andi	r25, 0xEF	; 239
    4406:	98 2b       	or	r25, r24
    4408:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    440c:	85 e3       	ldi	r24, 0x35	; 53
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    4414:	88 23       	and	r24, r24
    4416:	79 f0       	breq	.+30     	; 0x4436 <bootmagic+0x1e2>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4418:	90 91 bd 01 	lds	r25, 0x01BD
    441c:	89 2f       	mov	r24, r25
    441e:	82 95       	swap	r24
    4420:	86 95       	lsr	r24
    4422:	87 70       	andi	r24, 0x07	; 7
    4424:	80 95       	com	r24
    4426:	81 70       	andi	r24, 0x01	; 1
    4428:	82 95       	swap	r24
    442a:	88 0f       	add	r24, r24
    442c:	80 7e       	andi	r24, 0xE0	; 224
    442e:	9f 7d       	andi	r25, 0xDF	; 223
    4430:	98 2b       	or	r25, r24
    4432:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4436:	81 e3       	ldi	r24, 0x31	; 49
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    443e:	88 23       	and	r24, r24
    4440:	89 f0       	breq	.+34     	; 0x4464 <bootmagic+0x210>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4442:	90 91 bd 01 	lds	r25, 0x01BD
    4446:	89 2f       	mov	r24, r25
    4448:	82 95       	swap	r24
    444a:	86 95       	lsr	r24
    444c:	86 95       	lsr	r24
    444e:	83 70       	andi	r24, 0x03	; 3
    4450:	80 95       	com	r24
    4452:	81 70       	andi	r24, 0x01	; 1
    4454:	82 95       	swap	r24
    4456:	88 0f       	add	r24, r24
    4458:	88 0f       	add	r24, r24
    445a:	80 7c       	andi	r24, 0xC0	; 192
    445c:	9f 7b       	andi	r25, 0xBF	; 191
    445e:	98 2b       	or	r25, r24
    4460:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4464:	81 e1       	ldi	r24, 0x11	; 17
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    446c:	88 23       	and	r24, r24
    446e:	79 f0       	breq	.+30     	; 0x448e <bootmagic+0x23a>
        keymap_config.nkro = !keymap_config.nkro;
    4470:	80 91 bd 01 	lds	r24, 0x01BD
    4474:	98 2f       	mov	r25, r24
    4476:	99 1f       	adc	r25, r25
    4478:	99 27       	eor	r25, r25
    447a:	99 1f       	adc	r25, r25
    447c:	21 e0       	ldi	r18, 0x01	; 1
    447e:	92 27       	eor	r25, r18
    4480:	97 95       	ror	r25
    4482:	99 27       	eor	r25, r25
    4484:	97 95       	ror	r25
    4486:	8f 77       	andi	r24, 0x7F	; 127
    4488:	89 2b       	or	r24, r25
    448a:	80 93 bd 01 	sts	0x01BD, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    448e:	80 91 bd 01 	lds	r24, 0x01BD
    4492:	0e 94 98 22 	call	0x4530	; 0x4530 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4496:	80 91 bd 01 	lds	r24, 0x01BD
    449a:	88 1f       	adc	r24, r24
    449c:	88 27       	eor	r24, r24
    449e:	88 1f       	adc	r24, r24
    44a0:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    44a4:	87 e2       	ldi	r24, 0x27	; 39
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44ac:	18 2f       	mov	r17, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    44ae:	8e e1       	ldi	r24, 0x1E	; 30
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44b6:	81 11       	cpse	r24, r1
    44b8:	12 60       	ori	r17, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    44ba:	8f e1       	ldi	r24, 0x1F	; 31
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44c2:	81 11       	cpse	r24, r1
    44c4:	14 60       	ori	r17, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    44c6:	80 e2       	ldi	r24, 0x20	; 32
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44ce:	81 11       	cpse	r24, r1
    44d0:	18 60       	ori	r17, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    44d2:	81 e2       	ldi	r24, 0x21	; 33
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44da:	81 11       	cpse	r24, r1
    44dc:	10 61       	ori	r17, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    44de:	82 e2       	ldi	r24, 0x22	; 34
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44e6:	81 11       	cpse	r24, r1
    44e8:	10 62       	ori	r17, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    44ea:	83 e2       	ldi	r24, 0x23	; 35
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44f2:	81 11       	cpse	r24, r1
    44f4:	10 64       	ori	r17, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    44f6:	84 e2       	ldi	r24, 0x24	; 36
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 1b 21 	call	0x4236	; 0x4236 <bootmagic_scan_key>
    44fe:	81 11       	cpse	r24, r1
    4500:	10 68       	ori	r17, 0x80	; 128
    if (default_layer) {
    4502:	11 23       	and	r17, r17
    4504:	41 f0       	breq	.+16     	; 0x4516 <bootmagic+0x2c2>
        eeconfig_write_default_layer(default_layer);
    4506:	81 2f       	mov	r24, r17
    4508:	0e 94 9e 22 	call	0x453c	; 0x453c <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    450c:	61 2f       	mov	r22, r17
    450e:	70 e0       	ldi	r23, 0x00	; 0
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	07 c0       	rjmp	.+14     	; 0x4524 <bootmagic+0x2d0>
    } else {
        default_layer = eeconfig_read_default_layer();
    4516:	0e 94 af 22 	call	0x455e	; 0x455e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	a0 e0       	ldi	r26, 0x00	; 0
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	bc 01       	movw	r22, r24
    4522:	cd 01       	movw	r24, r26
    4524:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <default_layer_set>
    }
}
    4528:	df 91       	pop	r29
    452a:	cf 91       	pop	r28
    452c:	1f 91       	pop	r17
    452e:	08 95       	ret

00004530 <eeconfig_write_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4530:	68 2f       	mov	r22, r24
    4532:	84 e0       	ldi	r24, 0x04	; 4
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
    453a:	08 95       	ret

0000453c <eeconfig_write_default_layer>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    453c:	68 2f       	mov	r22, r24
    453e:	83 e0       	ldi	r24, 0x03	; 3
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
    4546:	08 95       	ret

00004548 <eeconfig_write_debug>:
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4548:	68 2f       	mov	r22, r24
    454a:	82 e0       	ldi	r24, 0x02	; 2
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
    4552:	08 95       	ret

00004554 <eeconfig_read_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4554:	84 e0       	ldi	r24, 0x04	; 4
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__eerd_byte_m32u4>
    455c:	08 95       	ret

0000455e <eeconfig_read_default_layer>:
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    455e:	83 e0       	ldi	r24, 0x03	; 3
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__eerd_byte_m32u4>
    4566:	08 95       	ret

00004568 <eeconfig_read_debug>:
bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4568:	82 e0       	ldi	r24, 0x02	; 2
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__eerd_byte_m32u4>
    4570:	08 95       	ret

00004572 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <__eerd_word_m32u4>
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	8d 5e       	subi	r24, 0xED	; 237
    457e:	9e 4f       	sbci	r25, 0xFE	; 254
    4580:	09 f4       	brne	.+2      	; 0x4584 <eeconfig_is_enabled+0x12>
    4582:	21 e0       	ldi	r18, 0x01	; 1
}
    4584:	82 2f       	mov	r24, r18
    4586:	08 95       	ret

00004588 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	6d ee       	ldi	r22, 0xED	; 237
    458e:	7e ef       	ldi	r23, 0xFE	; 254
    4590:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4594:	82 e0       	ldi	r24, 0x02	; 2
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	60 e0       	ldi	r22, 0x00	; 0
    459a:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    459e:	83 e0       	ldi	r24, 0x03	; 3
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	60 e0       	ldi	r22, 0x00	; 0
    45a4:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    45a8:	84 e0       	ldi	r24, 0x04	; 4
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	60 e0       	ldi	r22, 0x00	; 0
    45ae:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    45b2:	85 e0       	ldi	r24, 0x05	; 5
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	60 e0       	ldi	r22, 0x00	; 0
    45b8:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    45bc:	08 95       	ret

000045be <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    45be:	80 91 ab 01 	lds	r24, 0x01AB
    45c2:	80 ff       	sbrs	r24, 0
    45c4:	0b c0       	rjmp	.+22     	; 0x45dc <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    45c6:	90 91 11 01 	lds	r25, 0x0111
    45ca:	85 e0       	ldi	r24, 0x05	; 5
    45cc:	98 9f       	mul	r25, r24
    45ce:	c0 01       	movw	r24, r0
    45d0:	11 24       	eor	r1, r1
    45d2:	95 95       	asr	r25
    45d4:	87 95       	ror	r24
    45d6:	95 95       	asr	r25
    45d8:	87 95       	ror	r24
    45da:	30 c0       	rjmp	.+96     	; 0x463c <move_unit+0x7e>
    } else if (mousekey_accel & (1<<1)) {
    45dc:	81 ff       	sbrs	r24, 1
    45de:	09 c0       	rjmp	.+18     	; 0x45f2 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    45e0:	90 91 11 01 	lds	r25, 0x0111
    45e4:	85 e0       	ldi	r24, 0x05	; 5
    45e6:	98 9f       	mul	r25, r24
    45e8:	c0 01       	movw	r24, r0
    45ea:	11 24       	eor	r1, r1
    45ec:	95 95       	asr	r25
    45ee:	87 95       	ror	r24
    45f0:	25 c0       	rjmp	.+74     	; 0x463c <move_unit+0x7e>
    } else if (mousekey_accel & (1<<2)) {
    45f2:	82 ff       	sbrs	r24, 2
    45f4:	03 c0       	rjmp	.+6      	; 0x45fc <move_unit+0x3e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    45f6:	90 91 11 01 	lds	r25, 0x0111
    45fa:	0d c0       	rjmp	.+26     	; 0x4616 <move_unit+0x58>
    } else if (mousekey_repeat == 0) {
    45fc:	80 91 aa 01 	lds	r24, 0x01AA
    4600:	88 23       	and	r24, r24
    4602:	19 f4       	brne	.+6      	; 0x460a <move_unit+0x4c>
    4604:	85 e0       	ldi	r24, 0x05	; 5
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	08 95       	ret
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    460a:	60 91 12 01 	lds	r22, 0x0112
    460e:	90 91 11 01 	lds	r25, 0x0111
    4612:	86 17       	cp	r24, r22
    4614:	28 f0       	brcs	.+10     	; 0x4620 <move_unit+0x62>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    4616:	85 e0       	ldi	r24, 0x05	; 5
    4618:	98 9f       	mul	r25, r24
    461a:	c0 01       	movw	r24, r0
    461c:	11 24       	eor	r1, r1
    461e:	0e c0       	rjmp	.+28     	; 0x463c <move_unit+0x7e>
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4620:	89 9f       	mul	r24, r25
    4622:	90 01       	movw	r18, r0
    4624:	11 24       	eor	r1, r1
    4626:	c9 01       	movw	r24, r18
    4628:	88 0f       	add	r24, r24
    462a:	99 1f       	adc	r25, r25
    462c:	88 0f       	add	r24, r24
    462e:	99 1f       	adc	r25, r25
    4630:	82 0f       	add	r24, r18
    4632:	93 1f       	adc	r25, r19
    4634:	70 e0       	ldi	r23, 0x00	; 0
    4636:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__divmodhi4>
    463a:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    463c:	80 38       	cpi	r24, 0x80	; 128
    463e:	91 05       	cpc	r25, r1
    4640:	10 f0       	brcs	.+4      	; 0x4646 <move_unit+0x88>
    4642:	8f e7       	ldi	r24, 0x7F	; 127
    4644:	08 95       	ret
    4646:	00 97       	sbiw	r24, 0x00	; 0
    4648:	09 f4       	brne	.+2      	; 0x464c <move_unit+0x8e>
    464a:	81 e0       	ldi	r24, 0x01	; 1
}
    464c:	08 95       	ret

0000464e <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    464e:	80 91 ab 01 	lds	r24, 0x01AB
    4652:	80 ff       	sbrs	r24, 0
    4654:	05 c0       	rjmp	.+10     	; 0x4660 <wheel_unit+0x12>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4656:	80 91 13 01 	lds	r24, 0x0113
    465a:	86 95       	lsr	r24
    465c:	86 95       	lsr	r24
    465e:	18 c0       	rjmp	.+48     	; 0x4690 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<1)) {
    4660:	81 ff       	sbrs	r24, 1
    4662:	04 c0       	rjmp	.+8      	; 0x466c <wheel_unit+0x1e>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4664:	80 91 13 01 	lds	r24, 0x0113
    4668:	86 95       	lsr	r24
    466a:	12 c0       	rjmp	.+36     	; 0x4690 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<2)) {
    466c:	82 ff       	sbrs	r24, 2
    466e:	03 c0       	rjmp	.+6      	; 0x4676 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4670:	80 91 13 01 	lds	r24, 0x0113
    4674:	0d c0       	rjmp	.+26     	; 0x4690 <wheel_unit+0x42>
    } else if (mousekey_repeat == 0) {
    4676:	20 91 aa 01 	lds	r18, 0x01AA
    467a:	22 23       	and	r18, r18
    467c:	19 f4       	brne	.+6      	; 0x4684 <wheel_unit+0x36>
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	08 95       	ret
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4684:	60 91 14 01 	lds	r22, 0x0114
    4688:	80 91 13 01 	lds	r24, 0x0113
    468c:	26 17       	cp	r18, r22
    468e:	10 f0       	brcs	.+4      	; 0x4694 <wheel_unit+0x46>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	07 c0       	rjmp	.+14     	; 0x46a2 <wheel_unit+0x54>
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4694:	28 9f       	mul	r18, r24
    4696:	c0 01       	movw	r24, r0
    4698:	11 24       	eor	r1, r1
    469a:	70 e0       	ldi	r23, 0x00	; 0
    469c:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__divmodhi4>
    46a0:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    46a2:	80 38       	cpi	r24, 0x80	; 128
    46a4:	91 05       	cpc	r25, r1
    46a6:	10 f0       	brcs	.+4      	; 0x46ac <wheel_unit+0x5e>
    46a8:	8f e7       	ldi	r24, 0x7F	; 127
    46aa:	08 95       	ret
    46ac:	00 97       	sbiw	r24, 0x00	; 0
    46ae:	09 f4       	brne	.+2      	; 0x46b2 <wheel_unit+0x64>
    46b0:	81 e0       	ldi	r24, 0x01	; 1
}
    46b2:	08 95       	ret

000046b4 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    46b4:	80 3f       	cpi	r24, 0xF0	; 240
    46b6:	21 f4       	brne	.+8      	; 0x46c0 <mousekey_on+0xc>
    46b8:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    46bc:	81 95       	neg	r24
    46be:	04 c0       	rjmp	.+8      	; 0x46c8 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    46c0:	81 3f       	cpi	r24, 0xF1	; 241
    46c2:	29 f4       	brne	.+10     	; 0x46ce <mousekey_on+0x1a>
    46c4:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    46c8:	80 93 a7 01 	sts	0x01A7, r24
    46cc:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    46ce:	82 3f       	cpi	r24, 0xF2	; 242
    46d0:	21 f4       	brne	.+8      	; 0x46da <mousekey_on+0x26>
    46d2:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    46d6:	81 95       	neg	r24
    46d8:	04 c0       	rjmp	.+8      	; 0x46e2 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    46da:	83 3f       	cpi	r24, 0xF3	; 243
    46dc:	29 f4       	brne	.+10     	; 0x46e8 <mousekey_on+0x34>
    46de:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    46e2:	80 93 a6 01 	sts	0x01A6, r24
    46e6:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    46e8:	89 3f       	cpi	r24, 0xF9	; 249
    46ea:	19 f4       	brne	.+6      	; 0x46f2 <mousekey_on+0x3e>
    46ec:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    46f0:	05 c0       	rjmp	.+10     	; 0x46fc <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    46f2:	8a 3f       	cpi	r24, 0xFA	; 250
    46f4:	31 f4       	brne	.+12     	; 0x4702 <mousekey_on+0x4e>
    46f6:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    46fa:	81 95       	neg	r24
    46fc:	80 93 a8 01 	sts	0x01A8, r24
    4700:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4702:	8b 3f       	cpi	r24, 0xFB	; 251
    4704:	21 f4       	brne	.+8      	; 0x470e <mousekey_on+0x5a>
    4706:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    470a:	81 95       	neg	r24
    470c:	04 c0       	rjmp	.+8      	; 0x4716 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    470e:	8c 3f       	cpi	r24, 0xFC	; 252
    4710:	29 f4       	brne	.+10     	; 0x471c <mousekey_on+0x68>
    4712:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    4716:	80 93 a9 01 	sts	0x01A9, r24
    471a:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    471c:	84 3f       	cpi	r24, 0xF4	; 244
    471e:	21 f4       	brne	.+8      	; 0x4728 <mousekey_on+0x74>
    4720:	80 91 a5 01 	lds	r24, 0x01A5
    4724:	81 60       	ori	r24, 0x01	; 1
    4726:	17 c0       	rjmp	.+46     	; 0x4756 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4728:	85 3f       	cpi	r24, 0xF5	; 245
    472a:	21 f4       	brne	.+8      	; 0x4734 <mousekey_on+0x80>
    472c:	80 91 a5 01 	lds	r24, 0x01A5
    4730:	82 60       	ori	r24, 0x02	; 2
    4732:	11 c0       	rjmp	.+34     	; 0x4756 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4734:	86 3f       	cpi	r24, 0xF6	; 246
    4736:	21 f4       	brne	.+8      	; 0x4740 <mousekey_on+0x8c>
    4738:	80 91 a5 01 	lds	r24, 0x01A5
    473c:	84 60       	ori	r24, 0x04	; 4
    473e:	0b c0       	rjmp	.+22     	; 0x4756 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4740:	87 3f       	cpi	r24, 0xF7	; 247
    4742:	21 f4       	brne	.+8      	; 0x474c <mousekey_on+0x98>
    4744:	80 91 a5 01 	lds	r24, 0x01A5
    4748:	88 60       	ori	r24, 0x08	; 8
    474a:	05 c0       	rjmp	.+10     	; 0x4756 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    474c:	88 3f       	cpi	r24, 0xF8	; 248
    474e:	31 f4       	brne	.+12     	; 0x475c <mousekey_on+0xa8>
    4750:	80 91 a5 01 	lds	r24, 0x01A5
    4754:	80 61       	ori	r24, 0x10	; 16
    4756:	80 93 a5 01 	sts	0x01A5, r24
    475a:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    475c:	8d 3f       	cpi	r24, 0xFD	; 253
    475e:	21 f4       	brne	.+8      	; 0x4768 <mousekey_on+0xb4>
    4760:	80 91 ab 01 	lds	r24, 0x01AB
    4764:	81 60       	ori	r24, 0x01	; 1
    4766:	05 c0       	rjmp	.+10     	; 0x4772 <mousekey_on+0xbe>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4768:	8e 3f       	cpi	r24, 0xFE	; 254
    476a:	31 f4       	brne	.+12     	; 0x4778 <mousekey_on+0xc4>
    476c:	80 91 ab 01 	lds	r24, 0x01AB
    4770:	82 60       	ori	r24, 0x02	; 2
    4772:	80 93 ab 01 	sts	0x01AB, r24
    4776:	08 95       	ret
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4778:	8f 3f       	cpi	r24, 0xFF	; 255
    477a:	29 f4       	brne	.+10     	; 0x4786 <mousekey_on+0xd2>
    477c:	80 91 ab 01 	lds	r24, 0x01AB
    4780:	84 60       	ori	r24, 0x04	; 4
    4782:	80 93 ab 01 	sts	0x01AB, r24
    4786:	08 95       	ret

00004788 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4788:	80 3f       	cpi	r24, 0xF0	; 240
    478a:	29 f4       	brne	.+10     	; 0x4796 <mousekey_off+0xe>
    478c:	80 91 a7 01 	lds	r24, 0x01A7
    4790:	87 ff       	sbrs	r24, 7
    4792:	6f c0       	rjmp	.+222    	; 0x4872 <mousekey_off+0xea>
    4794:	07 c0       	rjmp	.+14     	; 0x47a4 <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4796:	81 3f       	cpi	r24, 0xF1	; 241
    4798:	41 f4       	brne	.+16     	; 0x47aa <mousekey_off+0x22>
    479a:	80 91 a7 01 	lds	r24, 0x01A7
    479e:	18 16       	cp	r1, r24
    47a0:	0c f0       	brlt	.+2      	; 0x47a4 <mousekey_off+0x1c>
    47a2:	67 c0       	rjmp	.+206    	; 0x4872 <mousekey_off+0xea>
    47a4:	10 92 a7 01 	sts	0x01A7, r1
    47a8:	64 c0       	rjmp	.+200    	; 0x4872 <mousekey_off+0xea>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    47aa:	82 3f       	cpi	r24, 0xF2	; 242
    47ac:	29 f4       	brne	.+10     	; 0x47b8 <mousekey_off+0x30>
    47ae:	80 91 a6 01 	lds	r24, 0x01A6
    47b2:	87 ff       	sbrs	r24, 7
    47b4:	5e c0       	rjmp	.+188    	; 0x4872 <mousekey_off+0xea>
    47b6:	07 c0       	rjmp	.+14     	; 0x47c6 <mousekey_off+0x3e>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    47b8:	83 3f       	cpi	r24, 0xF3	; 243
    47ba:	41 f4       	brne	.+16     	; 0x47cc <mousekey_off+0x44>
    47bc:	80 91 a6 01 	lds	r24, 0x01A6
    47c0:	18 16       	cp	r1, r24
    47c2:	0c f0       	brlt	.+2      	; 0x47c6 <mousekey_off+0x3e>
    47c4:	56 c0       	rjmp	.+172    	; 0x4872 <mousekey_off+0xea>
    47c6:	10 92 a6 01 	sts	0x01A6, r1
    47ca:	53 c0       	rjmp	.+166    	; 0x4872 <mousekey_off+0xea>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    47cc:	89 3f       	cpi	r24, 0xF9	; 249
    47ce:	29 f4       	brne	.+10     	; 0x47da <mousekey_off+0x52>
    47d0:	80 91 a8 01 	lds	r24, 0x01A8
    47d4:	18 16       	cp	r1, r24
    47d6:	3c f0       	brlt	.+14     	; 0x47e6 <mousekey_off+0x5e>
    47d8:	4c c0       	rjmp	.+152    	; 0x4872 <mousekey_off+0xea>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    47da:	8a 3f       	cpi	r24, 0xFA	; 250
    47dc:	39 f4       	brne	.+14     	; 0x47ec <mousekey_off+0x64>
    47de:	80 91 a8 01 	lds	r24, 0x01A8
    47e2:	87 ff       	sbrs	r24, 7
    47e4:	46 c0       	rjmp	.+140    	; 0x4872 <mousekey_off+0xea>
    47e6:	10 92 a8 01 	sts	0x01A8, r1
    47ea:	43 c0       	rjmp	.+134    	; 0x4872 <mousekey_off+0xea>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    47ec:	8b 3f       	cpi	r24, 0xFB	; 251
    47ee:	29 f4       	brne	.+10     	; 0x47fa <mousekey_off+0x72>
    47f0:	80 91 a9 01 	lds	r24, 0x01A9
    47f4:	87 ff       	sbrs	r24, 7
    47f6:	3d c0       	rjmp	.+122    	; 0x4872 <mousekey_off+0xea>
    47f8:	06 c0       	rjmp	.+12     	; 0x4806 <mousekey_off+0x7e>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    47fa:	8c 3f       	cpi	r24, 0xFC	; 252
    47fc:	39 f4       	brne	.+14     	; 0x480c <mousekey_off+0x84>
    47fe:	80 91 a9 01 	lds	r24, 0x01A9
    4802:	18 16       	cp	r1, r24
    4804:	b4 f5       	brge	.+108    	; 0x4872 <mousekey_off+0xea>
    4806:	10 92 a9 01 	sts	0x01A9, r1
    480a:	33 c0       	rjmp	.+102    	; 0x4872 <mousekey_off+0xea>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    480c:	84 3f       	cpi	r24, 0xF4	; 244
    480e:	21 f4       	brne	.+8      	; 0x4818 <mousekey_off+0x90>
    4810:	80 91 a5 01 	lds	r24, 0x01A5
    4814:	8e 7f       	andi	r24, 0xFE	; 254
    4816:	05 c0       	rjmp	.+10     	; 0x4822 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4818:	85 3f       	cpi	r24, 0xF5	; 245
    481a:	31 f4       	brne	.+12     	; 0x4828 <mousekey_off+0xa0>
    481c:	80 91 a5 01 	lds	r24, 0x01A5
    4820:	8d 7f       	andi	r24, 0xFD	; 253
    4822:	80 93 a5 01 	sts	0x01A5, r24
    4826:	25 c0       	rjmp	.+74     	; 0x4872 <mousekey_off+0xea>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4828:	86 3f       	cpi	r24, 0xF6	; 246
    482a:	21 f4       	brne	.+8      	; 0x4834 <mousekey_off+0xac>
    482c:	80 91 a5 01 	lds	r24, 0x01A5
    4830:	8b 7f       	andi	r24, 0xFB	; 251
    4832:	f7 cf       	rjmp	.-18     	; 0x4822 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4834:	87 3f       	cpi	r24, 0xF7	; 247
    4836:	21 f4       	brne	.+8      	; 0x4840 <mousekey_off+0xb8>
    4838:	80 91 a5 01 	lds	r24, 0x01A5
    483c:	87 7f       	andi	r24, 0xF7	; 247
    483e:	f1 cf       	rjmp	.-30     	; 0x4822 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4840:	88 3f       	cpi	r24, 0xF8	; 248
    4842:	21 f4       	brne	.+8      	; 0x484c <mousekey_off+0xc4>
    4844:	80 91 a5 01 	lds	r24, 0x01A5
    4848:	8f 7e       	andi	r24, 0xEF	; 239
    484a:	eb cf       	rjmp	.-42     	; 0x4822 <mousekey_off+0x9a>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    484c:	8d 3f       	cpi	r24, 0xFD	; 253
    484e:	21 f4       	brne	.+8      	; 0x4858 <mousekey_off+0xd0>
    4850:	80 91 ab 01 	lds	r24, 0x01AB
    4854:	8e 7f       	andi	r24, 0xFE	; 254
    4856:	0b c0       	rjmp	.+22     	; 0x486e <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4858:	8e 3f       	cpi	r24, 0xFE	; 254
    485a:	21 f4       	brne	.+8      	; 0x4864 <mousekey_off+0xdc>
    485c:	80 91 ab 01 	lds	r24, 0x01AB
    4860:	8d 7f       	andi	r24, 0xFD	; 253
    4862:	05 c0       	rjmp	.+10     	; 0x486e <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4864:	8f 3f       	cpi	r24, 0xFF	; 255
    4866:	29 f4       	brne	.+10     	; 0x4872 <mousekey_off+0xea>
    4868:	80 91 ab 01 	lds	r24, 0x01AB
    486c:	8b 7f       	andi	r24, 0xFB	; 251
    486e:	80 93 ab 01 	sts	0x01AB, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4872:	80 91 a6 01 	lds	r24, 0x01A6
    4876:	88 23       	and	r24, r24
    4878:	71 f4       	brne	.+28     	; 0x4896 <mousekey_off+0x10e>
    487a:	80 91 a7 01 	lds	r24, 0x01A7
    487e:	88 23       	and	r24, r24
    4880:	51 f4       	brne	.+20     	; 0x4896 <mousekey_off+0x10e>
    4882:	80 91 a8 01 	lds	r24, 0x01A8
    4886:	88 23       	and	r24, r24
    4888:	31 f4       	brne	.+12     	; 0x4896 <mousekey_off+0x10e>
    488a:	80 91 a9 01 	lds	r24, 0x01A9
    488e:	88 23       	and	r24, r24
    4890:	11 f4       	brne	.+4      	; 0x4896 <mousekey_off+0x10e>
        mousekey_repeat = 0;
    4892:	10 92 aa 01 	sts	0x01AA, r1
    4896:	08 95       	ret

00004898 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4898:	e5 ea       	ldi	r30, 0xA5	; 165
    489a:	f1 e0       	ldi	r31, 0x01	; 1
    489c:	85 e0       	ldi	r24, 0x05	; 5
    489e:	df 01       	movw	r26, r30
    48a0:	1d 92       	st	X+, r1
    48a2:	8a 95       	dec	r24
    48a4:	e9 f7       	brne	.-6      	; 0x48a0 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    48a6:	10 92 aa 01 	sts	0x01AA, r1
    mousekey_accel = 0;
    48aa:	10 92 ab 01 	sts	0x01AB, r1
}
    48ae:	08 95       	ret

000048b0 <mousekey_send>:

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    48b0:	80 91 9f 01 	lds	r24, 0x019F
    48b4:	83 ff       	sbrs	r24, 3
    48b6:	c1 c0       	rjmp	.+386    	; 0x4a3a <mousekey_send+0x18a>
    print("mousekey [btn|x y v h](rep/acl): [");
    48b8:	8e ef       	ldi	r24, 0xFE	; 254
    48ba:	95 e0       	ldi	r25, 0x05	; 5
    48bc:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    phex(mouse_report.buttons); print("|");
    48c0:	00 d0       	rcall	.+0      	; 0x48c2 <mousekey_send+0x12>
    48c2:	00 d0       	rcall	.+0      	; 0x48c4 <mousekey_send+0x14>
    48c4:	ed b7       	in	r30, 0x3d	; 61
    48c6:	fe b7       	in	r31, 0x3e	; 62
    48c8:	31 96       	adiw	r30, 0x01	; 1
    48ca:	89 ef       	ldi	r24, 0xF9	; 249
    48cc:	95 e0       	ldi	r25, 0x05	; 5
    48ce:	ad b7       	in	r26, 0x3d	; 61
    48d0:	be b7       	in	r27, 0x3e	; 62
    48d2:	12 96       	adiw	r26, 0x02	; 2
    48d4:	9c 93       	st	X, r25
    48d6:	8e 93       	st	-X, r24
    48d8:	11 97       	sbiw	r26, 0x01	; 1
    48da:	80 91 a5 01 	lds	r24, 0x01A5
    48de:	82 83       	std	Z+2, r24	; 0x02
    48e0:	13 82       	std	Z+3, r1	; 0x03
    48e2:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	87 ef       	ldi	r24, 0xF7	; 247
    48f0:	95 e0       	ldi	r25, 0x05	; 5
    48f2:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print_decs(mouse_report.x); print(" ");
    48f6:	00 d0       	rcall	.+0      	; 0x48f8 <mousekey_send+0x48>
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <mousekey_send+0x4a>
    48fa:	84 ef       	ldi	r24, 0xF4	; 244
    48fc:	95 e0       	ldi	r25, 0x05	; 5
    48fe:	ed b7       	in	r30, 0x3d	; 61
    4900:	fe b7       	in	r31, 0x3e	; 62
    4902:	92 83       	std	Z+2, r25	; 0x02
    4904:	81 83       	std	Z+1, r24	; 0x01
    4906:	80 91 a6 01 	lds	r24, 0x01A6
    490a:	99 27       	eor	r25, r25
    490c:	87 fd       	sbrc	r24, 7
    490e:	90 95       	com	r25
    4910:	94 83       	std	Z+4, r25	; 0x04
    4912:	83 83       	std	Z+3, r24	; 0x03
    4914:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	82 ef       	ldi	r24, 0xF2	; 242
    4922:	95 e0       	ldi	r25, 0x05	; 5
    4924:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print_decs(mouse_report.y); print(" ");
    4928:	00 d0       	rcall	.+0      	; 0x492a <mousekey_send+0x7a>
    492a:	00 d0       	rcall	.+0      	; 0x492c <mousekey_send+0x7c>
    492c:	8f ee       	ldi	r24, 0xEF	; 239
    492e:	95 e0       	ldi	r25, 0x05	; 5
    4930:	ad b7       	in	r26, 0x3d	; 61
    4932:	be b7       	in	r27, 0x3e	; 62
    4934:	12 96       	adiw	r26, 0x02	; 2
    4936:	9c 93       	st	X, r25
    4938:	8e 93       	st	-X, r24
    493a:	11 97       	sbiw	r26, 0x01	; 1
    493c:	80 91 a7 01 	lds	r24, 0x01A7
    4940:	99 27       	eor	r25, r25
    4942:	87 fd       	sbrc	r24, 7
    4944:	90 95       	com	r25
    4946:	14 96       	adiw	r26, 0x04	; 4
    4948:	9c 93       	st	X, r25
    494a:	8e 93       	st	-X, r24
    494c:	13 97       	sbiw	r26, 0x03	; 3
    494e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4952:	0f 90       	pop	r0
    4954:	0f 90       	pop	r0
    4956:	0f 90       	pop	r0
    4958:	0f 90       	pop	r0
    495a:	8d ee       	ldi	r24, 0xED	; 237
    495c:	95 e0       	ldi	r25, 0x05	; 5
    495e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print_decs(mouse_report.v); print(" ");
    4962:	00 d0       	rcall	.+0      	; 0x4964 <mousekey_send+0xb4>
    4964:	00 d0       	rcall	.+0      	; 0x4966 <mousekey_send+0xb6>
    4966:	8a ee       	ldi	r24, 0xEA	; 234
    4968:	95 e0       	ldi	r25, 0x05	; 5
    496a:	ed b7       	in	r30, 0x3d	; 61
    496c:	fe b7       	in	r31, 0x3e	; 62
    496e:	92 83       	std	Z+2, r25	; 0x02
    4970:	81 83       	std	Z+1, r24	; 0x01
    4972:	80 91 a8 01 	lds	r24, 0x01A8
    4976:	99 27       	eor	r25, r25
    4978:	87 fd       	sbrc	r24, 7
    497a:	90 95       	com	r25
    497c:	94 83       	std	Z+4, r25	; 0x04
    497e:	83 83       	std	Z+3, r24	; 0x03
    4980:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4984:	0f 90       	pop	r0
    4986:	0f 90       	pop	r0
    4988:	0f 90       	pop	r0
    498a:	0f 90       	pop	r0
    498c:	88 ee       	ldi	r24, 0xE8	; 232
    498e:	95 e0       	ldi	r25, 0x05	; 5
    4990:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print_decs(mouse_report.h); print("](");
    4994:	00 d0       	rcall	.+0      	; 0x4996 <mousekey_send+0xe6>
    4996:	00 d0       	rcall	.+0      	; 0x4998 <mousekey_send+0xe8>
    4998:	85 ee       	ldi	r24, 0xE5	; 229
    499a:	95 e0       	ldi	r25, 0x05	; 5
    499c:	ad b7       	in	r26, 0x3d	; 61
    499e:	be b7       	in	r27, 0x3e	; 62
    49a0:	12 96       	adiw	r26, 0x02	; 2
    49a2:	9c 93       	st	X, r25
    49a4:	8e 93       	st	-X, r24
    49a6:	11 97       	sbiw	r26, 0x01	; 1
    49a8:	80 91 a9 01 	lds	r24, 0x01A9
    49ac:	99 27       	eor	r25, r25
    49ae:	87 fd       	sbrc	r24, 7
    49b0:	90 95       	com	r25
    49b2:	14 96       	adiw	r26, 0x04	; 4
    49b4:	9c 93       	st	X, r25
    49b6:	8e 93       	st	-X, r24
    49b8:	13 97       	sbiw	r26, 0x03	; 3
    49ba:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    49be:	0f 90       	pop	r0
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	82 ee       	ldi	r24, 0xE2	; 226
    49c8:	95 e0       	ldi	r25, 0x05	; 5
    49ca:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print_dec(mousekey_repeat); print("/");
    49ce:	00 d0       	rcall	.+0      	; 0x49d0 <mousekey_send+0x120>
    49d0:	00 d0       	rcall	.+0      	; 0x49d2 <mousekey_send+0x122>
    49d2:	ed b7       	in	r30, 0x3d	; 61
    49d4:	fe b7       	in	r31, 0x3e	; 62
    49d6:	31 96       	adiw	r30, 0x01	; 1
    49d8:	8f ed       	ldi	r24, 0xDF	; 223
    49da:	95 e0       	ldi	r25, 0x05	; 5
    49dc:	ad b7       	in	r26, 0x3d	; 61
    49de:	be b7       	in	r27, 0x3e	; 62
    49e0:	12 96       	adiw	r26, 0x02	; 2
    49e2:	9c 93       	st	X, r25
    49e4:	8e 93       	st	-X, r24
    49e6:	11 97       	sbiw	r26, 0x01	; 1
    49e8:	80 91 aa 01 	lds	r24, 0x01AA
    49ec:	82 83       	std	Z+2, r24	; 0x02
    49ee:	13 82       	std	Z+3, r1	; 0x03
    49f0:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	8d ed       	ldi	r24, 0xDD	; 221
    49fe:	95 e0       	ldi	r25, 0x05	; 5
    4a00:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4a04:	00 d0       	rcall	.+0      	; 0x4a06 <mousekey_send+0x156>
    4a06:	00 d0       	rcall	.+0      	; 0x4a08 <mousekey_send+0x158>
    4a08:	ed b7       	in	r30, 0x3d	; 61
    4a0a:	fe b7       	in	r31, 0x3e	; 62
    4a0c:	31 96       	adiw	r30, 0x01	; 1
    4a0e:	8a ed       	ldi	r24, 0xDA	; 218
    4a10:	95 e0       	ldi	r25, 0x05	; 5
    4a12:	ad b7       	in	r26, 0x3d	; 61
    4a14:	be b7       	in	r27, 0x3e	; 62
    4a16:	12 96       	adiw	r26, 0x02	; 2
    4a18:	9c 93       	st	X, r25
    4a1a:	8e 93       	st	-X, r24
    4a1c:	11 97       	sbiw	r26, 0x01	; 1
    4a1e:	80 91 ab 01 	lds	r24, 0x01AB
    4a22:	82 83       	std	Z+2, r24	; 0x02
    4a24:	13 82       	std	Z+3, r1	; 0x03
    4a26:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	87 ed       	ldi	r24, 0xD7	; 215
    4a34:	95 e0       	ldi	r25, 0x05	; 5
    4a36:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4a3a:	85 ea       	ldi	r24, 0xA5	; 165
    4a3c:	91 e0       	ldi	r25, 0x01	; 1
    4a3e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <host_mouse_send>
    last_timer = timer_read();
    4a42:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <timer_read>
    4a46:	90 93 ad 01 	sts	0x01AD, r25
    4a4a:	80 93 ac 01 	sts	0x01AC, r24
}
    4a4e:	08 95       	ret

00004a50 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4a50:	1f 93       	push	r17
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4a52:	80 91 ac 01 	lds	r24, 0x01AC
    4a56:	90 91 ad 01 	lds	r25, 0x01AD
    4a5a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <timer_elapsed>
    4a5e:	ac 01       	movw	r20, r24
    4a60:	20 91 aa 01 	lds	r18, 0x01AA
    4a64:	22 23       	and	r18, r18
    4a66:	21 f0       	breq	.+8      	; 0x4a70 <mousekey_task+0x20>
    4a68:	80 91 10 01 	lds	r24, 0x0110
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	06 c0       	rjmp	.+12     	; 0x4a7c <mousekey_task+0x2c>
    4a70:	90 91 0f 01 	lds	r25, 0x010F
    4a74:	8a e0       	ldi	r24, 0x0A	; 10
    4a76:	98 9f       	mul	r25, r24
    4a78:	c0 01       	movw	r24, r0
    4a7a:	11 24       	eor	r1, r1
    4a7c:	48 17       	cp	r20, r24
    4a7e:	59 07       	cpc	r21, r25
    4a80:	08 f4       	brcc	.+2      	; 0x4a84 <mousekey_task+0x34>
    4a82:	85 c0       	rjmp	.+266    	; 0x4b8e <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4a84:	90 91 a6 01 	lds	r25, 0x01A6
    4a88:	99 23       	and	r25, r25
    4a8a:	69 f4       	brne	.+26     	; 0x4aa6 <mousekey_task+0x56>
    4a8c:	80 91 a7 01 	lds	r24, 0x01A7
    4a90:	88 23       	and	r24, r24
    4a92:	49 f4       	brne	.+18     	; 0x4aa6 <mousekey_task+0x56>
    4a94:	80 91 a8 01 	lds	r24, 0x01A8
    4a98:	88 23       	and	r24, r24
    4a9a:	29 f4       	brne	.+10     	; 0x4aa6 <mousekey_task+0x56>
    4a9c:	80 91 a9 01 	lds	r24, 0x01A9
    4aa0:	88 23       	and	r24, r24
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <mousekey_task+0x56>
    4aa4:	74 c0       	rjmp	.+232    	; 0x4b8e <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4aa6:	2f 3f       	cpi	r18, 0xFF	; 255
    4aa8:	19 f0       	breq	.+6      	; 0x4ab0 <mousekey_task+0x60>
        mousekey_repeat++;
    4aaa:	2f 5f       	subi	r18, 0xFF	; 255
    4aac:	20 93 aa 01 	sts	0x01AA, r18


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4ab0:	19 16       	cp	r1, r25
    4ab2:	24 f4       	brge	.+8      	; 0x4abc <mousekey_task+0x6c>
    4ab4:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    4ab8:	80 93 a6 01 	sts	0x01A6, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4abc:	80 91 a6 01 	lds	r24, 0x01A6
    4ac0:	87 ff       	sbrs	r24, 7
    4ac2:	05 c0       	rjmp	.+10     	; 0x4ace <mousekey_task+0x7e>
    4ac4:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    4ac8:	81 95       	neg	r24
    4aca:	80 93 a6 01 	sts	0x01A6, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4ace:	80 91 a7 01 	lds	r24, 0x01A7
    4ad2:	18 16       	cp	r1, r24
    4ad4:	24 f4       	brge	.+8      	; 0x4ade <mousekey_task+0x8e>
    4ad6:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    4ada:	80 93 a7 01 	sts	0x01A7, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4ade:	80 91 a7 01 	lds	r24, 0x01A7
    4ae2:	87 ff       	sbrs	r24, 7
    4ae4:	05 c0       	rjmp	.+10     	; 0x4af0 <mousekey_task+0xa0>
    4ae6:	0e 94 df 22 	call	0x45be	; 0x45be <move_unit>
    4aea:	81 95       	neg	r24
    4aec:	80 93 a7 01 	sts	0x01A7, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4af0:	60 91 a6 01 	lds	r22, 0x01A6
    4af4:	66 23       	and	r22, r22
    4af6:	39 f1       	breq	.+78     	; 0x4b46 <mousekey_task+0xf6>
    4af8:	10 91 a7 01 	lds	r17, 0x01A7
    4afc:	11 23       	and	r17, r17
    4afe:	19 f1       	breq	.+70     	; 0x4b46 <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    4b00:	77 27       	eor	r23, r23
    4b02:	67 fd       	sbrc	r22, 7
    4b04:	70 95       	com	r23
    4b06:	87 2f       	mov	r24, r23
    4b08:	97 2f       	mov	r25, r23
    4b0a:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <__floatsisf>
    4b0e:	23 e3       	ldi	r18, 0x33	; 51
    4b10:	33 e3       	ldi	r19, 0x33	; 51
    4b12:	43 e3       	ldi	r20, 0x33	; 51
    4b14:	5f e3       	ldi	r21, 0x3F	; 63
    4b16:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__mulsf3>
    4b1a:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <__fixsfsi>
    4b1e:	60 93 a6 01 	sts	0x01A6, r22
        mouse_report.y *= 0.7;
    4b22:	61 2f       	mov	r22, r17
    4b24:	77 27       	eor	r23, r23
    4b26:	67 fd       	sbrc	r22, 7
    4b28:	70 95       	com	r23
    4b2a:	87 2f       	mov	r24, r23
    4b2c:	97 2f       	mov	r25, r23
    4b2e:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <__floatsisf>
    4b32:	23 e3       	ldi	r18, 0x33	; 51
    4b34:	33 e3       	ldi	r19, 0x33	; 51
    4b36:	43 e3       	ldi	r20, 0x33	; 51
    4b38:	5f e3       	ldi	r21, 0x3F	; 63
    4b3a:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__mulsf3>
    4b3e:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <__fixsfsi>
    4b42:	60 93 a7 01 	sts	0x01A7, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4b46:	80 91 a8 01 	lds	r24, 0x01A8
    4b4a:	18 16       	cp	r1, r24
    4b4c:	24 f4       	brge	.+8      	; 0x4b56 <mousekey_task+0x106>
    4b4e:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    4b52:	80 93 a8 01 	sts	0x01A8, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4b56:	80 91 a8 01 	lds	r24, 0x01A8
    4b5a:	87 ff       	sbrs	r24, 7
    4b5c:	05 c0       	rjmp	.+10     	; 0x4b68 <mousekey_task+0x118>
    4b5e:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    4b62:	81 95       	neg	r24
    4b64:	80 93 a8 01 	sts	0x01A8, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4b68:	80 91 a9 01 	lds	r24, 0x01A9
    4b6c:	18 16       	cp	r1, r24
    4b6e:	24 f4       	brge	.+8      	; 0x4b78 <mousekey_task+0x128>
    4b70:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    4b74:	80 93 a9 01 	sts	0x01A9, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4b78:	80 91 a9 01 	lds	r24, 0x01A9
    4b7c:	87 ff       	sbrs	r24, 7
    4b7e:	05 c0       	rjmp	.+10     	; 0x4b8a <mousekey_task+0x13a>
    4b80:	0e 94 27 23 	call	0x464e	; 0x464e <wheel_unit>
    4b84:	81 95       	neg	r24
    4b86:	80 93 a9 01 	sts	0x01A9, r24

    mousekey_send();
    4b8a:	0e 94 58 24 	call	0x48b0	; 0x48b0 <mousekey_send>
}
    4b8e:	1f 91       	pop	r17
    4b90:	08 95       	ret

00004b92 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4b92:	80 e0       	ldi	r24, 0x00	; 0
    4b94:	08 95       	ret

00004b96 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4b96:	80 e0       	ldi	r24, 0x00	; 0
    4b98:	08 95       	ret

00004b9a <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4b9a:	8a e3       	ldi	r24, 0x3A	; 58
    4b9c:	9a e0       	ldi	r25, 0x0A	; 10
    4b9e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
          "ESC/q:	quit\n"
#ifdef MOUSEKEY_ENABLE
          "m:	mousekey\n"
#endif
    );
}
    4ba2:	08 95       	ret

00004ba4 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4ba4:	8e eb       	ldi	r24, 0xBE	; 190
    4ba6:	9a e0       	ldi	r25, 0x0A	; 10
    4ba8:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4bac:	00 d0       	rcall	.+0      	; 0x4bae <mousekey_console_help+0xa>
    4bae:	00 d0       	rcall	.+0      	; 0x4bb0 <mousekey_console_help+0xc>
    4bb0:	00 d0       	rcall	.+0      	; 0x4bb2 <mousekey_console_help+0xe>
    4bb2:	ed b7       	in	r30, 0x3d	; 61
    4bb4:	fe b7       	in	r31, 0x3e	; 62
    4bb6:	31 96       	adiw	r30, 0x01	; 1
    4bb8:	80 e7       	ldi	r24, 0x70	; 112
    4bba:	9a e0       	ldi	r25, 0x0A	; 10
    4bbc:	ad b7       	in	r26, 0x3d	; 61
    4bbe:	be b7       	in	r27, 0x3e	; 62
    4bc0:	12 96       	adiw	r26, 0x02	; 2
    4bc2:	9c 93       	st	X, r25
    4bc4:	8e 93       	st	-X, r24
    4bc6:	11 97       	sbiw	r26, 0x01	; 1
    4bc8:	85 e0       	ldi	r24, 0x05	; 5
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	93 83       	std	Z+3, r25	; 0x03
    4bce:	82 83       	std	Z+2, r24	; 0x02
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	95 83       	std	Z+5, r25	; 0x05
    4bd6:	84 83       	std	Z+4, r24	; 0x04
    4bd8:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4bdc:	8d b7       	in	r24, 0x3d	; 61
    4bde:	9e b7       	in	r25, 0x3e	; 62
    4be0:	06 96       	adiw	r24, 0x06	; 6
    4be2:	0f b6       	in	r0, 0x3f	; 63
    4be4:	f8 94       	cli
    4be6:	9e bf       	out	0x3e, r25	; 62
    4be8:	0f be       	out	0x3f, r0	; 63
    4bea:	8d bf       	out	0x3d, r24	; 61
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4bec:	08 95       	ret

00004bee <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4bee:	83 30       	cpi	r24, 0x03	; 3
    4bf0:	09 f4       	brne	.+2      	; 0x4bf4 <mousekey_param_inc+0x6>
    4bf2:	52 c0       	rjmp	.+164    	; 0x4c98 <mousekey_param_inc+0xaa>
    4bf4:	84 30       	cpi	r24, 0x04	; 4
    4bf6:	30 f4       	brcc	.+12     	; 0x4c04 <mousekey_param_inc+0x16>
    4bf8:	81 30       	cpi	r24, 0x01	; 1
    4bfa:	71 f0       	breq	.+28     	; 0x4c18 <mousekey_param_inc+0x2a>
    4bfc:	82 30       	cpi	r24, 0x02	; 2
    4bfe:	09 f0       	breq	.+2      	; 0x4c02 <mousekey_param_inc+0x14>
    4c00:	da c0       	rjmp	.+436    	; 0x4db6 <mousekey_param_inc+0x1c8>
    4c02:	2a c0       	rjmp	.+84     	; 0x4c58 <mousekey_param_inc+0x6a>
    4c04:	85 30       	cpi	r24, 0x05	; 5
    4c06:	09 f4       	brne	.+2      	; 0x4c0a <mousekey_param_inc+0x1c>
    4c08:	87 c0       	rjmp	.+270    	; 0x4d18 <mousekey_param_inc+0x12a>
    4c0a:	85 30       	cpi	r24, 0x05	; 5
    4c0c:	08 f4       	brcc	.+2      	; 0x4c10 <mousekey_param_inc+0x22>
    4c0e:	64 c0       	rjmp	.+200    	; 0x4cd8 <mousekey_param_inc+0xea>
    4c10:	86 30       	cpi	r24, 0x06	; 6
    4c12:	09 f0       	breq	.+2      	; 0x4c16 <mousekey_param_inc+0x28>
    4c14:	d0 c0       	rjmp	.+416    	; 0x4db6 <mousekey_param_inc+0x1c8>
    4c16:	a8 c0       	rjmp	.+336    	; 0x4d68 <mousekey_param_inc+0x17a>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4c18:	20 91 0f 01 	lds	r18, 0x010F
    4c1c:	82 2f       	mov	r24, r18
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	86 0f       	add	r24, r22
    4c22:	91 1d       	adc	r25, r1
    4c24:	8f 3f       	cpi	r24, 0xFF	; 255
    4c26:	91 05       	cpc	r25, r1
    4c28:	20 f4       	brcc	.+8      	; 0x4c32 <mousekey_param_inc+0x44>
                mk_delay += inc;
    4c2a:	26 0f       	add	r18, r22
    4c2c:	20 93 0f 01 	sts	0x010F, r18
    4c30:	03 c0       	rjmp	.+6      	; 0x4c38 <mousekey_param_inc+0x4a>
            else
                mk_delay = UINT8_MAX;
    4c32:	8f ef       	ldi	r24, 0xFF	; 255
    4c34:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_delay);
    4c38:	00 d0       	rcall	.+0      	; 0x4c3a <mousekey_param_inc+0x4c>
    4c3a:	00 d0       	rcall	.+0      	; 0x4c3c <mousekey_param_inc+0x4e>
    4c3c:	ed b7       	in	r30, 0x3d	; 61
    4c3e:	fe b7       	in	r31, 0x3e	; 62
    4c40:	31 96       	adiw	r30, 0x01	; 1
    4c42:	8f ed       	ldi	r24, 0xDF	; 223
    4c44:	9c e0       	ldi	r25, 0x0C	; 12
    4c46:	ad b7       	in	r26, 0x3d	; 61
    4c48:	be b7       	in	r27, 0x3e	; 62
    4c4a:	12 96       	adiw	r26, 0x02	; 2
    4c4c:	9c 93       	st	X, r25
    4c4e:	8e 93       	st	-X, r24
    4c50:	11 97       	sbiw	r26, 0x01	; 1
    4c52:	80 91 0f 01 	lds	r24, 0x010F
    4c56:	7f c0       	rjmp	.+254    	; 0x4d56 <mousekey_param_inc+0x168>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4c58:	20 91 10 01 	lds	r18, 0x0110
    4c5c:	82 2f       	mov	r24, r18
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	86 0f       	add	r24, r22
    4c62:	91 1d       	adc	r25, r1
    4c64:	8f 3f       	cpi	r24, 0xFF	; 255
    4c66:	91 05       	cpc	r25, r1
    4c68:	20 f4       	brcc	.+8      	; 0x4c72 <mousekey_param_inc+0x84>
                mk_interval += inc;
    4c6a:	26 0f       	add	r18, r22
    4c6c:	20 93 10 01 	sts	0x0110, r18
    4c70:	03 c0       	rjmp	.+6      	; 0x4c78 <mousekey_param_inc+0x8a>
            else
                mk_interval = UINT8_MAX;
    4c72:	8f ef       	ldi	r24, 0xFF	; 255
    4c74:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_interval);
    4c78:	00 d0       	rcall	.+0      	; 0x4c7a <mousekey_param_inc+0x8c>
    4c7a:	00 d0       	rcall	.+0      	; 0x4c7c <mousekey_param_inc+0x8e>
    4c7c:	ed b7       	in	r30, 0x3d	; 61
    4c7e:	fe b7       	in	r31, 0x3e	; 62
    4c80:	31 96       	adiw	r30, 0x01	; 1
    4c82:	8d ec       	ldi	r24, 0xCD	; 205
    4c84:	9c e0       	ldi	r25, 0x0C	; 12
    4c86:	ad b7       	in	r26, 0x3d	; 61
    4c88:	be b7       	in	r27, 0x3e	; 62
    4c8a:	12 96       	adiw	r26, 0x02	; 2
    4c8c:	9c 93       	st	X, r25
    4c8e:	8e 93       	st	-X, r24
    4c90:	11 97       	sbiw	r26, 0x01	; 1
    4c92:	80 91 10 01 	lds	r24, 0x0110
    4c96:	5f c0       	rjmp	.+190    	; 0x4d56 <mousekey_param_inc+0x168>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4c98:	20 91 11 01 	lds	r18, 0x0111
    4c9c:	82 2f       	mov	r24, r18
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	86 0f       	add	r24, r22
    4ca2:	91 1d       	adc	r25, r1
    4ca4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ca6:	91 05       	cpc	r25, r1
    4ca8:	20 f4       	brcc	.+8      	; 0x4cb2 <mousekey_param_inc+0xc4>
                mk_max_speed += inc;
    4caa:	26 0f       	add	r18, r22
    4cac:	20 93 11 01 	sts	0x0111, r18
    4cb0:	03 c0       	rjmp	.+6      	; 0x4cb8 <mousekey_param_inc+0xca>
            else
                mk_max_speed = UINT8_MAX;
    4cb2:	8f ef       	ldi	r24, 0xFF	; 255
    4cb4:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    4cb8:	00 d0       	rcall	.+0      	; 0x4cba <mousekey_param_inc+0xcc>
    4cba:	00 d0       	rcall	.+0      	; 0x4cbc <mousekey_param_inc+0xce>
    4cbc:	ed b7       	in	r30, 0x3d	; 61
    4cbe:	fe b7       	in	r31, 0x3e	; 62
    4cc0:	31 96       	adiw	r30, 0x01	; 1
    4cc2:	8a eb       	ldi	r24, 0xBA	; 186
    4cc4:	9c e0       	ldi	r25, 0x0C	; 12
    4cc6:	ad b7       	in	r26, 0x3d	; 61
    4cc8:	be b7       	in	r27, 0x3e	; 62
    4cca:	12 96       	adiw	r26, 0x02	; 2
    4ccc:	9c 93       	st	X, r25
    4cce:	8e 93       	st	-X, r24
    4cd0:	11 97       	sbiw	r26, 0x01	; 1
    4cd2:	80 91 11 01 	lds	r24, 0x0111
    4cd6:	3f c0       	rjmp	.+126    	; 0x4d56 <mousekey_param_inc+0x168>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4cd8:	20 91 12 01 	lds	r18, 0x0112
    4cdc:	82 2f       	mov	r24, r18
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	86 0f       	add	r24, r22
    4ce2:	91 1d       	adc	r25, r1
    4ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ce6:	91 05       	cpc	r25, r1
    4ce8:	20 f4       	brcc	.+8      	; 0x4cf2 <mousekey_param_inc+0x104>
                mk_time_to_max += inc;
    4cea:	26 0f       	add	r18, r22
    4cec:	20 93 12 01 	sts	0x0112, r18
    4cf0:	03 c0       	rjmp	.+6      	; 0x4cf8 <mousekey_param_inc+0x10a>
            else
                mk_time_to_max = UINT8_MAX;
    4cf2:	8f ef       	ldi	r24, 0xFF	; 255
    4cf4:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_time_to_max);
    4cf8:	00 d0       	rcall	.+0      	; 0x4cfa <mousekey_param_inc+0x10c>
    4cfa:	00 d0       	rcall	.+0      	; 0x4cfc <mousekey_param_inc+0x10e>
    4cfc:	ed b7       	in	r30, 0x3d	; 61
    4cfe:	fe b7       	in	r31, 0x3e	; 62
    4d00:	31 96       	adiw	r30, 0x01	; 1
    4d02:	85 ea       	ldi	r24, 0xA5	; 165
    4d04:	9c e0       	ldi	r25, 0x0C	; 12
    4d06:	ad b7       	in	r26, 0x3d	; 61
    4d08:	be b7       	in	r27, 0x3e	; 62
    4d0a:	12 96       	adiw	r26, 0x02	; 2
    4d0c:	9c 93       	st	X, r25
    4d0e:	8e 93       	st	-X, r24
    4d10:	11 97       	sbiw	r26, 0x01	; 1
    4d12:	80 91 12 01 	lds	r24, 0x0112
    4d16:	1f c0       	rjmp	.+62     	; 0x4d56 <mousekey_param_inc+0x168>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4d18:	20 91 13 01 	lds	r18, 0x0113
    4d1c:	82 2f       	mov	r24, r18
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	86 0f       	add	r24, r22
    4d22:	91 1d       	adc	r25, r1
    4d24:	8f 3f       	cpi	r24, 0xFF	; 255
    4d26:	91 05       	cpc	r25, r1
    4d28:	20 f4       	brcc	.+8      	; 0x4d32 <mousekey_param_inc+0x144>
                mk_wheel_max_speed += inc;
    4d2a:	26 0f       	add	r18, r22
    4d2c:	20 93 13 01 	sts	0x0113, r18
    4d30:	03 c0       	rjmp	.+6      	; 0x4d38 <mousekey_param_inc+0x14a>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4d32:	8f ef       	ldi	r24, 0xFF	; 255
    4d34:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4d38:	00 d0       	rcall	.+0      	; 0x4d3a <mousekey_param_inc+0x14c>
    4d3a:	00 d0       	rcall	.+0      	; 0x4d3c <mousekey_param_inc+0x14e>
    4d3c:	ed b7       	in	r30, 0x3d	; 61
    4d3e:	fe b7       	in	r31, 0x3e	; 62
    4d40:	31 96       	adiw	r30, 0x01	; 1
    4d42:	8c e8       	ldi	r24, 0x8C	; 140
    4d44:	9c e0       	ldi	r25, 0x0C	; 12
    4d46:	ad b7       	in	r26, 0x3d	; 61
    4d48:	be b7       	in	r27, 0x3e	; 62
    4d4a:	12 96       	adiw	r26, 0x02	; 2
    4d4c:	9c 93       	st	X, r25
    4d4e:	8e 93       	st	-X, r24
    4d50:	11 97       	sbiw	r26, 0x01	; 1
    4d52:	80 91 13 01 	lds	r24, 0x0113
    4d56:	82 83       	std	Z+2, r24	; 0x02
    4d58:	13 82       	std	Z+3, r1	; 0x03
    4d5a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4d5e:	0f 90       	pop	r0
    4d60:	0f 90       	pop	r0
    4d62:	0f 90       	pop	r0
    4d64:	0f 90       	pop	r0
    4d66:	08 95       	ret
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4d68:	20 91 14 01 	lds	r18, 0x0114
    4d6c:	82 2f       	mov	r24, r18
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	86 0f       	add	r24, r22
    4d72:	91 1d       	adc	r25, r1
    4d74:	8f 3f       	cpi	r24, 0xFF	; 255
    4d76:	91 05       	cpc	r25, r1
    4d78:	20 f4       	brcc	.+8      	; 0x4d82 <mousekey_param_inc+0x194>
                mk_wheel_time_to_max += inc;
    4d7a:	26 0f       	add	r18, r22
    4d7c:	20 93 14 01 	sts	0x0114, r18
    4d80:	03 c0       	rjmp	.+6      	; 0x4d88 <mousekey_param_inc+0x19a>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4d82:	8f ef       	ldi	r24, 0xFF	; 255
    4d84:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4d88:	00 d0       	rcall	.+0      	; 0x4d8a <mousekey_param_inc+0x19c>
    4d8a:	00 d0       	rcall	.+0      	; 0x4d8c <mousekey_param_inc+0x19e>
    4d8c:	ed b7       	in	r30, 0x3d	; 61
    4d8e:	fe b7       	in	r31, 0x3e	; 62
    4d90:	31 96       	adiw	r30, 0x01	; 1
    4d92:	81 e7       	ldi	r24, 0x71	; 113
    4d94:	9c e0       	ldi	r25, 0x0C	; 12
    4d96:	ad b7       	in	r26, 0x3d	; 61
    4d98:	be b7       	in	r27, 0x3e	; 62
    4d9a:	12 96       	adiw	r26, 0x02	; 2
    4d9c:	9c 93       	st	X, r25
    4d9e:	8e 93       	st	-X, r24
    4da0:	11 97       	sbiw	r26, 0x01	; 1
    4da2:	80 91 14 01 	lds	r24, 0x0114
    4da6:	82 83       	std	Z+2, r24	; 0x02
    4da8:	13 82       	std	Z+3, r1	; 0x03
    4daa:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	08 95       	ret

00004db8 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4db8:	83 30       	cpi	r24, 0x03	; 3
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <mousekey_param_dec+0x6>
    4dbc:	46 c0       	rjmp	.+140    	; 0x4e4a <mousekey_param_dec+0x92>
    4dbe:	84 30       	cpi	r24, 0x04	; 4
    4dc0:	30 f4       	brcc	.+12     	; 0x4dce <mousekey_param_dec+0x16>
    4dc2:	81 30       	cpi	r24, 0x01	; 1
    4dc4:	71 f0       	breq	.+28     	; 0x4de2 <mousekey_param_dec+0x2a>
    4dc6:	82 30       	cpi	r24, 0x02	; 2
    4dc8:	09 f0       	breq	.+2      	; 0x4dcc <mousekey_param_dec+0x14>
    4dca:	b6 c0       	rjmp	.+364    	; 0x4f38 <mousekey_param_dec+0x180>
    4dcc:	24 c0       	rjmp	.+72     	; 0x4e16 <mousekey_param_dec+0x5e>
    4dce:	85 30       	cpi	r24, 0x05	; 5
    4dd0:	09 f4       	brne	.+2      	; 0x4dd4 <mousekey_param_dec+0x1c>
    4dd2:	6f c0       	rjmp	.+222    	; 0x4eb2 <mousekey_param_dec+0xfa>
    4dd4:	85 30       	cpi	r24, 0x05	; 5
    4dd6:	08 f4       	brcc	.+2      	; 0x4dda <mousekey_param_dec+0x22>
    4dd8:	52 c0       	rjmp	.+164    	; 0x4e7e <mousekey_param_dec+0xc6>
    4dda:	86 30       	cpi	r24, 0x06	; 6
    4ddc:	09 f0       	breq	.+2      	; 0x4de0 <mousekey_param_dec+0x28>
    4dde:	ac c0       	rjmp	.+344    	; 0x4f38 <mousekey_param_dec+0x180>
    4de0:	8a c0       	rjmp	.+276    	; 0x4ef6 <mousekey_param_dec+0x13e>
        case 1:
            if (mk_delay > dec)
    4de2:	80 91 0f 01 	lds	r24, 0x010F
    4de6:	68 17       	cp	r22, r24
    4de8:	20 f4       	brcc	.+8      	; 0x4df2 <mousekey_param_dec+0x3a>
                mk_delay -= dec;
    4dea:	86 1b       	sub	r24, r22
    4dec:	80 93 0f 01 	sts	0x010F, r24
    4df0:	02 c0       	rjmp	.+4      	; 0x4df6 <mousekey_param_dec+0x3e>
            else
                mk_delay = 0;
    4df2:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_delay);
    4df6:	00 d0       	rcall	.+0      	; 0x4df8 <mousekey_param_dec+0x40>
    4df8:	00 d0       	rcall	.+0      	; 0x4dfa <mousekey_param_dec+0x42>
    4dfa:	ed b7       	in	r30, 0x3d	; 61
    4dfc:	fe b7       	in	r31, 0x3e	; 62
    4dfe:	31 96       	adiw	r30, 0x01	; 1
    4e00:	8c e5       	ldi	r24, 0x5C	; 92
    4e02:	9d e0       	ldi	r25, 0x0D	; 13
    4e04:	ad b7       	in	r26, 0x3d	; 61
    4e06:	be b7       	in	r27, 0x3e	; 62
    4e08:	12 96       	adiw	r26, 0x02	; 2
    4e0a:	9c 93       	st	X, r25
    4e0c:	8e 93       	st	-X, r24
    4e0e:	11 97       	sbiw	r26, 0x01	; 1
    4e10:	80 91 0f 01 	lds	r24, 0x010F
    4e14:	67 c0       	rjmp	.+206    	; 0x4ee4 <mousekey_param_dec+0x12c>
            break;
        case 2:
            if (mk_interval > dec)
    4e16:	80 91 10 01 	lds	r24, 0x0110
    4e1a:	68 17       	cp	r22, r24
    4e1c:	20 f4       	brcc	.+8      	; 0x4e26 <mousekey_param_dec+0x6e>
                mk_interval -= dec;
    4e1e:	86 1b       	sub	r24, r22
    4e20:	80 93 10 01 	sts	0x0110, r24
    4e24:	02 c0       	rjmp	.+4      	; 0x4e2a <mousekey_param_dec+0x72>
            else
                mk_interval = 0;
    4e26:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_interval);
    4e2a:	00 d0       	rcall	.+0      	; 0x4e2c <mousekey_param_dec+0x74>
    4e2c:	00 d0       	rcall	.+0      	; 0x4e2e <mousekey_param_dec+0x76>
    4e2e:	ed b7       	in	r30, 0x3d	; 61
    4e30:	fe b7       	in	r31, 0x3e	; 62
    4e32:	31 96       	adiw	r30, 0x01	; 1
    4e34:	8a e4       	ldi	r24, 0x4A	; 74
    4e36:	9d e0       	ldi	r25, 0x0D	; 13
    4e38:	ad b7       	in	r26, 0x3d	; 61
    4e3a:	be b7       	in	r27, 0x3e	; 62
    4e3c:	12 96       	adiw	r26, 0x02	; 2
    4e3e:	9c 93       	st	X, r25
    4e40:	8e 93       	st	-X, r24
    4e42:	11 97       	sbiw	r26, 0x01	; 1
    4e44:	80 91 10 01 	lds	r24, 0x0110
    4e48:	4d c0       	rjmp	.+154    	; 0x4ee4 <mousekey_param_dec+0x12c>
            break;
        case 3:
            if (mk_max_speed > dec)
    4e4a:	80 91 11 01 	lds	r24, 0x0111
    4e4e:	68 17       	cp	r22, r24
    4e50:	20 f4       	brcc	.+8      	; 0x4e5a <mousekey_param_dec+0xa2>
                mk_max_speed -= dec;
    4e52:	86 1b       	sub	r24, r22
    4e54:	80 93 11 01 	sts	0x0111, r24
    4e58:	02 c0       	rjmp	.+4      	; 0x4e5e <mousekey_param_dec+0xa6>
            else
                mk_max_speed = 0;
    4e5a:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    4e5e:	00 d0       	rcall	.+0      	; 0x4e60 <mousekey_param_dec+0xa8>
    4e60:	00 d0       	rcall	.+0      	; 0x4e62 <mousekey_param_dec+0xaa>
    4e62:	ed b7       	in	r30, 0x3d	; 61
    4e64:	fe b7       	in	r31, 0x3e	; 62
    4e66:	31 96       	adiw	r30, 0x01	; 1
    4e68:	87 e3       	ldi	r24, 0x37	; 55
    4e6a:	9d e0       	ldi	r25, 0x0D	; 13
    4e6c:	ad b7       	in	r26, 0x3d	; 61
    4e6e:	be b7       	in	r27, 0x3e	; 62
    4e70:	12 96       	adiw	r26, 0x02	; 2
    4e72:	9c 93       	st	X, r25
    4e74:	8e 93       	st	-X, r24
    4e76:	11 97       	sbiw	r26, 0x01	; 1
    4e78:	80 91 11 01 	lds	r24, 0x0111
    4e7c:	33 c0       	rjmp	.+102    	; 0x4ee4 <mousekey_param_dec+0x12c>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4e7e:	80 91 12 01 	lds	r24, 0x0112
    4e82:	68 17       	cp	r22, r24
    4e84:	20 f4       	brcc	.+8      	; 0x4e8e <mousekey_param_dec+0xd6>
                mk_time_to_max -= dec;
    4e86:	86 1b       	sub	r24, r22
    4e88:	80 93 12 01 	sts	0x0112, r24
    4e8c:	02 c0       	rjmp	.+4      	; 0x4e92 <mousekey_param_dec+0xda>
            else
                mk_time_to_max = 0;
    4e8e:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_time_to_max);
    4e92:	00 d0       	rcall	.+0      	; 0x4e94 <mousekey_param_dec+0xdc>
    4e94:	00 d0       	rcall	.+0      	; 0x4e96 <mousekey_param_dec+0xde>
    4e96:	ed b7       	in	r30, 0x3d	; 61
    4e98:	fe b7       	in	r31, 0x3e	; 62
    4e9a:	31 96       	adiw	r30, 0x01	; 1
    4e9c:	82 e2       	ldi	r24, 0x22	; 34
    4e9e:	9d e0       	ldi	r25, 0x0D	; 13
    4ea0:	ad b7       	in	r26, 0x3d	; 61
    4ea2:	be b7       	in	r27, 0x3e	; 62
    4ea4:	12 96       	adiw	r26, 0x02	; 2
    4ea6:	9c 93       	st	X, r25
    4ea8:	8e 93       	st	-X, r24
    4eaa:	11 97       	sbiw	r26, 0x01	; 1
    4eac:	80 91 12 01 	lds	r24, 0x0112
    4eb0:	19 c0       	rjmp	.+50     	; 0x4ee4 <mousekey_param_dec+0x12c>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4eb2:	80 91 13 01 	lds	r24, 0x0113
    4eb6:	68 17       	cp	r22, r24
    4eb8:	20 f4       	brcc	.+8      	; 0x4ec2 <mousekey_param_dec+0x10a>
                mk_wheel_max_speed -= dec;
    4eba:	86 1b       	sub	r24, r22
    4ebc:	80 93 13 01 	sts	0x0113, r24
    4ec0:	02 c0       	rjmp	.+4      	; 0x4ec6 <mousekey_param_dec+0x10e>
            else
                mk_wheel_max_speed = 0;
    4ec2:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4ec6:	00 d0       	rcall	.+0      	; 0x4ec8 <mousekey_param_dec+0x110>
    4ec8:	00 d0       	rcall	.+0      	; 0x4eca <mousekey_param_dec+0x112>
    4eca:	ed b7       	in	r30, 0x3d	; 61
    4ecc:	fe b7       	in	r31, 0x3e	; 62
    4ece:	31 96       	adiw	r30, 0x01	; 1
    4ed0:	89 e0       	ldi	r24, 0x09	; 9
    4ed2:	9d e0       	ldi	r25, 0x0D	; 13
    4ed4:	ad b7       	in	r26, 0x3d	; 61
    4ed6:	be b7       	in	r27, 0x3e	; 62
    4ed8:	12 96       	adiw	r26, 0x02	; 2
    4eda:	9c 93       	st	X, r25
    4edc:	8e 93       	st	-X, r24
    4ede:	11 97       	sbiw	r26, 0x01	; 1
    4ee0:	80 91 13 01 	lds	r24, 0x0113
    4ee4:	82 83       	std	Z+2, r24	; 0x02
    4ee6:	13 82       	std	Z+3, r1	; 0x03
    4ee8:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	0f 90       	pop	r0
    4ef4:	08 95       	ret
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4ef6:	80 91 14 01 	lds	r24, 0x0114
    4efa:	68 17       	cp	r22, r24
    4efc:	20 f4       	brcc	.+8      	; 0x4f06 <mousekey_param_dec+0x14e>
                mk_wheel_time_to_max -= dec;
    4efe:	86 1b       	sub	r24, r22
    4f00:	80 93 14 01 	sts	0x0114, r24
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <mousekey_param_dec+0x152>
            else
                mk_wheel_time_to_max = 0;
    4f06:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4f0a:	00 d0       	rcall	.+0      	; 0x4f0c <mousekey_param_dec+0x154>
    4f0c:	00 d0       	rcall	.+0      	; 0x4f0e <mousekey_param_dec+0x156>
    4f0e:	ed b7       	in	r30, 0x3d	; 61
    4f10:	fe b7       	in	r31, 0x3e	; 62
    4f12:	31 96       	adiw	r30, 0x01	; 1
    4f14:	8e ee       	ldi	r24, 0xEE	; 238
    4f16:	9c e0       	ldi	r25, 0x0C	; 12
    4f18:	ad b7       	in	r26, 0x3d	; 61
    4f1a:	be b7       	in	r27, 0x3e	; 62
    4f1c:	12 96       	adiw	r26, 0x02	; 2
    4f1e:	9c 93       	st	X, r25
    4f20:	8e 93       	st	-X, r24
    4f22:	11 97       	sbiw	r26, 0x01	; 1
    4f24:	80 91 14 01 	lds	r24, 0x0114
    4f28:	82 83       	std	Z+2, r24	; 0x02
    4f2a:	13 82       	std	Z+3, r1	; 0x03
    4f2c:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    4f30:	0f 90       	pop	r0
    4f32:	0f 90       	pop	r0
    4f34:	0f 90       	pop	r0
    4f36:	0f 90       	pop	r0
    4f38:	08 95       	ret

00004f3a <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4f3a:	1f 93       	push	r17
    4f3c:	18 2f       	mov	r17, r24
    xprintf("L%d\n", layer);
    4f3e:	00 d0       	rcall	.+0      	; 0x4f40 <switch_default_layer+0x6>
    4f40:	00 d0       	rcall	.+0      	; 0x4f42 <switch_default_layer+0x8>
    4f42:	ed b7       	in	r30, 0x3d	; 61
    4f44:	fe b7       	in	r31, 0x3e	; 62
    4f46:	31 96       	adiw	r30, 0x01	; 1
    4f48:	81 e6       	ldi	r24, 0x61	; 97
    4f4a:	9a e0       	ldi	r25, 0x0A	; 10
    4f4c:	ad b7       	in	r26, 0x3d	; 61
    4f4e:	be b7       	in	r27, 0x3e	; 62
    4f50:	12 96       	adiw	r26, 0x02	; 2
    4f52:	9c 93       	st	X, r25
    4f54:	8e 93       	st	-X, r24
    4f56:	11 97       	sbiw	r26, 0x01	; 1
    4f58:	12 83       	std	Z+2, r17	; 0x02
    4f5a:	13 82       	std	Z+3, r1	; 0x03
    4f5c:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    default_layer_set(1UL<<layer);
    4f60:	0f 90       	pop	r0
    4f62:	0f 90       	pop	r0
    4f64:	0f 90       	pop	r0
    4f66:	0f 90       	pop	r0
    4f68:	61 e0       	ldi	r22, 0x01	; 1
    4f6a:	70 e0       	ldi	r23, 0x00	; 0
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	04 c0       	rjmp	.+8      	; 0x4f7a <switch_default_layer+0x40>
    4f72:	66 0f       	add	r22, r22
    4f74:	77 1f       	adc	r23, r23
    4f76:	88 1f       	adc	r24, r24
    4f78:	99 1f       	adc	r25, r25
    4f7a:	1a 95       	dec	r17
    4f7c:	d2 f7       	brpl	.-12     	; 0x4f72 <switch_default_layer+0x38>
    4f7e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <default_layer_set>
    clear_keyboard();
    4f82:	0e 94 bd 13 	call	0x277a	; 0x277a <clear_keyboard>
}
    4f86:	1f 91       	pop	r17
    4f88:	08 95       	ret

00004f8a <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4f8a:	1f 93       	push	r17
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4f8c:	8b 31       	cpi	r24, 0x1B	; 27
    4f8e:	09 f4       	brne	.+2      	; 0x4f92 <command_common+0x8>
    4f90:	63 c2       	rjmp	.+1222   	; 0x5458 <command_common+0x4ce>
    4f92:	8c 31       	cpi	r24, 0x1C	; 28
    4f94:	20 f5       	brcc	.+72     	; 0x4fde <command_common+0x54>
    4f96:	8e 30       	cpi	r24, 0x0E	; 14
    4f98:	09 f4       	brne	.+2      	; 0x4f9c <command_common+0x12>
    4f9a:	79 c2       	rjmp	.+1266   	; 0x548e <command_common+0x504>
    4f9c:	8f 30       	cpi	r24, 0x0F	; 15
    4f9e:	78 f4       	brcc	.+30     	; 0x4fbe <command_common+0x34>
    4fa0:	87 30       	cpi	r24, 0x07	; 7
    4fa2:	09 f4       	brne	.+2      	; 0x4fa6 <command_common+0x1c>
    4fa4:	4a c2       	rjmp	.+1172   	; 0x543a <command_common+0x4b0>
    4fa6:	88 30       	cpi	r24, 0x08	; 8
    4fa8:	20 f4       	brcc	.+8      	; 0x4fb2 <command_common+0x28>
    4faa:	86 30       	cpi	r24, 0x06	; 6
    4fac:	09 f0       	breq	.+2      	; 0x4fb0 <command_common+0x26>
    4fae:	39 c3       	rjmp	.+1650   	; 0x5622 <command_common+0x698>
    4fb0:	23 c2       	rjmp	.+1094   	; 0x53f8 <command_common+0x46e>
    4fb2:	88 30       	cpi	r24, 0x08	; 8
    4fb4:	b1 f1       	breq	.+108    	; 0x5022 <command_common+0x98>
    4fb6:	8b 30       	cpi	r24, 0x0B	; 11
    4fb8:	09 f0       	breq	.+2      	; 0x4fbc <command_common+0x32>
    4fba:	33 c3       	rjmp	.+1638   	; 0x5622 <command_common+0x698>
    4fbc:	17 c2       	rjmp	.+1070   	; 0x53ec <command_common+0x462>
    4fbe:	81 31       	cpi	r24, 0x11	; 17
    4fc0:	09 f4       	brne	.+2      	; 0x4fc4 <command_common+0x3a>
    4fc2:	17 c3       	rjmp	.+1582   	; 0x55f2 <command_common+0x668>
    4fc4:	82 31       	cpi	r24, 0x12	; 18
    4fc6:	20 f4       	brcc	.+8      	; 0x4fd0 <command_common+0x46>
    4fc8:	80 31       	cpi	r24, 0x10	; 16
    4fca:	09 f0       	breq	.+2      	; 0x4fce <command_common+0x44>
    4fcc:	2a c3       	rjmp	.+1620   	; 0x5622 <command_common+0x698>
    4fce:	75 c2       	rjmp	.+1258   	; 0x54ba <command_common+0x530>
    4fd0:	86 31       	cpi	r24, 0x16	; 22
    4fd2:	09 f4       	brne	.+2      	; 0x4fd6 <command_common+0x4c>
    4fd4:	a1 c2       	rjmp	.+1346   	; 0x5518 <command_common+0x58e>
    4fd6:	89 31       	cpi	r24, 0x19	; 25
    4fd8:	09 f0       	breq	.+2      	; 0x4fdc <command_common+0x52>
    4fda:	23 c3       	rjmp	.+1606   	; 0x5622 <command_common+0x698>
    4fdc:	86 c2       	rjmp	.+1292   	; 0x54ea <command_common+0x560>
    4fde:	85 33       	cpi	r24, 0x35	; 53
    4fe0:	09 f4       	brne	.+2      	; 0x4fe4 <command_common+0x5a>
    4fe2:	17 c3       	rjmp	.+1582   	; 0x5612 <command_common+0x688>
    4fe4:	86 33       	cpi	r24, 0x36	; 54
    4fe6:	68 f4       	brcc	.+26     	; 0x5002 <command_common+0x78>
    4fe8:	87 32       	cpi	r24, 0x27	; 39
    4fea:	09 f4       	brne	.+2      	; 0x4fee <command_common+0x64>
    4fec:	12 c3       	rjmp	.+1572   	; 0x5612 <command_common+0x688>
    4fee:	88 32       	cpi	r24, 0x28	; 40
    4ff0:	20 f4       	brcc	.+8      	; 0x4ffa <command_common+0x70>
    4ff2:	8e 31       	cpi	r24, 0x1E	; 30
    4ff4:	08 f4       	brcc	.+2      	; 0x4ff8 <command_common+0x6e>
    4ff6:	15 c3       	rjmp	.+1578   	; 0x5622 <command_common+0x698>
    4ff8:	0e c3       	rjmp	.+1564   	; 0x5616 <command_common+0x68c>
    4ffa:	89 32       	cpi	r24, 0x29	; 41
    4ffc:	09 f0       	breq	.+2      	; 0x5000 <command_common+0x76>
    4ffe:	11 c3       	rjmp	.+1570   	; 0x5622 <command_common+0x698>
    5000:	08 c3       	rjmp	.+1552   	; 0x5612 <command_common+0x688>
    5002:	83 34       	cpi	r24, 0x43	; 67
    5004:	38 f4       	brcc	.+14     	; 0x5014 <command_common+0x8a>
    5006:	8a 33       	cpi	r24, 0x3A	; 58
    5008:	08 f0       	brcs	.+2      	; 0x500c <command_common+0x82>
    500a:	07 c3       	rjmp	.+1550   	; 0x561a <command_common+0x690>
    500c:	88 33       	cpi	r24, 0x38	; 56
    500e:	09 f0       	breq	.+2      	; 0x5012 <command_common+0x88>
    5010:	08 c3       	rjmp	.+1552   	; 0x5622 <command_common+0x698>
    5012:	ec c1       	rjmp	.+984    	; 0x53ec <command_common+0x462>
    5014:	83 34       	cpi	r24, 0x43	; 67
    5016:	09 f4       	brne	.+2      	; 0x501a <command_common+0x90>
    5018:	fc c2       	rjmp	.+1528   	; 0x5612 <command_common+0x688>
    501a:	88 34       	cpi	r24, 0x48	; 72
    501c:	09 f0       	breq	.+2      	; 0x5020 <command_common+0x96>
    501e:	01 c3       	rjmp	.+1538   	; 0x5622 <command_common+0x698>
    5020:	fa c1       	rjmp	.+1012   	; 0x5416 <command_common+0x48c>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    5022:	87 e4       	ldi	r24, 0x47	; 71
    5024:	98 e0       	ldi	r25, 0x08	; 8
    5026:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    502a:	85 e8       	ldi	r24, 0x85	; 133
    502c:	99 e0       	ldi	r25, 0x09	; 9
    502e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5032:	0e 94 af 22 	call	0x455e	; 0x455e <eeconfig_read_default_layer>
    5036:	00 d0       	rcall	.+0      	; 0x5038 <command_common+0xae>
    5038:	00 d0       	rcall	.+0      	; 0x503a <command_common+0xb0>
    503a:	ed b7       	in	r30, 0x3d	; 61
    503c:	fe b7       	in	r31, 0x3e	; 62
    503e:	31 96       	adiw	r30, 0x01	; 1
    5040:	22 e8       	ldi	r18, 0x82	; 130
    5042:	39 e0       	ldi	r19, 0x09	; 9
    5044:	ad b7       	in	r26, 0x3d	; 61
    5046:	be b7       	in	r27, 0x3e	; 62
    5048:	12 96       	adiw	r26, 0x02	; 2
    504a:	3c 93       	st	X, r19
    504c:	2e 93       	st	-X, r18
    504e:	11 97       	sbiw	r26, 0x01	; 1
    5050:	82 83       	std	Z+2, r24	; 0x02
    5052:	13 82       	std	Z+3, r1	; 0x03
    5054:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5058:	0f 90       	pop	r0
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	80 e8       	ldi	r24, 0x80	; 128
    5062:	99 e0       	ldi	r25, 0x09	; 9
    5064:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    5068:	0e 94 b4 22 	call	0x4568	; 0x4568 <eeconfig_read_debug>
    506c:	18 2f       	mov	r17, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    506e:	8d e6       	ldi	r24, 0x6D	; 109
    5070:	99 e0       	ldi	r25, 0x09	; 9
    5072:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5076:	00 d0       	rcall	.+0      	; 0x5078 <command_common+0xee>
    5078:	00 d0       	rcall	.+0      	; 0x507a <command_common+0xf0>
    507a:	ed b7       	in	r30, 0x3d	; 61
    507c:	fe b7       	in	r31, 0x3e	; 62
    507e:	31 96       	adiw	r30, 0x01	; 1
    5080:	88 e6       	ldi	r24, 0x68	; 104
    5082:	99 e0       	ldi	r25, 0x09	; 9
    5084:	ad b7       	in	r26, 0x3d	; 61
    5086:	be b7       	in	r27, 0x3e	; 62
    5088:	12 96       	adiw	r26, 0x02	; 2
    508a:	9c 93       	st	X, r25
    508c:	8e 93       	st	-X, r24
    508e:	11 97       	sbiw	r26, 0x01	; 1
    5090:	12 83       	std	Z+2, r17	; 0x02
    5092:	13 82       	std	Z+3, r1	; 0x03
    5094:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5098:	0f 90       	pop	r0
    509a:	0f 90       	pop	r0
    509c:	0f 90       	pop	r0
    509e:	0f 90       	pop	r0
    50a0:	86 e6       	ldi	r24, 0x66	; 102
    50a2:	99 e0       	ldi	r25, 0x09	; 9
    50a4:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    50a8:	8c e5       	ldi	r24, 0x5C	; 92
    50aa:	99 e0       	ldi	r25, 0x09	; 9
    50ac:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    50b0:	00 d0       	rcall	.+0      	; 0x50b2 <command_common+0x128>
    50b2:	00 d0       	rcall	.+0      	; 0x50b4 <command_common+0x12a>
    50b4:	ed b7       	in	r30, 0x3d	; 61
    50b6:	fe b7       	in	r31, 0x3e	; 62
    50b8:	31 96       	adiw	r30, 0x01	; 1
    50ba:	89 e5       	ldi	r24, 0x59	; 89
    50bc:	99 e0       	ldi	r25, 0x09	; 9
    50be:	ad b7       	in	r26, 0x3d	; 61
    50c0:	be b7       	in	r27, 0x3e	; 62
    50c2:	12 96       	adiw	r26, 0x02	; 2
    50c4:	9c 93       	st	X, r25
    50c6:	8e 93       	st	-X, r24
    50c8:	11 97       	sbiw	r26, 0x01	; 1
    50ca:	81 2f       	mov	r24, r17
    50cc:	81 70       	andi	r24, 0x01	; 1
    50ce:	82 83       	std	Z+2, r24	; 0x02
    50d0:	13 82       	std	Z+3, r1	; 0x03
    50d2:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    50d6:	0f 90       	pop	r0
    50d8:	0f 90       	pop	r0
    50da:	0f 90       	pop	r0
    50dc:	0f 90       	pop	r0
    50de:	87 e5       	ldi	r24, 0x57	; 87
    50e0:	99 e0       	ldi	r25, 0x09	; 9
    50e2:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    50e6:	8d e4       	ldi	r24, 0x4D	; 77
    50e8:	99 e0       	ldi	r25, 0x09	; 9
    50ea:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    50ee:	00 d0       	rcall	.+0      	; 0x50f0 <command_common+0x166>
    50f0:	00 d0       	rcall	.+0      	; 0x50f2 <command_common+0x168>
    50f2:	ed b7       	in	r30, 0x3d	; 61
    50f4:	fe b7       	in	r31, 0x3e	; 62
    50f6:	31 96       	adiw	r30, 0x01	; 1
    50f8:	8a e4       	ldi	r24, 0x4A	; 74
    50fa:	99 e0       	ldi	r25, 0x09	; 9
    50fc:	ad b7       	in	r26, 0x3d	; 61
    50fe:	be b7       	in	r27, 0x3e	; 62
    5100:	12 96       	adiw	r26, 0x02	; 2
    5102:	9c 93       	st	X, r25
    5104:	8e 93       	st	-X, r24
    5106:	11 97       	sbiw	r26, 0x01	; 1
    5108:	81 2f       	mov	r24, r17
    510a:	86 95       	lsr	r24
    510c:	81 70       	andi	r24, 0x01	; 1
    510e:	82 83       	std	Z+2, r24	; 0x02
    5110:	13 82       	std	Z+3, r1	; 0x03
    5112:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5116:	0f 90       	pop	r0
    5118:	0f 90       	pop	r0
    511a:	0f 90       	pop	r0
    511c:	0f 90       	pop	r0
    511e:	88 e4       	ldi	r24, 0x48	; 72
    5120:	99 e0       	ldi	r25, 0x09	; 9
    5122:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    5126:	8c e3       	ldi	r24, 0x3C	; 60
    5128:	99 e0       	ldi	r25, 0x09	; 9
    512a:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    512e:	00 d0       	rcall	.+0      	; 0x5130 <command_common+0x1a6>
    5130:	00 d0       	rcall	.+0      	; 0x5132 <command_common+0x1a8>
    5132:	ed b7       	in	r30, 0x3d	; 61
    5134:	fe b7       	in	r31, 0x3e	; 62
    5136:	31 96       	adiw	r30, 0x01	; 1
    5138:	89 e3       	ldi	r24, 0x39	; 57
    513a:	99 e0       	ldi	r25, 0x09	; 9
    513c:	ad b7       	in	r26, 0x3d	; 61
    513e:	be b7       	in	r27, 0x3e	; 62
    5140:	12 96       	adiw	r26, 0x02	; 2
    5142:	9c 93       	st	X, r25
    5144:	8e 93       	st	-X, r24
    5146:	11 97       	sbiw	r26, 0x01	; 1
    5148:	16 95       	lsr	r17
    514a:	16 95       	lsr	r17
    514c:	81 2f       	mov	r24, r17
    514e:	81 70       	andi	r24, 0x01	; 1
    5150:	82 83       	std	Z+2, r24	; 0x02
    5152:	13 82       	std	Z+3, r1	; 0x03
    5154:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	0f 90       	pop	r0
    515e:	0f 90       	pop	r0
    5160:	87 e3       	ldi	r24, 0x37	; 55
    5162:	99 e0       	ldi	r25, 0x09	; 9
    5164:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    5168:	8e e2       	ldi	r24, 0x2E	; 46
    516a:	99 e0       	ldi	r25, 0x09	; 9
    516c:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5170:	00 d0       	rcall	.+0      	; 0x5172 <command_common+0x1e8>
    5172:	00 d0       	rcall	.+0      	; 0x5174 <command_common+0x1ea>
    5174:	ed b7       	in	r30, 0x3d	; 61
    5176:	fe b7       	in	r31, 0x3e	; 62
    5178:	31 96       	adiw	r30, 0x01	; 1
    517a:	8b e2       	ldi	r24, 0x2B	; 43
    517c:	99 e0       	ldi	r25, 0x09	; 9
    517e:	ad b7       	in	r26, 0x3d	; 61
    5180:	be b7       	in	r27, 0x3e	; 62
    5182:	12 96       	adiw	r26, 0x02	; 2
    5184:	9c 93       	st	X, r25
    5186:	8e 93       	st	-X, r24
    5188:	11 97       	sbiw	r26, 0x01	; 1
    518a:	16 95       	lsr	r17
    518c:	11 70       	andi	r17, 0x01	; 1
    518e:	12 83       	std	Z+2, r17	; 0x02
    5190:	13 82       	std	Z+3, r1	; 0x03
    5192:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5196:	0f 90       	pop	r0
    5198:	0f 90       	pop	r0
    519a:	0f 90       	pop	r0
    519c:	0f 90       	pop	r0
    519e:	89 e2       	ldi	r24, 0x29	; 41
    51a0:	99 e0       	ldi	r25, 0x09	; 9
    51a2:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    51a6:	0e 94 aa 22 	call	0x4554	; 0x4554 <eeconfig_read_keymap>
    51aa:	18 2f       	mov	r17, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    51ac:	85 e1       	ldi	r24, 0x15	; 21
    51ae:	99 e0       	ldi	r25, 0x09	; 9
    51b0:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    51b4:	00 d0       	rcall	.+0      	; 0x51b6 <command_common+0x22c>
    51b6:	00 d0       	rcall	.+0      	; 0x51b8 <command_common+0x22e>
    51b8:	ed b7       	in	r30, 0x3d	; 61
    51ba:	fe b7       	in	r31, 0x3e	; 62
    51bc:	31 96       	adiw	r30, 0x01	; 1
    51be:	80 e1       	ldi	r24, 0x10	; 16
    51c0:	99 e0       	ldi	r25, 0x09	; 9
    51c2:	ad b7       	in	r26, 0x3d	; 61
    51c4:	be b7       	in	r27, 0x3e	; 62
    51c6:	12 96       	adiw	r26, 0x02	; 2
    51c8:	9c 93       	st	X, r25
    51ca:	8e 93       	st	-X, r24
    51cc:	11 97       	sbiw	r26, 0x01	; 1
    51ce:	12 83       	std	Z+2, r17	; 0x02
    51d0:	13 82       	std	Z+3, r1	; 0x03
    51d2:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    51d6:	0f 90       	pop	r0
    51d8:	0f 90       	pop	r0
    51da:	0f 90       	pop	r0
    51dc:	0f 90       	pop	r0
    51de:	8e e0       	ldi	r24, 0x0E	; 14
    51e0:	99 e0       	ldi	r25, 0x09	; 9
    51e2:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    51e6:	85 ef       	ldi	r24, 0xF5	; 245
    51e8:	98 e0       	ldi	r25, 0x08	; 8
    51ea:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    51ee:	00 d0       	rcall	.+0      	; 0x51f0 <command_common+0x266>
    51f0:	00 d0       	rcall	.+0      	; 0x51f2 <command_common+0x268>
    51f2:	ed b7       	in	r30, 0x3d	; 61
    51f4:	fe b7       	in	r31, 0x3e	; 62
    51f6:	31 96       	adiw	r30, 0x01	; 1
    51f8:	82 ef       	ldi	r24, 0xF2	; 242
    51fa:	98 e0       	ldi	r25, 0x08	; 8
    51fc:	ad b7       	in	r26, 0x3d	; 61
    51fe:	be b7       	in	r27, 0x3e	; 62
    5200:	12 96       	adiw	r26, 0x02	; 2
    5202:	9c 93       	st	X, r25
    5204:	8e 93       	st	-X, r24
    5206:	11 97       	sbiw	r26, 0x01	; 1
    5208:	81 2f       	mov	r24, r17
    520a:	81 70       	andi	r24, 0x01	; 1
    520c:	82 83       	std	Z+2, r24	; 0x02
    520e:	13 82       	std	Z+3, r1	; 0x03
    5210:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5214:	0f 90       	pop	r0
    5216:	0f 90       	pop	r0
    5218:	0f 90       	pop	r0
    521a:	0f 90       	pop	r0
    521c:	80 ef       	ldi	r24, 0xF0	; 240
    521e:	98 e0       	ldi	r25, 0x08	; 8
    5220:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5224:	89 ed       	ldi	r24, 0xD9	; 217
    5226:	98 e0       	ldi	r25, 0x08	; 8
    5228:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    522c:	00 d0       	rcall	.+0      	; 0x522e <command_common+0x2a4>
    522e:	00 d0       	rcall	.+0      	; 0x5230 <command_common+0x2a6>
    5230:	ed b7       	in	r30, 0x3d	; 61
    5232:	fe b7       	in	r31, 0x3e	; 62
    5234:	31 96       	adiw	r30, 0x01	; 1
    5236:	86 ed       	ldi	r24, 0xD6	; 214
    5238:	98 e0       	ldi	r25, 0x08	; 8
    523a:	ad b7       	in	r26, 0x3d	; 61
    523c:	be b7       	in	r27, 0x3e	; 62
    523e:	12 96       	adiw	r26, 0x02	; 2
    5240:	9c 93       	st	X, r25
    5242:	8e 93       	st	-X, r24
    5244:	11 97       	sbiw	r26, 0x01	; 1
    5246:	81 2f       	mov	r24, r17
    5248:	86 95       	lsr	r24
    524a:	81 70       	andi	r24, 0x01	; 1
    524c:	82 83       	std	Z+2, r24	; 0x02
    524e:	13 82       	std	Z+3, r1	; 0x03
    5250:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5254:	0f 90       	pop	r0
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
    525a:	0f 90       	pop	r0
    525c:	84 ed       	ldi	r24, 0xD4	; 212
    525e:	98 e0       	ldi	r25, 0x08	; 8
    5260:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    5264:	82 ec       	ldi	r24, 0xC2	; 194
    5266:	98 e0       	ldi	r25, 0x08	; 8
    5268:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    526c:	00 d0       	rcall	.+0      	; 0x526e <command_common+0x2e4>
    526e:	00 d0       	rcall	.+0      	; 0x5270 <command_common+0x2e6>
    5270:	ed b7       	in	r30, 0x3d	; 61
    5272:	fe b7       	in	r31, 0x3e	; 62
    5274:	31 96       	adiw	r30, 0x01	; 1
    5276:	8f eb       	ldi	r24, 0xBF	; 191
    5278:	98 e0       	ldi	r25, 0x08	; 8
    527a:	ad b7       	in	r26, 0x3d	; 61
    527c:	be b7       	in	r27, 0x3e	; 62
    527e:	12 96       	adiw	r26, 0x02	; 2
    5280:	9c 93       	st	X, r25
    5282:	8e 93       	st	-X, r24
    5284:	11 97       	sbiw	r26, 0x01	; 1
    5286:	81 2f       	mov	r24, r17
    5288:	86 95       	lsr	r24
    528a:	86 95       	lsr	r24
    528c:	81 70       	andi	r24, 0x01	; 1
    528e:	82 83       	std	Z+2, r24	; 0x02
    5290:	13 82       	std	Z+3, r1	; 0x03
    5292:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5296:	0f 90       	pop	r0
    5298:	0f 90       	pop	r0
    529a:	0f 90       	pop	r0
    529c:	0f 90       	pop	r0
    529e:	8d eb       	ldi	r24, 0xBD	; 189
    52a0:	98 e0       	ldi	r25, 0x08	; 8
    52a2:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    52a6:	8b ea       	ldi	r24, 0xAB	; 171
    52a8:	98 e0       	ldi	r25, 0x08	; 8
    52aa:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    52ae:	00 d0       	rcall	.+0      	; 0x52b0 <command_common+0x326>
    52b0:	00 d0       	rcall	.+0      	; 0x52b2 <command_common+0x328>
    52b2:	ed b7       	in	r30, 0x3d	; 61
    52b4:	fe b7       	in	r31, 0x3e	; 62
    52b6:	31 96       	adiw	r30, 0x01	; 1
    52b8:	88 ea       	ldi	r24, 0xA8	; 168
    52ba:	98 e0       	ldi	r25, 0x08	; 8
    52bc:	ad b7       	in	r26, 0x3d	; 61
    52be:	be b7       	in	r27, 0x3e	; 62
    52c0:	12 96       	adiw	r26, 0x02	; 2
    52c2:	9c 93       	st	X, r25
    52c4:	8e 93       	st	-X, r24
    52c6:	11 97       	sbiw	r26, 0x01	; 1
    52c8:	81 2f       	mov	r24, r17
    52ca:	86 95       	lsr	r24
    52cc:	86 95       	lsr	r24
    52ce:	86 95       	lsr	r24
    52d0:	81 70       	andi	r24, 0x01	; 1
    52d2:	82 83       	std	Z+2, r24	; 0x02
    52d4:	13 82       	std	Z+3, r1	; 0x03
    52d6:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    52da:	0f 90       	pop	r0
    52dc:	0f 90       	pop	r0
    52de:	0f 90       	pop	r0
    52e0:	0f 90       	pop	r0
    52e2:	86 ea       	ldi	r24, 0xA6	; 166
    52e4:	98 e0       	ldi	r25, 0x08	; 8
    52e6:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    52ea:	8c e9       	ldi	r24, 0x9C	; 156
    52ec:	98 e0       	ldi	r25, 0x08	; 8
    52ee:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    52f2:	00 d0       	rcall	.+0      	; 0x52f4 <command_common+0x36a>
    52f4:	00 d0       	rcall	.+0      	; 0x52f6 <command_common+0x36c>
    52f6:	ed b7       	in	r30, 0x3d	; 61
    52f8:	fe b7       	in	r31, 0x3e	; 62
    52fa:	31 96       	adiw	r30, 0x01	; 1
    52fc:	89 e9       	ldi	r24, 0x99	; 153
    52fe:	98 e0       	ldi	r25, 0x08	; 8
    5300:	ad b7       	in	r26, 0x3d	; 61
    5302:	be b7       	in	r27, 0x3e	; 62
    5304:	12 96       	adiw	r26, 0x02	; 2
    5306:	9c 93       	st	X, r25
    5308:	8e 93       	st	-X, r24
    530a:	11 97       	sbiw	r26, 0x01	; 1
    530c:	81 2f       	mov	r24, r17
    530e:	82 95       	swap	r24
    5310:	81 70       	andi	r24, 0x01	; 1
    5312:	82 83       	std	Z+2, r24	; 0x02
    5314:	13 82       	std	Z+3, r1	; 0x03
    5316:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    531a:	0f 90       	pop	r0
    531c:	0f 90       	pop	r0
    531e:	0f 90       	pop	r0
    5320:	0f 90       	pop	r0
    5322:	87 e9       	ldi	r24, 0x97	; 151
    5324:	98 e0       	ldi	r25, 0x08	; 8
    5326:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    532a:	85 e8       	ldi	r24, 0x85	; 133
    532c:	98 e0       	ldi	r25, 0x08	; 8
    532e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5332:	00 d0       	rcall	.+0      	; 0x5334 <command_common+0x3aa>
    5334:	00 d0       	rcall	.+0      	; 0x5336 <command_common+0x3ac>
    5336:	ed b7       	in	r30, 0x3d	; 61
    5338:	fe b7       	in	r31, 0x3e	; 62
    533a:	31 96       	adiw	r30, 0x01	; 1
    533c:	82 e8       	ldi	r24, 0x82	; 130
    533e:	98 e0       	ldi	r25, 0x08	; 8
    5340:	ad b7       	in	r26, 0x3d	; 61
    5342:	be b7       	in	r27, 0x3e	; 62
    5344:	12 96       	adiw	r26, 0x02	; 2
    5346:	9c 93       	st	X, r25
    5348:	8e 93       	st	-X, r24
    534a:	11 97       	sbiw	r26, 0x01	; 1
    534c:	81 2f       	mov	r24, r17
    534e:	82 95       	swap	r24
    5350:	86 95       	lsr	r24
    5352:	81 70       	andi	r24, 0x01	; 1
    5354:	82 83       	std	Z+2, r24	; 0x02
    5356:	13 82       	std	Z+3, r1	; 0x03
    5358:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    535c:	0f 90       	pop	r0
    535e:	0f 90       	pop	r0
    5360:	0f 90       	pop	r0
    5362:	0f 90       	pop	r0
    5364:	80 e8       	ldi	r24, 0x80	; 128
    5366:	98 e0       	ldi	r25, 0x08	; 8
    5368:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    536c:	84 e6       	ldi	r24, 0x64	; 100
    536e:	98 e0       	ldi	r25, 0x08	; 8
    5370:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5374:	00 d0       	rcall	.+0      	; 0x5376 <command_common+0x3ec>
    5376:	00 d0       	rcall	.+0      	; 0x5378 <command_common+0x3ee>
    5378:	ed b7       	in	r30, 0x3d	; 61
    537a:	fe b7       	in	r31, 0x3e	; 62
    537c:	31 96       	adiw	r30, 0x01	; 1
    537e:	81 e6       	ldi	r24, 0x61	; 97
    5380:	98 e0       	ldi	r25, 0x08	; 8
    5382:	ad b7       	in	r26, 0x3d	; 61
    5384:	be b7       	in	r27, 0x3e	; 62
    5386:	12 96       	adiw	r26, 0x02	; 2
    5388:	9c 93       	st	X, r25
    538a:	8e 93       	st	-X, r24
    538c:	11 97       	sbiw	r26, 0x01	; 1
    538e:	12 95       	swap	r17
    5390:	16 95       	lsr	r17
    5392:	16 95       	lsr	r17
    5394:	13 70       	andi	r17, 0x03	; 3
    5396:	81 2f       	mov	r24, r17
    5398:	81 70       	andi	r24, 0x01	; 1
    539a:	82 83       	std	Z+2, r24	; 0x02
    539c:	13 82       	std	Z+3, r1	; 0x03
    539e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	8f e5       	ldi	r24, 0x5F	; 95
    53ac:	98 e0       	ldi	r25, 0x08	; 8
    53ae:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    53b2:	87 e5       	ldi	r24, 0x57	; 87
    53b4:	98 e0       	ldi	r25, 0x08	; 8
    53b6:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    53ba:	00 d0       	rcall	.+0      	; 0x53bc <command_common+0x432>
    53bc:	00 d0       	rcall	.+0      	; 0x53be <command_common+0x434>
    53be:	ed b7       	in	r30, 0x3d	; 61
    53c0:	fe b7       	in	r31, 0x3e	; 62
    53c2:	31 96       	adiw	r30, 0x01	; 1
    53c4:	84 e5       	ldi	r24, 0x54	; 84
    53c6:	98 e0       	ldi	r25, 0x08	; 8
    53c8:	ad b7       	in	r26, 0x3d	; 61
    53ca:	be b7       	in	r27, 0x3e	; 62
    53cc:	12 96       	adiw	r26, 0x02	; 2
    53ce:	9c 93       	st	X, r25
    53d0:	8e 93       	st	-X, r24
    53d2:	11 97       	sbiw	r26, 0x01	; 1
    53d4:	16 95       	lsr	r17
    53d6:	12 83       	std	Z+2, r17	; 0x02
    53d8:	13 82       	std	Z+3, r1	; 0x03
    53da:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	82 e5       	ldi	r24, 0x52	; 82
    53e8:	98 e0       	ldi	r25, 0x08	; 8
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <command_common+0x466>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    53ec:	85 e9       	ldi	r24, 0x95	; 149
    53ee:	99 e0       	ldi	r25, 0x09	; 9
    53f0:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	1a c1       	rjmp	.+564    	; 0x562c <command_common+0x6a2>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    53f8:	80 91 9f 01 	lds	r24, 0x019F
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    53fc:	80 7f       	andi	r24, 0xF0	; 240
    53fe:	80 93 9f 01 	sts	0x019F, r24
            command_console_help();
    5402:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <command_console_help>
            print("C> ");
    5406:	83 e4       	ldi	r24, 0x43	; 67
    5408:	98 e0       	ldi	r25, 0x08	; 8
    540a:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            command_state = CONSOLE;
    540e:	81 e0       	ldi	r24, 0x01	; 1
    5410:	80 93 ae 01 	sts	0x01AE, r24
    5414:	0b c1       	rjmp	.+534    	; 0x562c <command_common+0x6a2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    5416:	0e 94 bd 13 	call	0x277a	; 0x277a <clear_keyboard>
            print("\n\nbootloader... ");
    541a:	82 e3       	ldi	r24, 0x32	; 50
    541c:	98 e0       	ldi	r25, 0x08	; 8
    541e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5422:	80 e1       	ldi	r24, 0x10	; 16
    5424:	97 e2       	ldi	r25, 0x27	; 39
    5426:	20 e9       	ldi	r18, 0x90	; 144
    5428:	31 e0       	ldi	r19, 0x01	; 1
    542a:	f9 01       	movw	r30, r18
    542c:	31 97       	sbiw	r30, 0x01	; 1
    542e:	f1 f7       	brne	.-4      	; 0x542c <command_common+0x4a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5430:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5432:	d9 f7       	brne	.-10     	; 0x542a <command_common+0x4a0>
            wait_ms(1000);
            bootloader_jump(); // not return
    5434:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <bootloader_jump>
    5438:	dd cf       	rjmp	.-70     	; 0x53f4 <command_common+0x46a>
            break;
        case KC_D:
            if (debug_enable) {
    543a:	80 91 9f 01 	lds	r24, 0x019F
    543e:	80 ff       	sbrs	r24, 0
    5440:	08 c0       	rjmp	.+16     	; 0x5452 <command_common+0x4c8>
                print("\ndebug: off\n");
    5442:	85 e2       	ldi	r24, 0x25	; 37
    5444:	98 e0       	ldi	r25, 0x08	; 8
    5446:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
                debug_matrix   = false;
    544a:	80 91 9f 01 	lds	r24, 0x019F
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    544e:	80 7f       	andi	r24, 0xF0	; 240
    5450:	18 c0       	rjmp	.+48     	; 0x5482 <command_common+0x4f8>
            } else {
                print("\ndebug: on\n");
    5452:	89 e1       	ldi	r24, 0x19	; 25
    5454:	98 e0       	ldi	r25, 0x08	; 8
    5456:	10 c0       	rjmp	.+32     	; 0x5478 <command_common+0x4ee>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    5458:	80 91 9f 01 	lds	r24, 0x019F
    545c:	98 2f       	mov	r25, r24
    545e:	96 95       	lsr	r25
    5460:	90 95       	com	r25
    5462:	91 70       	andi	r25, 0x01	; 1
    5464:	29 2f       	mov	r18, r25
    5466:	22 0f       	add	r18, r18
    5468:	8d 7f       	andi	r24, 0xFD	; 253
    546a:	82 2b       	or	r24, r18
    546c:	80 93 9f 01 	sts	0x019F, r24
            if (debug_matrix) {
    5470:	99 23       	and	r25, r25
    5472:	51 f0       	breq	.+20     	; 0x5488 <command_common+0x4fe>
                print("\nmatrix: on\n");
    5474:	8c e0       	ldi	r24, 0x0C	; 12
    5476:	98 e0       	ldi	r25, 0x08	; 8
    5478:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
                debug_enable = true;
    547c:	80 91 9f 01 	lds	r24, 0x019F
    5480:	81 60       	ori	r24, 0x01	; 1
    5482:	80 93 9f 01 	sts	0x019F, r24
    5486:	b6 cf       	rjmp	.-148    	; 0x53f4 <command_common+0x46a>
            } else {
                print("\nmatrix: off\n");
    5488:	8e ef       	ldi	r24, 0xFE	; 254
    548a:	97 e0       	ldi	r25, 0x07	; 7
    548c:	b1 cf       	rjmp	.-158    	; 0x53f0 <command_common+0x466>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    548e:	80 91 9f 01 	lds	r24, 0x019F
    5492:	98 2f       	mov	r25, r24
    5494:	96 95       	lsr	r25
    5496:	96 95       	lsr	r25
    5498:	90 95       	com	r25
    549a:	91 70       	andi	r25, 0x01	; 1
    549c:	29 2f       	mov	r18, r25
    549e:	22 0f       	add	r18, r18
    54a0:	22 0f       	add	r18, r18
    54a2:	8b 7f       	andi	r24, 0xFB	; 251
    54a4:	82 2b       	or	r24, r18
    54a6:	80 93 9f 01 	sts	0x019F, r24
            if (debug_keyboard) {
    54aa:	99 23       	and	r25, r25
    54ac:	19 f0       	breq	.+6      	; 0x54b4 <command_common+0x52a>
                print("\nkeyboard: on\n");
    54ae:	8f ee       	ldi	r24, 0xEF	; 239
    54b0:	97 e0       	ldi	r25, 0x07	; 7
    54b2:	e2 cf       	rjmp	.-60     	; 0x5478 <command_common+0x4ee>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    54b4:	8f ed       	ldi	r24, 0xDF	; 223
    54b6:	97 e0       	ldi	r25, 0x07	; 7
    54b8:	9b cf       	rjmp	.-202    	; 0x53f0 <command_common+0x466>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    54ba:	80 91 9f 01 	lds	r24, 0x019F
    54be:	98 2f       	mov	r25, r24
    54c0:	96 95       	lsr	r25
    54c2:	96 95       	lsr	r25
    54c4:	96 95       	lsr	r25
    54c6:	90 95       	com	r25
    54c8:	91 70       	andi	r25, 0x01	; 1
    54ca:	29 2f       	mov	r18, r25
    54cc:	22 0f       	add	r18, r18
    54ce:	22 0f       	add	r18, r18
    54d0:	22 0f       	add	r18, r18
    54d2:	87 7f       	andi	r24, 0xF7	; 247
    54d4:	82 2b       	or	r24, r18
    54d6:	80 93 9f 01 	sts	0x019F, r24
            if (debug_mouse) {
    54da:	99 23       	and	r25, r25
    54dc:	19 f0       	breq	.+6      	; 0x54e4 <command_common+0x55a>
                print("\nmouse: on\n");
    54de:	83 ed       	ldi	r24, 0xD3	; 211
    54e0:	97 e0       	ldi	r25, 0x07	; 7
    54e2:	ca cf       	rjmp	.-108    	; 0x5478 <command_common+0x4ee>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    54e4:	86 ec       	ldi	r24, 0xC6	; 198
    54e6:	97 e0       	ldi	r25, 0x07	; 7
    54e8:	83 cf       	rjmp	.-250    	; 0x53f0 <command_common+0x466>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    54ea:	87 eb       	ldi	r24, 0xB7	; 183
    54ec:	97 e0       	ldi	r25, 0x07	; 7
    54ee:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    54f2:	8b e8       	ldi	r24, 0x8B	; 139
    54f4:	97 e0       	ldi	r25, 0x07	; 7
    54f6:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    54fa:	8b e4       	ldi	r24, 0x4B	; 75
    54fc:	97 e0       	ldi	r25, 0x07	; 7
    54fe:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5502:	84 e2       	ldi	r24, 0x24	; 36
    5504:	97 e0       	ldi	r25, 0x07	; 7
    5506:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            /* build options */
            print("OPTIONS:"
    550a:	8f ed       	ldi	r24, 0xDF	; 223
    550c:	96 e0       	ldi	r25, 0x06	; 6
    550e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5512:	84 eb       	ldi	r24, 0xB4	; 180
    5514:	96 e0       	ldi	r25, 0x06	; 6
    5516:	6c cf       	rjmp	.-296    	; 0x53f0 <command_common+0x466>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    5518:	86 ea       	ldi	r24, 0xA6	; 166
    551a:	96 e0       	ldi	r25, 0x06	; 6
    551c:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            print_val_hex8(host_keyboard_leds());
    5520:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <host_keyboard_leds>
    5524:	00 d0       	rcall	.+0      	; 0x5526 <command_common+0x59c>
    5526:	00 d0       	rcall	.+0      	; 0x5528 <command_common+0x59e>
    5528:	ed b7       	in	r30, 0x3d	; 61
    552a:	fe b7       	in	r31, 0x3e	; 62
    552c:	31 96       	adiw	r30, 0x01	; 1
    552e:	2c e8       	ldi	r18, 0x8C	; 140
    5530:	36 e0       	ldi	r19, 0x06	; 6
    5532:	ad b7       	in	r26, 0x3d	; 61
    5534:	be b7       	in	r27, 0x3e	; 62
    5536:	12 96       	adiw	r26, 0x02	; 2
    5538:	3c 93       	st	X, r19
    553a:	2e 93       	st	-X, r18
    553c:	11 97       	sbiw	r26, 0x01	; 1
    553e:	82 83       	std	Z+2, r24	; 0x02
    5540:	13 82       	std	Z+3, r1	; 0x03
    5542:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
            print_val_hex8(keyboard_protocol);
    5546:	ed b7       	in	r30, 0x3d	; 61
    5548:	fe b7       	in	r31, 0x3e	; 62
    554a:	31 96       	adiw	r30, 0x01	; 1
    554c:	85 e7       	ldi	r24, 0x75	; 117
    554e:	96 e0       	ldi	r25, 0x06	; 6
    5550:	ad b7       	in	r26, 0x3d	; 61
    5552:	be b7       	in	r27, 0x3e	; 62
    5554:	12 96       	adiw	r26, 0x02	; 2
    5556:	9c 93       	st	X, r25
    5558:	8e 93       	st	-X, r24
    555a:	11 97       	sbiw	r26, 0x01	; 1
    555c:	80 91 01 01 	lds	r24, 0x0101
    5560:	82 83       	std	Z+2, r24	; 0x02
    5562:	13 82       	std	Z+3, r1	; 0x03
    5564:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
            print_val_hex8(keyboard_idle);
    5568:	ed b7       	in	r30, 0x3d	; 61
    556a:	fe b7       	in	r31, 0x3e	; 62
    556c:	31 96       	adiw	r30, 0x01	; 1
    556e:	82 e6       	ldi	r24, 0x62	; 98
    5570:	96 e0       	ldi	r25, 0x06	; 6
    5572:	ad b7       	in	r26, 0x3d	; 61
    5574:	be b7       	in	r27, 0x3e	; 62
    5576:	12 96       	adiw	r26, 0x02	; 2
    5578:	9c 93       	st	X, r25
    557a:	8e 93       	st	-X, r24
    557c:	11 97       	sbiw	r26, 0x01	; 1
    557e:	80 91 28 01 	lds	r24, 0x0128
    5582:	82 83       	std	Z+2, r24	; 0x02
    5584:	13 82       	std	Z+3, r1	; 0x03
    5586:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    558a:	ed b7       	in	r30, 0x3d	; 61
    558c:	fe b7       	in	r31, 0x3e	; 62
    558e:	31 96       	adiw	r30, 0x01	; 1
    5590:	8f e4       	ldi	r24, 0x4F	; 79
    5592:	96 e0       	ldi	r25, 0x06	; 6
    5594:	ad b7       	in	r26, 0x3d	; 61
    5596:	be b7       	in	r27, 0x3e	; 62
    5598:	12 96       	adiw	r26, 0x02	; 2
    559a:	9c 93       	st	X, r25
    559c:	8e 93       	st	-X, r24
    559e:	11 97       	sbiw	r26, 0x01	; 1
    55a0:	80 91 0c 01 	lds	r24, 0x010C
    55a4:	82 83       	std	Z+2, r24	; 0x02
    55a6:	13 82       	std	Z+3, r1	; 0x03
    55a8:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    55ac:	0f 90       	pop	r0
    55ae:	0f 90       	pop	r0
    55b0:	0f 90       	pop	r0
    55b2:	0f 90       	pop	r0
    55b4:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <timer_read32>
    55b8:	00 d0       	rcall	.+0      	; 0x55ba <command_common+0x630>
    55ba:	00 d0       	rcall	.+0      	; 0x55bc <command_common+0x632>
    55bc:	00 d0       	rcall	.+0      	; 0x55be <command_common+0x634>
    55be:	28 e3       	ldi	r18, 0x38	; 56
    55c0:	36 e0       	ldi	r19, 0x06	; 6
    55c2:	ed b7       	in	r30, 0x3d	; 61
    55c4:	fe b7       	in	r31, 0x3e	; 62
    55c6:	32 83       	std	Z+2, r19	; 0x02
    55c8:	21 83       	std	Z+1, r18	; 0x01
    55ca:	ad b7       	in	r26, 0x3d	; 61
    55cc:	be b7       	in	r27, 0x3e	; 62
    55ce:	13 96       	adiw	r26, 0x03	; 3
    55d0:	6d 93       	st	X+, r22
    55d2:	7d 93       	st	X+, r23
    55d4:	8d 93       	st	X+, r24
    55d6:	9c 93       	st	X, r25
    55d8:	16 97       	sbiw	r26, 0x06	; 6
    55da:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	ed b7       	in	r30, 0x3d	; 61
    55e2:	fe b7       	in	r31, 0x3e	; 62
    55e4:	36 96       	adiw	r30, 0x06	; 6
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	f8 94       	cli
    55ea:	fe bf       	out	0x3e, r31	; 62
    55ec:	0f be       	out	0x3f, r0	; 63
    55ee:	ed bf       	out	0x3d, r30	; 61
    55f0:	1d c0       	rjmp	.+58     	; 0x562c <command_common+0x6a2>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    55f2:	0e 94 bd 13 	call	0x277a	; 0x277a <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    55f6:	80 91 0c 01 	lds	r24, 0x010C
    55fa:	91 e0       	ldi	r25, 0x01	; 1
    55fc:	89 27       	eor	r24, r25
    55fe:	80 93 0c 01 	sts	0x010C, r24
            if (keyboard_nkro) {
    5602:	88 23       	and	r24, r24
    5604:	19 f0       	breq	.+6      	; 0x560c <command_common+0x682>
                print("NKRO: on\n");
    5606:	8e e2       	ldi	r24, 0x2E	; 46
    5608:	96 e0       	ldi	r25, 0x06	; 6
    560a:	f2 ce       	rjmp	.-540    	; 0x53f0 <command_common+0x466>
            } else {
                print("NKRO: off\n");
    560c:	83 e2       	ldi	r24, 0x23	; 35
    560e:	96 e0       	ldi	r25, 0x06	; 6
    5610:	ef ce       	rjmp	.-546    	; 0x53f0 <command_common+0x466>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	03 c0       	rjmp	.+6      	; 0x561c <command_common+0x692>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    5616:	8d 51       	subi	r24, 0x1D	; 29
    5618:	01 c0       	rjmp	.+2      	; 0x561c <command_common+0x692>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    561a:	89 53       	subi	r24, 0x39	; 57
    561c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <switch_default_layer>
    5620:	e9 ce       	rjmp	.-558    	; 0x53f4 <command_common+0x46a>
            break;
        default:
            print("?");
    5622:	81 e2       	ldi	r24, 0x21	; 33
    5624:	96 e0       	ldi	r25, 0x06	; 6
    5626:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    562a:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    562c:	1f 91       	pop	r17
    562e:	08 95       	ret

00005630 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5630:	1f 93       	push	r17
    5632:	18 2f       	mov	r17, r24
    switch (command_state) {
    5634:	80 91 ae 01 	lds	r24, 0x01AE
    5638:	81 30       	cpi	r24, 0x01	; 1
    563a:	79 f0       	breq	.+30     	; 0x565a <command_proc+0x2a>
    563c:	81 30       	cpi	r24, 0x01	; 1
    563e:	20 f0       	brcs	.+8      	; 0x5648 <command_proc+0x18>
    5640:	82 30       	cpi	r24, 0x02	; 2
    5642:	09 f0       	breq	.+2      	; 0x5646 <command_proc+0x16>
    5644:	be c1       	rjmp	.+892    	; 0x59c2 <command_proc+0x392>
    5646:	48 c0       	rjmp	.+144    	; 0x56d8 <command_proc+0xa8>
        case ONESHOT:
            if (!IS_COMMAND())
    5648:	e0 91 0d 01 	lds	r30, 0x010D
    564c:	f0 91 0e 01 	lds	r31, 0x010E
    5650:	80 81       	ld	r24, Z
    5652:	82 32       	cpi	r24, 0x22	; 34
    5654:	09 f0       	breq	.+2      	; 0x5658 <command_proc+0x28>
    5656:	b7 c1       	rjmp	.+878    	; 0x59c6 <command_proc+0x396>
    5658:	07 c0       	rjmp	.+14     	; 0x5668 <command_proc+0x38>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    565a:	e0 91 0d 01 	lds	r30, 0x010D
    565e:	f0 91 0e 01 	lds	r31, 0x010E
    5662:	80 81       	ld	r24, Z
    5664:	82 32       	cpi	r24, 0x22	; 34
    5666:	49 f4       	brne	.+18     	; 0x567a <command_proc+0x4a>
                return (command_extra(code) || command_common(code));
    5668:	81 2f       	mov	r24, r17
    566a:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <command_extra>
    566e:	88 23       	and	r24, r24
    5670:	49 f5       	brne	.+82     	; 0x56c4 <command_proc+0x94>
    5672:	81 2f       	mov	r24, r17
    5674:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <command_common>
    5678:	a7 c1       	rjmp	.+846    	; 0x59c8 <command_proc+0x398>
            else
                return (command_console_extra(code) || command_console(code));
    567a:	81 2f       	mov	r24, r17
    567c:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <command_console_extra>
    5680:	88 23       	and	r24, r24
    5682:	01 f5       	brne	.+64     	; 0x56c4 <command_proc+0x94>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5684:	14 31       	cpi	r17, 0x14	; 20
    5686:	91 f0       	breq	.+36     	; 0x56ac <command_proc+0x7c>
    5688:	15 31       	cpi	r17, 0x15	; 21
    568a:	28 f4       	brcc	.+10     	; 0x5696 <command_proc+0x66>
    568c:	1b 30       	cpi	r17, 0x0B	; 11
    568e:	39 f0       	breq	.+14     	; 0x569e <command_proc+0x6e>
    5690:	10 31       	cpi	r17, 0x10	; 16
    5692:	d9 f4       	brne	.+54     	; 0x56ca <command_proc+0x9a>
    5694:	0e c0       	rjmp	.+28     	; 0x56b2 <command_proc+0x82>
    5696:	19 32       	cpi	r17, 0x29	; 41
    5698:	49 f0       	breq	.+18     	; 0x56ac <command_proc+0x7c>
    569a:	18 33       	cpi	r17, 0x38	; 56
    569c:	b1 f4       	brne	.+44     	; 0x56ca <command_proc+0x9a>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    569e:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    56a2:	86 e6       	ldi	r24, 0x66	; 102
    56a4:	9a e0       	ldi	r25, 0x0A	; 10
    56a6:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    56aa:	0c c0       	rjmp	.+24     	; 0x56c4 <command_proc+0x94>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    56ac:	10 92 ae 01 	sts	0x01AE, r1
    56b0:	10 c0       	rjmp	.+32     	; 0x56d2 <command_proc+0xa2>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    56b2:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <mousekey_console_help>
            print("M> ");
    56b6:	8c e6       	ldi	r24, 0x6C	; 108
    56b8:	9a e0       	ldi	r25, 0x0A	; 10
    56ba:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
            command_state = MOUSEKEY;
    56be:	82 e0       	ldi	r24, 0x02	; 2
    56c0:	80 93 ae 01 	sts	0x01AE, r24
    56c4:	81 e0       	ldi	r24, 0x01	; 1
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	7f c1       	rjmp	.+766    	; 0x59c8 <command_proc+0x398>
            return true;
#endif
        default:
            print("?");
    56ca:	8a e6       	ldi	r24, 0x6A	; 106
    56cc:	9a e0       	ldi	r25, 0x0A	; 10
    56ce:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    56d2:	80 e0       	ldi	r24, 0x00	; 0
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	78 c1       	rjmp	.+752    	; 0x59c8 <command_proc+0x398>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    56d8:	14 32       	cpi	r17, 0x24	; 36
    56da:	88 f4       	brcc	.+34     	; 0x56fe <command_proc+0xce>
    56dc:	1e 31       	cpi	r17, 0x1E	; 30
    56de:	08 f0       	brcs	.+2      	; 0x56e2 <command_proc+0xb2>
    56e0:	f2 c0       	rjmp	.+484    	; 0x58c6 <command_proc+0x296>
    56e2:	1b 30       	cpi	r17, 0x0B	; 11
    56e4:	09 f1       	breq	.+66     	; 0x5728 <command_proc+0xf8>
    56e6:	1c 30       	cpi	r17, 0x0C	; 12
    56e8:	20 f4       	brcc	.+8      	; 0x56f2 <command_proc+0xc2>
    56ea:	17 30       	cpi	r17, 0x07	; 7
    56ec:	09 f0       	breq	.+2      	; 0x56f0 <command_proc+0xc0>
    56ee:	45 c1       	rjmp	.+650    	; 0x597a <command_proc+0x34a>
    56f0:	2d c1       	rjmp	.+602    	; 0x594c <command_proc+0x31c>
    56f2:	13 31       	cpi	r17, 0x13	; 19
    56f4:	59 f1       	breq	.+86     	; 0x574c <command_proc+0x11c>
    56f6:	14 31       	cpi	r17, 0x14	; 20
    56f8:	09 f0       	breq	.+2      	; 0x56fc <command_proc+0xcc>
    56fa:	3f c1       	rjmp	.+638    	; 0x597a <command_proc+0x34a>
    56fc:	18 c0       	rjmp	.+48     	; 0x572e <command_proc+0xfe>
    56fe:	1b 34       	cpi	r17, 0x4B	; 75
    5700:	09 f4       	brne	.+2      	; 0x5704 <command_proc+0xd4>
    5702:	18 c1       	rjmp	.+560    	; 0x5934 <command_proc+0x304>
    5704:	1c 34       	cpi	r17, 0x4C	; 76
    5706:	30 f4       	brcc	.+12     	; 0x5714 <command_proc+0xe4>
    5708:	19 32       	cpi	r17, 0x29	; 41
    570a:	89 f0       	breq	.+34     	; 0x572e <command_proc+0xfe>
    570c:	18 33       	cpi	r17, 0x38	; 56
    570e:	09 f0       	breq	.+2      	; 0x5712 <command_proc+0xe2>
    5710:	34 c1       	rjmp	.+616    	; 0x597a <command_proc+0x34a>
    5712:	0a c0       	rjmp	.+20     	; 0x5728 <command_proc+0xf8>
    5714:	11 35       	cpi	r17, 0x51	; 81
    5716:	09 f4       	brne	.+2      	; 0x571a <command_proc+0xea>
    5718:	09 c1       	rjmp	.+530    	; 0x592c <command_proc+0x2fc>
    571a:	12 35       	cpi	r17, 0x52	; 82
    571c:	09 f4       	brne	.+2      	; 0x5720 <command_proc+0xf0>
    571e:	02 c1       	rjmp	.+516    	; 0x5924 <command_proc+0x2f4>
    5720:	1e 34       	cpi	r17, 0x4E	; 78
    5722:	09 f0       	breq	.+2      	; 0x5726 <command_proc+0xf6>
    5724:	2a c1       	rjmp	.+596    	; 0x597a <command_proc+0x34a>
    5726:	0c c1       	rjmp	.+536    	; 0x5940 <command_proc+0x310>
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5728:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <mousekey_console_help>
    572c:	29 c1       	rjmp	.+594    	; 0x5980 <command_proc+0x350>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    572e:	80 91 af 01 	lds	r24, 0x01AF
    5732:	88 23       	and	r24, r24
    5734:	19 f0       	breq	.+6      	; 0x573c <command_proc+0x10c>
                mousekey_param = 0;
    5736:	10 92 af 01 	sts	0x01AF, r1
    573a:	22 c1       	rjmp	.+580    	; 0x5980 <command_proc+0x350>
            } else {
                print("C> ");
    573c:	81 ed       	ldi	r24, 0xD1	; 209
    573e:	9b e0       	ldi	r25, 0x0B	; 11
    5740:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
                command_state = CONSOLE;
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	80 93 ae 01 	sts	0x01AE, r24
    574a:	3e c1       	rjmp	.+636    	; 0x59c8 <command_proc+0x398>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    574c:	83 e6       	ldi	r24, 0x63	; 99
    574e:	9c e0       	ldi	r25, 0x0C	; 12
    5750:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5754:	81 e5       	ldi	r24, 0x51	; 81
    5756:	9c e0       	ldi	r25, 0x0C	; 12
    5758:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    575c:	00 d0       	rcall	.+0      	; 0x575e <command_proc+0x12e>
    575e:	00 d0       	rcall	.+0      	; 0x5760 <command_proc+0x130>
    5760:	ed b7       	in	r30, 0x3d	; 61
    5762:	fe b7       	in	r31, 0x3e	; 62
    5764:	31 96       	adiw	r30, 0x01	; 1
    5766:	8e e4       	ldi	r24, 0x4E	; 78
    5768:	9c e0       	ldi	r25, 0x0C	; 12
    576a:	ad b7       	in	r26, 0x3d	; 61
    576c:	be b7       	in	r27, 0x3e	; 62
    576e:	12 96       	adiw	r26, 0x02	; 2
    5770:	9c 93       	st	X, r25
    5772:	8e 93       	st	-X, r24
    5774:	11 97       	sbiw	r26, 0x01	; 1
    5776:	80 91 0f 01 	lds	r24, 0x010F
    577a:	82 83       	std	Z+2, r24	; 0x02
    577c:	13 82       	std	Z+3, r1	; 0x03
    577e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    5782:	0f 90       	pop	r0
    5784:	0f 90       	pop	r0
    5786:	0f 90       	pop	r0
    5788:	0f 90       	pop	r0
    578a:	8c e4       	ldi	r24, 0x4C	; 76
    578c:	9c e0       	ldi	r25, 0x0C	; 12
    578e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5792:	8a e3       	ldi	r24, 0x3A	; 58
    5794:	9c e0       	ldi	r25, 0x0C	; 12
    5796:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    579a:	00 d0       	rcall	.+0      	; 0x579c <command_proc+0x16c>
    579c:	00 d0       	rcall	.+0      	; 0x579e <command_proc+0x16e>
    579e:	ed b7       	in	r30, 0x3d	; 61
    57a0:	fe b7       	in	r31, 0x3e	; 62
    57a2:	31 96       	adiw	r30, 0x01	; 1
    57a4:	87 e3       	ldi	r24, 0x37	; 55
    57a6:	9c e0       	ldi	r25, 0x0C	; 12
    57a8:	ad b7       	in	r26, 0x3d	; 61
    57aa:	be b7       	in	r27, 0x3e	; 62
    57ac:	12 96       	adiw	r26, 0x02	; 2
    57ae:	9c 93       	st	X, r25
    57b0:	8e 93       	st	-X, r24
    57b2:	11 97       	sbiw	r26, 0x01	; 1
    57b4:	80 91 10 01 	lds	r24, 0x0110
    57b8:	82 83       	std	Z+2, r24	; 0x02
    57ba:	13 82       	std	Z+3, r1	; 0x03
    57bc:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    57c0:	0f 90       	pop	r0
    57c2:	0f 90       	pop	r0
    57c4:	0f 90       	pop	r0
    57c6:	0f 90       	pop	r0
    57c8:	85 e3       	ldi	r24, 0x35	; 53
    57ca:	9c e0       	ldi	r25, 0x0C	; 12
    57cc:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    57d0:	86 e2       	ldi	r24, 0x26	; 38
    57d2:	9c e0       	ldi	r25, 0x0C	; 12
    57d4:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    57d8:	00 d0       	rcall	.+0      	; 0x57da <command_proc+0x1aa>
    57da:	00 d0       	rcall	.+0      	; 0x57dc <command_proc+0x1ac>
    57dc:	ed b7       	in	r30, 0x3d	; 61
    57de:	fe b7       	in	r31, 0x3e	; 62
    57e0:	31 96       	adiw	r30, 0x01	; 1
    57e2:	83 e2       	ldi	r24, 0x23	; 35
    57e4:	9c e0       	ldi	r25, 0x0C	; 12
    57e6:	ad b7       	in	r26, 0x3d	; 61
    57e8:	be b7       	in	r27, 0x3e	; 62
    57ea:	12 96       	adiw	r26, 0x02	; 2
    57ec:	9c 93       	st	X, r25
    57ee:	8e 93       	st	-X, r24
    57f0:	11 97       	sbiw	r26, 0x01	; 1
    57f2:	80 91 11 01 	lds	r24, 0x0111
    57f6:	82 83       	std	Z+2, r24	; 0x02
    57f8:	13 82       	std	Z+3, r1	; 0x03
    57fa:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    57fe:	0f 90       	pop	r0
    5800:	0f 90       	pop	r0
    5802:	0f 90       	pop	r0
    5804:	0f 90       	pop	r0
    5806:	81 e2       	ldi	r24, 0x21	; 33
    5808:	9c e0       	ldi	r25, 0x0C	; 12
    580a:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    580e:	80 e1       	ldi	r24, 0x10	; 16
    5810:	9c e0       	ldi	r25, 0x0C	; 12
    5812:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5816:	00 d0       	rcall	.+0      	; 0x5818 <command_proc+0x1e8>
    5818:	00 d0       	rcall	.+0      	; 0x581a <command_proc+0x1ea>
    581a:	ed b7       	in	r30, 0x3d	; 61
    581c:	fe b7       	in	r31, 0x3e	; 62
    581e:	31 96       	adiw	r30, 0x01	; 1
    5820:	8d e0       	ldi	r24, 0x0D	; 13
    5822:	9c e0       	ldi	r25, 0x0C	; 12
    5824:	ad b7       	in	r26, 0x3d	; 61
    5826:	be b7       	in	r27, 0x3e	; 62
    5828:	12 96       	adiw	r26, 0x02	; 2
    582a:	9c 93       	st	X, r25
    582c:	8e 93       	st	-X, r24
    582e:	11 97       	sbiw	r26, 0x01	; 1
    5830:	80 91 12 01 	lds	r24, 0x0112
    5834:	82 83       	std	Z+2, r24	; 0x02
    5836:	13 82       	std	Z+3, r1	; 0x03
    5838:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    583c:	0f 90       	pop	r0
    583e:	0f 90       	pop	r0
    5840:	0f 90       	pop	r0
    5842:	0f 90       	pop	r0
    5844:	8b e0       	ldi	r24, 0x0B	; 11
    5846:	9c e0       	ldi	r25, 0x0C	; 12
    5848:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    584c:	86 ef       	ldi	r24, 0xF6	; 246
    584e:	9b e0       	ldi	r25, 0x0B	; 11
    5850:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5854:	00 d0       	rcall	.+0      	; 0x5856 <command_proc+0x226>
    5856:	00 d0       	rcall	.+0      	; 0x5858 <command_proc+0x228>
    5858:	ed b7       	in	r30, 0x3d	; 61
    585a:	fe b7       	in	r31, 0x3e	; 62
    585c:	31 96       	adiw	r30, 0x01	; 1
    585e:	83 ef       	ldi	r24, 0xF3	; 243
    5860:	9b e0       	ldi	r25, 0x0B	; 11
    5862:	ad b7       	in	r26, 0x3d	; 61
    5864:	be b7       	in	r27, 0x3e	; 62
    5866:	12 96       	adiw	r26, 0x02	; 2
    5868:	9c 93       	st	X, r25
    586a:	8e 93       	st	-X, r24
    586c:	11 97       	sbiw	r26, 0x01	; 1
    586e:	80 91 13 01 	lds	r24, 0x0113
    5872:	82 83       	std	Z+2, r24	; 0x02
    5874:	13 82       	std	Z+3, r1	; 0x03
    5876:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    587a:	0f 90       	pop	r0
    587c:	0f 90       	pop	r0
    587e:	0f 90       	pop	r0
    5880:	0f 90       	pop	r0
    5882:	81 ef       	ldi	r24, 0xF1	; 241
    5884:	9b e0       	ldi	r25, 0x0B	; 11
    5886:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    588a:	8a ed       	ldi	r24, 0xDA	; 218
    588c:	9b e0       	ldi	r25, 0x0B	; 11
    588e:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5892:	00 d0       	rcall	.+0      	; 0x5894 <command_proc+0x264>
    5894:	00 d0       	rcall	.+0      	; 0x5896 <command_proc+0x266>
    5896:	ed b7       	in	r30, 0x3d	; 61
    5898:	fe b7       	in	r31, 0x3e	; 62
    589a:	31 96       	adiw	r30, 0x01	; 1
    589c:	87 ed       	ldi	r24, 0xD7	; 215
    589e:	9b e0       	ldi	r25, 0x0B	; 11
    58a0:	ad b7       	in	r26, 0x3d	; 61
    58a2:	be b7       	in	r27, 0x3e	; 62
    58a4:	12 96       	adiw	r26, 0x02	; 2
    58a6:	9c 93       	st	X, r25
    58a8:	8e 93       	st	-X, r24
    58aa:	11 97       	sbiw	r26, 0x01	; 1
    58ac:	80 91 14 01 	lds	r24, 0x0114
    58b0:	82 83       	std	Z+2, r24	; 0x02
    58b2:	13 82       	std	Z+3, r1	; 0x03
    58b4:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    58b8:	0f 90       	pop	r0
    58ba:	0f 90       	pop	r0
    58bc:	0f 90       	pop	r0
    58be:	0f 90       	pop	r0
    58c0:	85 ed       	ldi	r24, 0xD5	; 213
    58c2:	9b e0       	ldi	r25, 0x0B	; 11
    58c4:	57 c0       	rjmp	.+174    	; 0x5974 <command_proc+0x344>
/***********************************************************
 * Utilities
 ***********************************************************/
static uint8_t numkey2num(uint8_t code)
{
    switch (code) {
    58c6:	12 32       	cpi	r17, 0x22	; 34
    58c8:	f9 f0       	breq	.+62     	; 0x5908 <command_proc+0x2d8>
    58ca:	13 32       	cpi	r17, 0x23	; 35
    58cc:	60 f4       	brcc	.+24     	; 0x58e6 <command_proc+0x2b6>
    58ce:	1f 31       	cpi	r17, 0x1F	; 31
    58d0:	99 f0       	breq	.+38     	; 0x58f8 <command_proc+0x2c8>
    58d2:	10 32       	cpi	r17, 0x20	; 32
    58d4:	18 f4       	brcc	.+6      	; 0x58dc <command_proc+0x2ac>
    58d6:	1e 31       	cpi	r17, 0x1E	; 30
    58d8:	09 f5       	brne	.+66     	; 0x591c <command_proc+0x2ec>
    58da:	10 c0       	rjmp	.+32     	; 0x58fc <command_proc+0x2cc>
    58dc:	10 32       	cpi	r17, 0x20	; 32
    58de:	81 f0       	breq	.+32     	; 0x5900 <command_proc+0x2d0>
    58e0:	11 32       	cpi	r17, 0x21	; 33
    58e2:	e1 f4       	brne	.+56     	; 0x591c <command_proc+0x2ec>
    58e4:	0f c0       	rjmp	.+30     	; 0x5904 <command_proc+0x2d4>
    58e6:	14 32       	cpi	r17, 0x24	; 36
    58e8:	99 f0       	breq	.+38     	; 0x5910 <command_proc+0x2e0>
    58ea:	14 32       	cpi	r17, 0x24	; 36
    58ec:	78 f0       	brcs	.+30     	; 0x590c <command_proc+0x2dc>
    58ee:	15 32       	cpi	r17, 0x25	; 37
    58f0:	89 f0       	breq	.+34     	; 0x5914 <command_proc+0x2e4>
    58f2:	16 32       	cpi	r17, 0x26	; 38
    58f4:	99 f4       	brne	.+38     	; 0x591c <command_proc+0x2ec>
    58f6:	10 c0       	rjmp	.+32     	; 0x5918 <command_proc+0x2e8>
    58f8:	82 e0       	ldi	r24, 0x02	; 2
    58fa:	11 c0       	rjmp	.+34     	; 0x591e <command_proc+0x2ee>
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	0f c0       	rjmp	.+30     	; 0x591e <command_proc+0x2ee>
    5900:	83 e0       	ldi	r24, 0x03	; 3
    5902:	0d c0       	rjmp	.+26     	; 0x591e <command_proc+0x2ee>
    5904:	84 e0       	ldi	r24, 0x04	; 4
    5906:	0b c0       	rjmp	.+22     	; 0x591e <command_proc+0x2ee>
    5908:	85 e0       	ldi	r24, 0x05	; 5
    590a:	09 c0       	rjmp	.+18     	; 0x591e <command_proc+0x2ee>
    590c:	86 e0       	ldi	r24, 0x06	; 6
    590e:	07 c0       	rjmp	.+14     	; 0x591e <command_proc+0x2ee>
    5910:	87 e0       	ldi	r24, 0x07	; 7
    5912:	05 c0       	rjmp	.+10     	; 0x591e <command_proc+0x2ee>
    5914:	88 e0       	ldi	r24, 0x08	; 8
    5916:	03 c0       	rjmp	.+6      	; 0x591e <command_proc+0x2ee>
    5918:	89 e0       	ldi	r24, 0x09	; 9
    591a:	01 c0       	rjmp	.+2      	; 0x591e <command_proc+0x2ee>
    591c:	80 e0       	ldi	r24, 0x00	; 0
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    591e:	80 93 af 01 	sts	0x01AF, r24
    5922:	2e c0       	rjmp	.+92     	; 0x5980 <command_proc+0x350>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5924:	80 91 af 01 	lds	r24, 0x01AF
    5928:	61 e0       	ldi	r22, 0x01	; 1
    592a:	07 c0       	rjmp	.+14     	; 0x593a <command_proc+0x30a>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    592c:	80 91 af 01 	lds	r24, 0x01AF
    5930:	61 e0       	ldi	r22, 0x01	; 1
    5932:	09 c0       	rjmp	.+18     	; 0x5946 <command_proc+0x316>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5934:	80 91 af 01 	lds	r24, 0x01AF
    5938:	6a e0       	ldi	r22, 0x0A	; 10
    593a:	0e 94 f7 25 	call	0x4bee	; 0x4bee <mousekey_param_inc>
    593e:	20 c0       	rjmp	.+64     	; 0x5980 <command_proc+0x350>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5940:	80 91 af 01 	lds	r24, 0x01AF
    5944:	6a e0       	ldi	r22, 0x0A	; 10
    5946:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <mousekey_param_dec>
    594a:	1a c0       	rjmp	.+52     	; 0x5980 <command_proc+0x350>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    594c:	8e e1       	ldi	r24, 0x1E	; 30
    594e:	80 93 0f 01 	sts	0x010F, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5952:	82 e3       	ldi	r24, 0x32	; 50
    5954:	80 93 10 01 	sts	0x0110, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5958:	8a e0       	ldi	r24, 0x0A	; 10
    595a:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    595e:	84 e1       	ldi	r24, 0x14	; 20
    5960:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5964:	88 e0       	ldi	r24, 0x08	; 8
    5966:	80 93 13 01 	sts	0x0113, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    596a:	88 e2       	ldi	r24, 0x28	; 40
    596c:	80 93 14 01 	sts	0x0114, r24
            print("set default\n");
    5970:	84 ec       	ldi	r24, 0xC4	; 196
    5972:	9b e0       	ldi	r25, 0x0B	; 11
    5974:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    5978:	03 c0       	rjmp	.+6      	; 0x5980 <command_proc+0x350>
            break;
        default:
            print("?");
    597a:	82 ec       	ldi	r24, 0xC2	; 194
    597c:	9b e0       	ldi	r25, 0x0B	; 11
    597e:	1d c0       	rjmp	.+58     	; 0x59ba <command_proc+0x38a>
            return false;
    }
    if (mousekey_param) {
    5980:	20 91 af 01 	lds	r18, 0x01AF
    5984:	22 23       	and	r18, r18
    5986:	b9 f0       	breq	.+46     	; 0x59b6 <command_proc+0x386>
        xprintf("M%d> ", mousekey_param);
    5988:	00 d0       	rcall	.+0      	; 0x598a <command_proc+0x35a>
    598a:	00 d0       	rcall	.+0      	; 0x598c <command_proc+0x35c>
    598c:	ed b7       	in	r30, 0x3d	; 61
    598e:	fe b7       	in	r31, 0x3e	; 62
    5990:	31 96       	adiw	r30, 0x01	; 1
    5992:	8c eb       	ldi	r24, 0xBC	; 188
    5994:	9b e0       	ldi	r25, 0x0B	; 11
    5996:	ad b7       	in	r26, 0x3d	; 61
    5998:	be b7       	in	r27, 0x3e	; 62
    599a:	12 96       	adiw	r26, 0x02	; 2
    599c:	9c 93       	st	X, r25
    599e:	8e 93       	st	-X, r24
    59a0:	11 97       	sbiw	r26, 0x01	; 1
    59a2:	22 83       	std	Z+2, r18	; 0x02
    59a4:	13 82       	std	Z+3, r1	; 0x03
    59a6:	0e 94 a1 07 	call	0xf42	; 0xf42 <__xprintf>
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	0f 90       	pop	r0
    59ae:	0f 90       	pop	r0
    59b0:	0f 90       	pop	r0
    59b2:	0f 90       	pop	r0
    59b4:	09 c0       	rjmp	.+18     	; 0x59c8 <command_proc+0x398>
    } else {
        print("M>" );
    59b6:	89 eb       	ldi	r24, 0xB9	; 185
    59b8:	9b e0       	ldi	r25, 0x0B	; 11
    59ba:	0e 94 08 07 	call	0xe10	; 0xe10 <xputs>
    59be:	81 e0       	ldi	r24, 0x01	; 1
    59c0:	03 c0       	rjmp	.+6      	; 0x59c8 <command_proc+0x398>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    59c2:	10 92 ae 01 	sts	0x01AE, r1
    59c6:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    59c8:	1f 91       	pop	r17
    59ca:	08 95       	ret

000059cc <__fixsfsi>:
    59cc:	04 d0       	rcall	.+8      	; 0x59d6 <__fixunssfsi>
    59ce:	68 94       	set
    59d0:	b1 11       	cpse	r27, r1
    59d2:	8d c0       	rjmp	.+282    	; 0x5aee <__fp_szero>
    59d4:	08 95       	ret

000059d6 <__fixunssfsi>:
    59d6:	70 d0       	rcall	.+224    	; 0x5ab8 <__fp_splitA>
    59d8:	88 f0       	brcs	.+34     	; 0x59fc <__fixunssfsi+0x26>
    59da:	9f 57       	subi	r25, 0x7F	; 127
    59dc:	90 f0       	brcs	.+36     	; 0x5a02 <__fixunssfsi+0x2c>
    59de:	b9 2f       	mov	r27, r25
    59e0:	99 27       	eor	r25, r25
    59e2:	b7 51       	subi	r27, 0x17	; 23
    59e4:	a0 f0       	brcs	.+40     	; 0x5a0e <__fixunssfsi+0x38>
    59e6:	d1 f0       	breq	.+52     	; 0x5a1c <__fixunssfsi+0x46>
    59e8:	66 0f       	add	r22, r22
    59ea:	77 1f       	adc	r23, r23
    59ec:	88 1f       	adc	r24, r24
    59ee:	99 1f       	adc	r25, r25
    59f0:	1a f0       	brmi	.+6      	; 0x59f8 <__fixunssfsi+0x22>
    59f2:	ba 95       	dec	r27
    59f4:	c9 f7       	brne	.-14     	; 0x59e8 <__fixunssfsi+0x12>
    59f6:	12 c0       	rjmp	.+36     	; 0x5a1c <__fixunssfsi+0x46>
    59f8:	b1 30       	cpi	r27, 0x01	; 1
    59fa:	81 f0       	breq	.+32     	; 0x5a1c <__fixunssfsi+0x46>
    59fc:	77 d0       	rcall	.+238    	; 0x5aec <__fp_zero>
    59fe:	b1 e0       	ldi	r27, 0x01	; 1
    5a00:	08 95       	ret
    5a02:	74 c0       	rjmp	.+232    	; 0x5aec <__fp_zero>
    5a04:	67 2f       	mov	r22, r23
    5a06:	78 2f       	mov	r23, r24
    5a08:	88 27       	eor	r24, r24
    5a0a:	b8 5f       	subi	r27, 0xF8	; 248
    5a0c:	39 f0       	breq	.+14     	; 0x5a1c <__fixunssfsi+0x46>
    5a0e:	b9 3f       	cpi	r27, 0xF9	; 249
    5a10:	cc f3       	brlt	.-14     	; 0x5a04 <__fixunssfsi+0x2e>
    5a12:	86 95       	lsr	r24
    5a14:	77 95       	ror	r23
    5a16:	67 95       	ror	r22
    5a18:	b3 95       	inc	r27
    5a1a:	d9 f7       	brne	.-10     	; 0x5a12 <__fixunssfsi+0x3c>
    5a1c:	3e f4       	brtc	.+14     	; 0x5a2c <__fixunssfsi+0x56>
    5a1e:	90 95       	com	r25
    5a20:	80 95       	com	r24
    5a22:	70 95       	com	r23
    5a24:	61 95       	neg	r22
    5a26:	7f 4f       	sbci	r23, 0xFF	; 255
    5a28:	8f 4f       	sbci	r24, 0xFF	; 255
    5a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2c:	08 95       	ret

00005a2e <__floatunsisf>:
    5a2e:	e8 94       	clt
    5a30:	09 c0       	rjmp	.+18     	; 0x5a44 <__floatsisf+0x12>

00005a32 <__floatsisf>:
    5a32:	97 fb       	bst	r25, 7
    5a34:	3e f4       	brtc	.+14     	; 0x5a44 <__floatsisf+0x12>
    5a36:	90 95       	com	r25
    5a38:	80 95       	com	r24
    5a3a:	70 95       	com	r23
    5a3c:	61 95       	neg	r22
    5a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a40:	8f 4f       	sbci	r24, 0xFF	; 255
    5a42:	9f 4f       	sbci	r25, 0xFF	; 255
    5a44:	99 23       	and	r25, r25
    5a46:	a9 f0       	breq	.+42     	; 0x5a72 <__floatsisf+0x40>
    5a48:	f9 2f       	mov	r31, r25
    5a4a:	96 e9       	ldi	r25, 0x96	; 150
    5a4c:	bb 27       	eor	r27, r27
    5a4e:	93 95       	inc	r25
    5a50:	f6 95       	lsr	r31
    5a52:	87 95       	ror	r24
    5a54:	77 95       	ror	r23
    5a56:	67 95       	ror	r22
    5a58:	b7 95       	ror	r27
    5a5a:	f1 11       	cpse	r31, r1
    5a5c:	f8 cf       	rjmp	.-16     	; 0x5a4e <__floatsisf+0x1c>
    5a5e:	fa f4       	brpl	.+62     	; 0x5a9e <__floatsisf+0x6c>
    5a60:	bb 0f       	add	r27, r27
    5a62:	11 f4       	brne	.+4      	; 0x5a68 <__floatsisf+0x36>
    5a64:	60 ff       	sbrs	r22, 0
    5a66:	1b c0       	rjmp	.+54     	; 0x5a9e <__floatsisf+0x6c>
    5a68:	6f 5f       	subi	r22, 0xFF	; 255
    5a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a70:	16 c0       	rjmp	.+44     	; 0x5a9e <__floatsisf+0x6c>
    5a72:	88 23       	and	r24, r24
    5a74:	11 f0       	breq	.+4      	; 0x5a7a <__floatsisf+0x48>
    5a76:	96 e9       	ldi	r25, 0x96	; 150
    5a78:	11 c0       	rjmp	.+34     	; 0x5a9c <__floatsisf+0x6a>
    5a7a:	77 23       	and	r23, r23
    5a7c:	21 f0       	breq	.+8      	; 0x5a86 <__floatsisf+0x54>
    5a7e:	9e e8       	ldi	r25, 0x8E	; 142
    5a80:	87 2f       	mov	r24, r23
    5a82:	76 2f       	mov	r23, r22
    5a84:	05 c0       	rjmp	.+10     	; 0x5a90 <__floatsisf+0x5e>
    5a86:	66 23       	and	r22, r22
    5a88:	71 f0       	breq	.+28     	; 0x5aa6 <__floatsisf+0x74>
    5a8a:	96 e8       	ldi	r25, 0x86	; 134
    5a8c:	86 2f       	mov	r24, r22
    5a8e:	70 e0       	ldi	r23, 0x00	; 0
    5a90:	60 e0       	ldi	r22, 0x00	; 0
    5a92:	2a f0       	brmi	.+10     	; 0x5a9e <__floatsisf+0x6c>
    5a94:	9a 95       	dec	r25
    5a96:	66 0f       	add	r22, r22
    5a98:	77 1f       	adc	r23, r23
    5a9a:	88 1f       	adc	r24, r24
    5a9c:	da f7       	brpl	.-10     	; 0x5a94 <__floatsisf+0x62>
    5a9e:	88 0f       	add	r24, r24
    5aa0:	96 95       	lsr	r25
    5aa2:	87 95       	ror	r24
    5aa4:	97 f9       	bld	r25, 7
    5aa6:	08 95       	ret

00005aa8 <__fp_split3>:
    5aa8:	57 fd       	sbrc	r21, 7
    5aaa:	90 58       	subi	r25, 0x80	; 128
    5aac:	44 0f       	add	r20, r20
    5aae:	55 1f       	adc	r21, r21
    5ab0:	59 f0       	breq	.+22     	; 0x5ac8 <__fp_splitA+0x10>
    5ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ab4:	71 f0       	breq	.+28     	; 0x5ad2 <__fp_splitA+0x1a>
    5ab6:	47 95       	ror	r20

00005ab8 <__fp_splitA>:
    5ab8:	88 0f       	add	r24, r24
    5aba:	97 fb       	bst	r25, 7
    5abc:	99 1f       	adc	r25, r25
    5abe:	61 f0       	breq	.+24     	; 0x5ad8 <__fp_splitA+0x20>
    5ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    5ac2:	79 f0       	breq	.+30     	; 0x5ae2 <__fp_splitA+0x2a>
    5ac4:	87 95       	ror	r24
    5ac6:	08 95       	ret
    5ac8:	12 16       	cp	r1, r18
    5aca:	13 06       	cpc	r1, r19
    5acc:	14 06       	cpc	r1, r20
    5ace:	55 1f       	adc	r21, r21
    5ad0:	f2 cf       	rjmp	.-28     	; 0x5ab6 <__fp_split3+0xe>
    5ad2:	46 95       	lsr	r20
    5ad4:	f1 df       	rcall	.-30     	; 0x5ab8 <__fp_splitA>
    5ad6:	08 c0       	rjmp	.+16     	; 0x5ae8 <__fp_splitA+0x30>
    5ad8:	16 16       	cp	r1, r22
    5ada:	17 06       	cpc	r1, r23
    5adc:	18 06       	cpc	r1, r24
    5ade:	99 1f       	adc	r25, r25
    5ae0:	f1 cf       	rjmp	.-30     	; 0x5ac4 <__fp_splitA+0xc>
    5ae2:	86 95       	lsr	r24
    5ae4:	71 05       	cpc	r23, r1
    5ae6:	61 05       	cpc	r22, r1
    5ae8:	08 94       	sec
    5aea:	08 95       	ret

00005aec <__fp_zero>:
    5aec:	e8 94       	clt

00005aee <__fp_szero>:
    5aee:	bb 27       	eor	r27, r27
    5af0:	66 27       	eor	r22, r22
    5af2:	77 27       	eor	r23, r23
    5af4:	cb 01       	movw	r24, r22
    5af6:	97 f9       	bld	r25, 7
    5af8:	08 95       	ret

00005afa <__mulsf3>:
    5afa:	0b d0       	rcall	.+22     	; 0x5b12 <__mulsf3x>
    5afc:	78 c0       	rjmp	.+240    	; 0x5bee <__fp_round>
    5afe:	69 d0       	rcall	.+210    	; 0x5bd2 <__fp_pscA>
    5b00:	28 f0       	brcs	.+10     	; 0x5b0c <__mulsf3+0x12>
    5b02:	6e d0       	rcall	.+220    	; 0x5be0 <__fp_pscB>
    5b04:	18 f0       	brcs	.+6      	; 0x5b0c <__mulsf3+0x12>
    5b06:	95 23       	and	r25, r21
    5b08:	09 f0       	breq	.+2      	; 0x5b0c <__mulsf3+0x12>
    5b0a:	5a c0       	rjmp	.+180    	; 0x5bc0 <__fp_inf>
    5b0c:	5f c0       	rjmp	.+190    	; 0x5bcc <__fp_nan>
    5b0e:	11 24       	eor	r1, r1
    5b10:	ee cf       	rjmp	.-36     	; 0x5aee <__fp_szero>

00005b12 <__mulsf3x>:
    5b12:	ca df       	rcall	.-108    	; 0x5aa8 <__fp_split3>
    5b14:	a0 f3       	brcs	.-24     	; 0x5afe <__mulsf3+0x4>

00005b16 <__mulsf3_pse>:
    5b16:	95 9f       	mul	r25, r21
    5b18:	d1 f3       	breq	.-12     	; 0x5b0e <__mulsf3+0x14>
    5b1a:	95 0f       	add	r25, r21
    5b1c:	50 e0       	ldi	r21, 0x00	; 0
    5b1e:	55 1f       	adc	r21, r21
    5b20:	62 9f       	mul	r22, r18
    5b22:	f0 01       	movw	r30, r0
    5b24:	72 9f       	mul	r23, r18
    5b26:	bb 27       	eor	r27, r27
    5b28:	f0 0d       	add	r31, r0
    5b2a:	b1 1d       	adc	r27, r1
    5b2c:	63 9f       	mul	r22, r19
    5b2e:	aa 27       	eor	r26, r26
    5b30:	f0 0d       	add	r31, r0
    5b32:	b1 1d       	adc	r27, r1
    5b34:	aa 1f       	adc	r26, r26
    5b36:	64 9f       	mul	r22, r20
    5b38:	66 27       	eor	r22, r22
    5b3a:	b0 0d       	add	r27, r0
    5b3c:	a1 1d       	adc	r26, r1
    5b3e:	66 1f       	adc	r22, r22
    5b40:	82 9f       	mul	r24, r18
    5b42:	22 27       	eor	r18, r18
    5b44:	b0 0d       	add	r27, r0
    5b46:	a1 1d       	adc	r26, r1
    5b48:	62 1f       	adc	r22, r18
    5b4a:	73 9f       	mul	r23, r19
    5b4c:	b0 0d       	add	r27, r0
    5b4e:	a1 1d       	adc	r26, r1
    5b50:	62 1f       	adc	r22, r18
    5b52:	83 9f       	mul	r24, r19
    5b54:	a0 0d       	add	r26, r0
    5b56:	61 1d       	adc	r22, r1
    5b58:	22 1f       	adc	r18, r18
    5b5a:	74 9f       	mul	r23, r20
    5b5c:	33 27       	eor	r19, r19
    5b5e:	a0 0d       	add	r26, r0
    5b60:	61 1d       	adc	r22, r1
    5b62:	23 1f       	adc	r18, r19
    5b64:	84 9f       	mul	r24, r20
    5b66:	60 0d       	add	r22, r0
    5b68:	21 1d       	adc	r18, r1
    5b6a:	82 2f       	mov	r24, r18
    5b6c:	76 2f       	mov	r23, r22
    5b6e:	6a 2f       	mov	r22, r26
    5b70:	11 24       	eor	r1, r1
    5b72:	9f 57       	subi	r25, 0x7F	; 127
    5b74:	50 40       	sbci	r21, 0x00	; 0
    5b76:	8a f0       	brmi	.+34     	; 0x5b9a <__mulsf3_pse+0x84>
    5b78:	e1 f0       	breq	.+56     	; 0x5bb2 <__mulsf3_pse+0x9c>
    5b7a:	88 23       	and	r24, r24
    5b7c:	4a f0       	brmi	.+18     	; 0x5b90 <__mulsf3_pse+0x7a>
    5b7e:	ee 0f       	add	r30, r30
    5b80:	ff 1f       	adc	r31, r31
    5b82:	bb 1f       	adc	r27, r27
    5b84:	66 1f       	adc	r22, r22
    5b86:	77 1f       	adc	r23, r23
    5b88:	88 1f       	adc	r24, r24
    5b8a:	91 50       	subi	r25, 0x01	; 1
    5b8c:	50 40       	sbci	r21, 0x00	; 0
    5b8e:	a9 f7       	brne	.-22     	; 0x5b7a <__mulsf3_pse+0x64>
    5b90:	9e 3f       	cpi	r25, 0xFE	; 254
    5b92:	51 05       	cpc	r21, r1
    5b94:	70 f0       	brcs	.+28     	; 0x5bb2 <__mulsf3_pse+0x9c>
    5b96:	14 c0       	rjmp	.+40     	; 0x5bc0 <__fp_inf>
    5b98:	aa cf       	rjmp	.-172    	; 0x5aee <__fp_szero>
    5b9a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b9c:	ec f3       	brlt	.-6      	; 0x5b98 <__mulsf3_pse+0x82>
    5b9e:	98 3e       	cpi	r25, 0xE8	; 232
    5ba0:	dc f3       	brlt	.-10     	; 0x5b98 <__mulsf3_pse+0x82>
    5ba2:	86 95       	lsr	r24
    5ba4:	77 95       	ror	r23
    5ba6:	67 95       	ror	r22
    5ba8:	b7 95       	ror	r27
    5baa:	f7 95       	ror	r31
    5bac:	e7 95       	ror	r30
    5bae:	9f 5f       	subi	r25, 0xFF	; 255
    5bb0:	c1 f7       	brne	.-16     	; 0x5ba2 <__mulsf3_pse+0x8c>
    5bb2:	fe 2b       	or	r31, r30
    5bb4:	88 0f       	add	r24, r24
    5bb6:	91 1d       	adc	r25, r1
    5bb8:	96 95       	lsr	r25
    5bba:	87 95       	ror	r24
    5bbc:	97 f9       	bld	r25, 7
    5bbe:	08 95       	ret

00005bc0 <__fp_inf>:
    5bc0:	97 f9       	bld	r25, 7
    5bc2:	9f 67       	ori	r25, 0x7F	; 127
    5bc4:	80 e8       	ldi	r24, 0x80	; 128
    5bc6:	70 e0       	ldi	r23, 0x00	; 0
    5bc8:	60 e0       	ldi	r22, 0x00	; 0
    5bca:	08 95       	ret

00005bcc <__fp_nan>:
    5bcc:	9f ef       	ldi	r25, 0xFF	; 255
    5bce:	80 ec       	ldi	r24, 0xC0	; 192
    5bd0:	08 95       	ret

00005bd2 <__fp_pscA>:
    5bd2:	00 24       	eor	r0, r0
    5bd4:	0a 94       	dec	r0
    5bd6:	16 16       	cp	r1, r22
    5bd8:	17 06       	cpc	r1, r23
    5bda:	18 06       	cpc	r1, r24
    5bdc:	09 06       	cpc	r0, r25
    5bde:	08 95       	ret

00005be0 <__fp_pscB>:
    5be0:	00 24       	eor	r0, r0
    5be2:	0a 94       	dec	r0
    5be4:	12 16       	cp	r1, r18
    5be6:	13 06       	cpc	r1, r19
    5be8:	14 06       	cpc	r1, r20
    5bea:	05 06       	cpc	r0, r21
    5bec:	08 95       	ret

00005bee <__fp_round>:
    5bee:	09 2e       	mov	r0, r25
    5bf0:	03 94       	inc	r0
    5bf2:	00 0c       	add	r0, r0
    5bf4:	11 f4       	brne	.+4      	; 0x5bfa <__fp_round+0xc>
    5bf6:	88 23       	and	r24, r24
    5bf8:	52 f0       	brmi	.+20     	; 0x5c0e <__fp_round+0x20>
    5bfa:	bb 0f       	add	r27, r27
    5bfc:	40 f4       	brcc	.+16     	; 0x5c0e <__fp_round+0x20>
    5bfe:	bf 2b       	or	r27, r31
    5c00:	11 f4       	brne	.+4      	; 0x5c06 <__fp_round+0x18>
    5c02:	60 ff       	sbrs	r22, 0
    5c04:	04 c0       	rjmp	.+8      	; 0x5c0e <__fp_round+0x20>
    5c06:	6f 5f       	subi	r22, 0xFF	; 255
    5c08:	7f 4f       	sbci	r23, 0xFF	; 255
    5c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0e:	08 95       	ret

00005c10 <__udivmodqi4>:
    5c10:	99 1b       	sub	r25, r25
    5c12:	79 e0       	ldi	r23, 0x09	; 9
    5c14:	04 c0       	rjmp	.+8      	; 0x5c1e <__udivmodqi4_ep>

00005c16 <__udivmodqi4_loop>:
    5c16:	99 1f       	adc	r25, r25
    5c18:	96 17       	cp	r25, r22
    5c1a:	08 f0       	brcs	.+2      	; 0x5c1e <__udivmodqi4_ep>
    5c1c:	96 1b       	sub	r25, r22

00005c1e <__udivmodqi4_ep>:
    5c1e:	88 1f       	adc	r24, r24
    5c20:	7a 95       	dec	r23
    5c22:	c9 f7       	brne	.-14     	; 0x5c16 <__udivmodqi4_loop>
    5c24:	80 95       	com	r24
    5c26:	08 95       	ret

00005c28 <__divmodhi4>:
    5c28:	97 fb       	bst	r25, 7
    5c2a:	09 2e       	mov	r0, r25
    5c2c:	07 26       	eor	r0, r23
    5c2e:	0a d0       	rcall	.+20     	; 0x5c44 <__divmodhi4_neg1>
    5c30:	77 fd       	sbrc	r23, 7
    5c32:	04 d0       	rcall	.+8      	; 0x5c3c <__divmodhi4_neg2>
    5c34:	0c d0       	rcall	.+24     	; 0x5c4e <__udivmodhi4>
    5c36:	06 d0       	rcall	.+12     	; 0x5c44 <__divmodhi4_neg1>
    5c38:	00 20       	and	r0, r0
    5c3a:	1a f4       	brpl	.+6      	; 0x5c42 <__divmodhi4_exit>

00005c3c <__divmodhi4_neg2>:
    5c3c:	70 95       	com	r23
    5c3e:	61 95       	neg	r22
    5c40:	7f 4f       	sbci	r23, 0xFF	; 255

00005c42 <__divmodhi4_exit>:
    5c42:	08 95       	ret

00005c44 <__divmodhi4_neg1>:
    5c44:	f6 f7       	brtc	.-4      	; 0x5c42 <__divmodhi4_exit>
    5c46:	90 95       	com	r25
    5c48:	81 95       	neg	r24
    5c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4c:	08 95       	ret

00005c4e <__udivmodhi4>:
    5c4e:	aa 1b       	sub	r26, r26
    5c50:	bb 1b       	sub	r27, r27
    5c52:	51 e1       	ldi	r21, 0x11	; 17
    5c54:	07 c0       	rjmp	.+14     	; 0x5c64 <__udivmodhi4_ep>

00005c56 <__udivmodhi4_loop>:
    5c56:	aa 1f       	adc	r26, r26
    5c58:	bb 1f       	adc	r27, r27
    5c5a:	a6 17       	cp	r26, r22
    5c5c:	b7 07       	cpc	r27, r23
    5c5e:	10 f0       	brcs	.+4      	; 0x5c64 <__udivmodhi4_ep>
    5c60:	a6 1b       	sub	r26, r22
    5c62:	b7 0b       	sbc	r27, r23

00005c64 <__udivmodhi4_ep>:
    5c64:	88 1f       	adc	r24, r24
    5c66:	99 1f       	adc	r25, r25
    5c68:	5a 95       	dec	r21
    5c6a:	a9 f7       	brne	.-22     	; 0x5c56 <__udivmodhi4_loop>
    5c6c:	80 95       	com	r24
    5c6e:	90 95       	com	r25
    5c70:	bc 01       	movw	r22, r24
    5c72:	cd 01       	movw	r24, r26
    5c74:	08 95       	ret

00005c76 <__eerd_byte_m32u4>:
    5c76:	f9 99       	sbic	0x1f, 1	; 31
    5c78:	fe cf       	rjmp	.-4      	; 0x5c76 <__eerd_byte_m32u4>
    5c7a:	92 bd       	out	0x22, r25	; 34
    5c7c:	81 bd       	out	0x21, r24	; 33
    5c7e:	f8 9a       	sbi	0x1f, 0	; 31
    5c80:	99 27       	eor	r25, r25
    5c82:	80 b5       	in	r24, 0x20	; 32
    5c84:	08 95       	ret

00005c86 <__eerd_word_m32u4>:
    5c86:	a8 e1       	ldi	r26, 0x18	; 24
    5c88:	b0 e0       	ldi	r27, 0x00	; 0
    5c8a:	42 e0       	ldi	r20, 0x02	; 2
    5c8c:	50 e0       	ldi	r21, 0x00	; 0
    5c8e:	0c 94 5e 2e 	jmp	0x5cbc	; 0x5cbc <__eerd_blraw_m32u4>

00005c92 <__eewr_byte_m32u4>:
    5c92:	26 2f       	mov	r18, r22

00005c94 <__eewr_r18_m32u4>:
    5c94:	f9 99       	sbic	0x1f, 1	; 31
    5c96:	fe cf       	rjmp	.-4      	; 0x5c94 <__eewr_r18_m32u4>
    5c98:	1f ba       	out	0x1f, r1	; 31
    5c9a:	92 bd       	out	0x22, r25	; 34
    5c9c:	81 bd       	out	0x21, r24	; 33
    5c9e:	20 bd       	out	0x20, r18	; 32
    5ca0:	0f b6       	in	r0, 0x3f	; 63
    5ca2:	f8 94       	cli
    5ca4:	fa 9a       	sbi	0x1f, 2	; 31
    5ca6:	f9 9a       	sbi	0x1f, 1	; 31
    5ca8:	0f be       	out	0x3f, r0	; 63
    5caa:	01 96       	adiw	r24, 0x01	; 1
    5cac:	08 95       	ret

00005cae <__eewr_word_m32u4>:
    5cae:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <__eewr_byte_m32u4>
    5cb2:	27 2f       	mov	r18, r23
    5cb4:	0c 94 4a 2e 	jmp	0x5c94	; 0x5c94 <__eewr_r18_m32u4>

00005cb8 <__eerd_block_m32u4>:
    5cb8:	dc 01       	movw	r26, r24
    5cba:	cb 01       	movw	r24, r22

00005cbc <__eerd_blraw_m32u4>:
    5cbc:	fc 01       	movw	r30, r24
    5cbe:	f9 99       	sbic	0x1f, 1	; 31
    5cc0:	fe cf       	rjmp	.-4      	; 0x5cbe <__eerd_blraw_m32u4+0x2>
    5cc2:	06 c0       	rjmp	.+12     	; 0x5cd0 <__eerd_blraw_m32u4+0x14>
    5cc4:	f2 bd       	out	0x22, r31	; 34
    5cc6:	e1 bd       	out	0x21, r30	; 33
    5cc8:	f8 9a       	sbi	0x1f, 0	; 31
    5cca:	31 96       	adiw	r30, 0x01	; 1
    5ccc:	00 b4       	in	r0, 0x20	; 32
    5cce:	0d 92       	st	X+, r0
    5cd0:	41 50       	subi	r20, 0x01	; 1
    5cd2:	50 40       	sbci	r21, 0x00	; 0
    5cd4:	b8 f7       	brcc	.-18     	; 0x5cc4 <__eerd_blraw_m32u4+0x8>
    5cd6:	08 95       	ret

00005cd8 <_exit>:
    5cd8:	f8 94       	cli

00005cda <__stop_program>:
    5cda:	ff cf       	rjmp	.-2      	; 0x5cda <__stop_program>
