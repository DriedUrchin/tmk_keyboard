
sebright_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00005aac  00005b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800116  00800116  00005b56  2**0
                  ALLOC
  3 .noinit       00000004  008001be  008001be  00005b56  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000090  00000000  00000000  00006410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000950  00000000  00000000  000064a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000014eb  00000000  00000000  00006df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e12e  00000000  00000000  000082db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000033df  00000000  00000000  00016409  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008d93  00000000  00000000  000197e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000ea0  00000000  00000000  0002257c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004030  00000000  00000000  0002341c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000043e0  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bb0  00000000  00000000  0002b82c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
       0:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       8:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
       c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}

void debug_action(action_t action)
{
      10:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
      14:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
    if (bits >> 8) { bits >>= 8; n += 8;}
    if (bits >> 4) { bits >>= 4; n += 4;}
    if (bits >> 2) { bits >>= 2; n += 2;}
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}
      18:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
    set_sleep_mode(SLEEP_MODE_IDLE);
    sleep_enable();
    sei();
    sleep_cpu();
    sleep_disable();
}
      1c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
      20:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
{
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
      24:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      28:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__vector_10>
      2c:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__vector_11>
      30:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__vector_12>
      34:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      38:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      3c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      40:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      44:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      48:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      4c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      50:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      54:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__vector_21>
      58:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      5c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      60:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      64:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      68:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      6c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      70:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      74:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      78:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      7c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      80:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      84:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      88:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      8c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      90:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      94:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      98:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      9c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      a0:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      a4:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>
      a8:	0c 94 77 06 	jmp	0xcee	; 0xcee <__bad_interrupt>

000000ac <keymaps>:
      ac:	29 14 1a 08 15 17 1c 18 0c 12 13 2a 2b 04 16 07     )..........*+...
      bc:	09 0a 0b 0d 0e 0f 00 28 e0 00 1d 1b 06 19 05 11     .......(........
      cc:	10 33 c1 c0 00 e1 e2 00 c2 2c 00 36 37 34 38 00     .3.......,.6748.
      dc:	29 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     )...............
      ec:	01 01 01 01 01 01 00 01 01 00 01 01 01 01 01 01     ................
      fc:	01 01 c1 c0 00 01 01 00 c2 01 00 50 52 51 4f 00     ...........PRQO.
     10c:	35 1e 1f 20 21 22 23 24 25 26 27 4c 39 4a 01 01     5.. !"#$%&'L9J..
     11c:	4b 4a 2d 2e 2f 30 00 28 01 00 4d c9 49 4e 4d 33     KJ-./0.(..M.INM3
     12c:	31 33 c1 c0 00 01 01 00 c2 2c 00 50 52 51 4f 00     13.......,.PRQO.
     13c:	29 1e 1f 20 21 22 23 24 25 26 27 4c 4a 21 22 23     ).. !"#$%&'LJ!"#
     14c:	4b c3 c4 c5 08 0c 00 c7 4d 00 24 25 26 4e 46 0e     K.......M.$%&NF.
     15c:	10 33 c1 c0 00 e1 27 00 c2 c6 00 50 52 51 4f 00     .3....'....PRQO.
     16c:	29 14 1a 08 15 17 1c 18 0c 12 13 2a 2b 04 16 07     )..........*+...
     17c:	09 0a 0b 0d 0e 0f 00 28 e1 00 1d 1b 06 19 05 11     .......(........
     18c:	10 33 c1 c0 00 e0 e2 00 c2 2c 00 36 37 34 38 00     .3.......,.6748.
     19c:	29 14 1a 08 15 17 1c 18 0c 12 13 2a 2b 04 16 e1     )..........*+...
     1ac:	e5 48 0b 0d 0e 0f 00 28 e0 00 1d 1b 06 19 05 11     .H.....(........
     1bc:	10 33 c1 c0 00 e1 e2 00 c2 2c 00 36 37 34 38 00     .3.......,.6748.

000001cc <fn_actions>:
     1cc:	f1 a2 02 8a 08 8a 21 8a 04 8a f3 a0 f3 a0 22 8a     ......!.......".

000001dc <__c.1520>:
     1dc:	0a 00                                               ..

000001de <__c.1518>:
     1de:	25 30 31 36 62 00                                   %016b.

000001e4 <__c.1516>:
     1e4:	3a 20 00                                            : .

000001e7 <__c.1514>:
     1e7:	25 30 32 58 00                                      %02X.

000001ec <__c.1511>:
     1ec:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     1fc:	42 43 44 45 46 0a 00                                BCDEF..

00000203 <__c.1469>:
     203:	0a 00                                               ..

00000205 <__c.1467>:
     205:	25 30 32 58 00                                      %02X.

0000020a <__c.1465>:
     20a:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000214 <__c.5032>:
     214:	5b 73 5d 00                                         [s].

00000218 <__c.5030>:
     218:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     228:	00                                                  .

00000229 <__c.5028>:
     229:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     239:	00                                                  .

0000023a <__c.4819>:
     23a:	5b 57 5d 00                                         [W].

0000023e <__c.4815>:
     23e:	5b 53 5d 00                                         [S].

00000242 <__c.4811>:
     242:	5b 52 5d 00                                         [R].

00000246 <__c.4806>:
     246:	5b 44 5d 00                                         [D].

0000024a <__c.4799>:
     24a:	5b 43 5d 00                                         [C].

0000024e <KeyboardReport>:
     24e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     25e:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     26e:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     27e:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000028d <MouseReport>:
     28d:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     29d:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     2ad:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     2bd:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     2cd:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000002da <ExtrakeyReport>:
     2da:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     2ea:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2fa:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     30a:	10 95 01 81 00 c0                                   ......

00000310 <ConsoleReport>:
     310:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     320:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000330 <NKROReport>:
     330:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     340:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     350:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     360:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000369 <DeviceDescriptor>:
     369:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     379:	00 01                                               ..

0000037b <ConfigurationDescriptor>:
     37b:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     38b:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     39b:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     3ab:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     3bb:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     3cb:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     3db:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     3eb:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     3fb:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000408 <LanguageString>:
     408:	04 03 09 04                                         ....

0000040c <ManufacturerString>:
     40c:	22 03 50 00 61 00 6e 00 63 00 20 00 49 00 6e 00     ".P.a.n.c. .I.n.
     41c:	74 00 65 00 72 00 61 00 63 00 74 00 69 00 76 00     t.e.r.a.c.t.i.v.
     42c:	65 00 00 00                                         e...

00000430 <ProductString>:
     430:	12 03 53 00 65 00 62 00 72 00 69 00 67 00 68 00     ..S.e.b.r.i.g.h.
     440:	74 00 00 00                                         t...

00000444 <__c.4554>:
     444:	0a 00                                               ..

00000446 <__c.4549>:
     446:	25 30 32 58 20 00                                   %02X .

0000044c <__c.4546>:
     44c:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     45c:	20 00                                                .

0000045e <__c.4921>:
     45e:	0a 00                                               ..

00000460 <__c.4919>:
     460:	25 30 32 58 00                                      %02X.

00000465 <__c.4917>:
     465:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     475:	3a 20 00                                            : .

00000478 <__c.4761>:
     478:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     488:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000496 <__c.4744>:
     496:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     4a6:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000004b4 <__c.4847>:
     4b4:	64 6f 6e 65 2e 0a 00                                done...

000004bb <__c.4841>:
     4bb:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     4cb:	2e 2e 2e 20 00                                      ... .

000004d0 <__c.4760>:
     4d0:	29 0a 00                                            )..

000004d3 <__c.4758>:
     4d3:	25 75 00                                            %u.

000004d6 <__c.4756>:
     4d6:	2f 00                                               /.

000004d8 <__c.4754>:
     4d8:	25 75 00                                            %u.

000004db <__c.4752>:
     4db:	5d 28 00                                            ](.

000004de <__c.4750>:
     4de:	25 64 00                                            %d.

000004e1 <__c.4748>:
     4e1:	20 00                                                .

000004e3 <__c.4746>:
     4e3:	25 64 00                                            %d.

000004e6 <__c.4744>:
     4e6:	20 00                                                .

000004e8 <__c.4742>:
     4e8:	25 64 00                                            %d.

000004eb <__c.4740>:
     4eb:	20 00                                                .

000004ed <__c.4738>:
     4ed:	25 64 00                                            %d.

000004f0 <__c.4736>:
     4f0:	7c 00                                               |.

000004f2 <__c.4734>:
     4f2:	25 30 32 58 00                                      %02X.

000004f7 <__c.4732>:
     4f7:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     507:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     517:	20 5b 00                                             [.

0000051a <__c.5182>:
     51a:	3f 00                                               ?.

0000051c <__c.5173>:
     51c:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000527 <__c.5171>:
     527:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000531 <__c.5168>:
     531:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     541:	25 30 34 6c 58 0a 00                                %04lX..

00000548 <__c.5166>:
     548:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     558:	58 0a 00                                            X..

0000055b <__c.5164>:
     55b:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     56b:	58 0a 00                                            X..

0000056e <__c.5162>:
     56e:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     57e:	6c 3a 20 25 58 0a 00                                l: %X..

00000585 <__c.5160>:
     585:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     595:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

0000059f <__c.5158>:
     59f:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000005ad <__c.5155>:
     5ad:	47 43 43 3a 20 34 2e 33 2e 33 20 41 56 52 2d 4c     GCC: 4.3.3 AVR-L
     5bd:	49 42 43 3a 20 31 2e 36 2e 37 20 41 56 52 5f 41     IBC: 1.6.7 AVR_A
     5cd:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000005d8 <__c.5153>:
     5d8:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     5e8:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     5f8:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     608:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     618:	30 39 36 0a 00                                      096..

0000061d <__c.5151>:
     61d:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     62d:	31 38 3a 35 39 3a 35 33 20 41 70 72 20 31 34 20     18:59:53 Apr 14 
     63d:	32 30 31 36 29 0a 00                                2016)..

00000644 <__c.5149>:
     644:	56 49 44 3a 20 30 78 46 45 45 44 28 50 61 6e 63     VID: 0xFEED(Panc
     654:	20 49 6e 74 65 72 61 63 74 69 76 65 29 20 50 49      Interactive) PI
     664:	44 3a 20 30 78 36 30 36 30 28 53 65 62 72 69 67     D: 0x6060(Sebrig
     674:	68 74 29 20 56 45 52 3a 20 30 78 30 30 30 31 0a     ht) VER: 0x0001.
     684:	00                                                  .

00000685 <__c.5147>:
     685:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     695:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     6a5:	6f 72 20 53 65 62 72 69 67 68 74 0a 00              or Sebright..

000006b2 <__c.5145>:
     6b2:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000006c1 <__c.5142>:
     6c1:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000006ce <__c.5140>:
     6ce:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000006da <__c.5137>:
     6da:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000006ea <__c.5135>:
     6ea:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000006f9 <__c.5132>:
     6f9:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000707 <__c.5130>:
     707:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000714 <__c.5127>:
     714:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000720 <__c.5125>:
     720:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

0000072d <__c.5122>:
     72d:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     73d:	00                                                  .

0000073e <__c.5119>:
     73e:	43 3e 20 00                                         C> .

00000742 <__c.5113>:
     742:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

0000074d <__c.5075>:
     74d:	0a 00                                               ..

0000074f <__c.5073>:
     74f:	25 75 00                                            %u.

00000752 <__c.5071>:
     752:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

0000075a <__c.5069>:
     75a:	0a 00                                               ..

0000075c <__c.5067>:
     75c:	25 75 00                                            %u.

0000075f <__c.5065>:
     75f:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     76f:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

0000077b <__c.5063>:
     77b:	0a 00                                               ..

0000077d <__c.5061>:
     77d:	25 75 00                                            %u.

00000780 <__c.5059>:
     780:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     790:	20 00                                                .

00000792 <__c.5057>:
     792:	0a 00                                               ..

00000794 <__c.5055>:
     794:	25 75 00                                            %u.

00000797 <__c.5053>:
     797:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000007a1 <__c.5051>:
     7a1:	0a 00                                               ..

000007a3 <__c.5049>:
     7a3:	25 75 00                                            %u.

000007a6 <__c.5047>:
     7a6:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     7b6:	20 00                                                .

000007b8 <__c.5045>:
     7b8:	0a 00                                               ..

000007ba <__c.5043>:
     7ba:	25 75 00                                            %u.

000007bd <__c.5041>:
     7bd:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     7cd:	20 00                                                .

000007cf <__c.5039>:
     7cf:	0a 00                                               ..

000007d1 <__c.5037>:
     7d1:	25 75 00                                            %u.

000007d4 <__c.5035>:
     7d4:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     7e4:	74 72 6f 6c 3a 20 00                                trol: .

000007eb <__c.5033>:
     7eb:	0a 00                                               ..

000007ed <__c.5031>:
     7ed:	25 75 00                                            %u.

000007f0 <__c.5029>:
     7f0:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     800:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000809 <__c.5027>:
     809:	0a 00                                               ..

0000080b <__c.5025>:
     80b:	25 30 32 58 00                                      %02X.

00000810 <__c.5023>:
     810:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     820:	77 3a 20 00                                         w: .

00000824 <__c.5020>:
     824:	0a 00                                               ..

00000826 <__c.5018>:
     826:	25 75 00                                            %u.

00000829 <__c.5016>:
     829:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000832 <__c.5014>:
     832:	0a 00                                               ..

00000834 <__c.5012>:
     834:	25 75 00                                            %u.

00000837 <__c.5010>:
     837:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000843 <__c.5008>:
     843:	0a 00                                               ..

00000845 <__c.5006>:
     845:	25 75 00                                            %u.

00000848 <__c.5004>:
     848:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000852 <__c.5002>:
     852:	0a 00                                               ..

00000854 <__c.5000>:
     854:	25 75 00                                            %u.

00000857 <__c.4998>:
     857:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000861 <__c.4996>:
     861:	0a 00                                               ..

00000863 <__c.4994>:
     863:	25 30 32 58 00                                      %02X.

00000868 <__c.4992>:
     868:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     878:	3a 20 00                                            : .

0000087b <__c.4989>:
     87b:	0a 00                                               ..

0000087d <__c.4987>:
     87d:	25 75 00                                            %u.

00000880 <__c.4985>:
     880:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000890 <__c.4980>:
     890:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     8a0:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     8b0:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     8c0:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     8d0:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     8e0:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     8f0:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     900:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     910:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     920:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     930:	4b 52 4f 0a 00                                      KRO..

00000935 <__c.5216>:
     935:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     945:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     955:	73 65 6b 65 79 0a 00                                sekey..

0000095c <__c.5451>:
     95c:	4c 25 64 0a 00                                      L%d..

00000961 <__c.5232>:
     961:	43 3e 20 00                                         C> .

00000965 <__c.5230>:
     965:	3f 00                                               ?.

00000967 <__c.5227>:
     967:	4d 3e 20 00                                         M> .

0000096b <__c.5394>:
     96b:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     97b:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     98b:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     99b:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     9ab:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000009b9 <__c.5392>:
     9b9:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     9c9:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     9d9:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     9e9:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     9f9:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     a09:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     a19:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     a29:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     a39:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     a49:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     a59:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     a69:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     a79:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     a89:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     a99:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     aa9:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000ab4 <__c.5425>:
     ab4:	4d 3e 00                                            M>.

00000ab7 <__c.5423>:
     ab7:	4d 25 64 3e 20 00                                   M%d> .

00000abd <__c.5421>:
     abd:	3f 00                                               ?.

00000abf <__c.5418>:
     abf:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000acc <__c.5404>:
     acc:	43 3e 20 00                                         C> .

00000ad0 <__c.5276>:
     ad0:	0a 00                                               ..

00000ad2 <__c.5274>:
     ad2:	25 75 00                                            %u.

00000ad5 <__c.5272>:
     ad5:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     ae5:	5f 6d 61 78 3a 20 00                                _max: .

00000aec <__c.5270>:
     aec:	0a 00                                               ..

00000aee <__c.5268>:
     aee:	25 75 00                                            %u.

00000af1 <__c.5266>:
     af1:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     b01:	65 64 3a 20 00                                      ed: .

00000b06 <__c.5264>:
     b06:	0a 00                                               ..

00000b08 <__c.5262>:
     b08:	25 75 00                                            %u.

00000b0b <__c.5260>:
     b0b:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     b1b:	00                                                  .

00000b1c <__c.5258>:
     b1c:	0a 00                                               ..

00000b1e <__c.5256>:
     b1e:	25 75 00                                            %u.

00000b21 <__c.5254>:
     b21:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000b30 <__c.5252>:
     b30:	0a 00                                               ..

00000b32 <__c.5250>:
     b32:	25 75 00                                            %u.

00000b35 <__c.5248>:
     b35:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     b45:	20 00                                                .

00000b47 <__c.5246>:
     b47:	0a 00                                               ..

00000b49 <__c.5244>:
     b49:	25 75 00                                            %u.

00000b4c <__c.5242>:
     b4c:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     b5c:	20 00                                                .

00000b5e <__c.5240>:
     b5e:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000b6c <__c.5311>:
     b6c:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     b7c:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000b87 <__c.5308>:
     b87:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     b97:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000ba0 <__c.5305>:
     ba0:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     bb0:	20 25 64 0a 00                                       %d..

00000bb5 <__c.5302>:
     bb5:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     bc5:	64 0a 00                                            d..

00000bc8 <__c.5299>:
     bc8:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     bd8:	0a 00                                               ..

00000bda <__c.5295>:
     bda:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000be9 <__c.5367>:
     be9:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     bf9:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000c04 <__c.5364>:
     c04:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     c14:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000c1d <__c.5361>:
     c1d:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     c2d:	20 25 64 0a 00                                       %d..

00000c32 <__c.5358>:
     c32:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     c42:	64 0a 00                                            d..

00000c45 <__c.5355>:
     c45:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     c55:	0a 00                                               ..

00000c57 <__c.5351>:
     c57:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000c66 <__ctors_end>:
     c66:	11 24       	eor	r1, r1
     c68:	1f be       	out	0x3f, r1	; 63
     c6a:	cf ef       	ldi	r28, 0xFF	; 255
     c6c:	da e0       	ldi	r29, 0x0A	; 10
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	cd bf       	out	0x3d, r28	; 61

00000c72 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c72:	04 b6       	in	r0, 0x34	; 52
     c74:	03 fe       	sbrs	r0, 3
     c76:	24 c0       	rjmp	.+72     	; 0xcc0 <__do_copy_data>
     c78:	80 91 be 01 	lds	r24, 0x01BE
     c7c:	90 91 bf 01 	lds	r25, 0x01BF
     c80:	a0 91 c0 01 	lds	r26, 0x01C0
     c84:	b0 91 c1 01 	lds	r27, 0x01C1
     c88:	87 50       	subi	r24, 0x07	; 7
     c8a:	90 4b       	sbci	r25, 0xB0	; 176
     c8c:	a7 40       	sbci	r26, 0x07	; 7
     c8e:	b0 4b       	sbci	r27, 0xB0	; 176
     c90:	b9 f4       	brne	.+46     	; 0xcc0 <__do_copy_data>
        reset_key = 0;
     c92:	10 92 be 01 	sts	0x01BE, r1
     c96:	10 92 bf 01 	sts	0x01BF, r1
     c9a:	10 92 c0 01 	sts	0x01C0, r1
     c9e:	10 92 c1 01 	sts	0x01C1, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     ca2:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     ca4:	84 b7       	in	r24, 0x34	; 52
     ca6:	87 7f       	andi	r24, 0xF7	; 247
     ca8:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     caa:	88 e1       	ldi	r24, 0x18	; 24
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	80 93 60 00 	sts	0x0060, r24
     cb4:	10 92 60 00 	sts	0x0060, r1
     cb8:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     cba:	e0 e0       	ldi	r30, 0x00	; 0
     cbc:	f8 e3       	ldi	r31, 0x38	; 56
     cbe:	09 95       	icall

00000cc0 <__do_copy_data>:
     cc0:	11 e0       	ldi	r17, 0x01	; 1
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b1 e0       	ldi	r27, 0x01	; 1
     cc6:	ec ea       	ldi	r30, 0xAC	; 172
     cc8:	fa e5       	ldi	r31, 0x5A	; 90
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <.do_copy_data_start>

00000ccc <.do_copy_data_loop>:
     ccc:	05 90       	lpm	r0, Z+
     cce:	0d 92       	st	X+, r0

00000cd0 <.do_copy_data_start>:
     cd0:	a6 31       	cpi	r26, 0x16	; 22
     cd2:	b1 07       	cpc	r27, r17
     cd4:	d9 f7       	brne	.-10     	; 0xccc <.do_copy_data_loop>

00000cd6 <__do_clear_bss>:
     cd6:	11 e0       	ldi	r17, 0x01	; 1
     cd8:	a6 e1       	ldi	r26, 0x16	; 22
     cda:	b1 e0       	ldi	r27, 0x01	; 1
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <.do_clear_bss_start>

00000cde <.do_clear_bss_loop>:
     cde:	1d 92       	st	X+, r1

00000ce0 <.do_clear_bss_start>:
     ce0:	ae 3b       	cpi	r26, 0xBE	; 190
     ce2:	b1 07       	cpc	r27, r17
     ce4:	e1 f7       	brne	.-8      	; 0xcde <.do_clear_bss_loop>
     ce6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <main>
     cea:	0c 94 54 2d 	jmp	0x5aa8	; 0x5aa8 <_exit>

00000cee <__bad_interrupt>:
     cee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000cf2 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     cf2:	ff 93       	push	r31
	push	ZL
     cf4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     cf6:	e0 91 16 01 	lds	r30, 0x0116
	lds	ZH, xfunc_out+1	;/
     cfa:	f0 91 17 01 	lds	r31, 0x0117
	sbiw	ZL, 0		;Skip if null
     cfe:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     d00:	09 f0       	breq	.+2      	; 0xd04 <xputc+0x12>
	icall
     d02:	09 95       	icall
2:	pop	ZL
     d04:	ef 91       	pop	r30
	pop	ZH
     d06:	ff 91       	pop	r31
	ret
     d08:	08 95       	ret

00000d0a <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     d0a:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     d0c:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     d0e:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     d10:	11 f0       	breq	.+4      	; 0xd16 <xputs+0xc>
	rcall	xputc
     d12:	ef df       	rcall	.-34     	; 0xcf2 <xputc>
	rjmp	1b
     d14:	fb cf       	rjmp	.-10     	; 0xd0c <xputs+0x2>
2:	ret
     d16:	08 95       	ret

00000d18 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     d18:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     d1a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     d1c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     d1e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     d20:	0c c0       	rjmp	.+24     	; 0xd3a <xitoa+0x22>
	neg	r20		;
     d22:	41 95       	neg	r20
	sbrs	r25, 7		;
     d24:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <xitoa+0x22>
	ldi	r30, '-'	;
     d28:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     d2a:	60 95       	com	r22
	com	r23		;
     d2c:	70 95       	com	r23
	com	r24		;
     d2e:	80 95       	com	r24
	com	r25		;
     d30:	90 95       	com	r25
	adc	r22, r1		;
     d32:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     d34:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d36:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d38:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d3a:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <xitoa+0x2a>
	neg	r18		;
     d3e:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d40:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d42:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d44:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d46:	66 0f       	add	r22, r22
	rol	r23		;
     d48:	77 1f       	adc	r23, r23
	rol	r24		;
     d4a:	88 1f       	adc	r24, r24
	rol	r25		;
     d4c:	99 1f       	adc	r25, r25
	rol	r26		;
     d4e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d50:	a4 17       	cp	r26, r20
	brcs	3f		;
     d52:	10 f0       	brcs	.+4      	; 0xd58 <xitoa+0x40>
	sub	r26, r20	;
     d54:	a4 1b       	sub	r26, r20
	inc	r22		;
     d56:	63 95       	inc	r22
3:	dec	r21		;
     d58:	5a 95       	dec	r21
	brne	2b		;/
     d5a:	a9 f7       	brne	.-22     	; 0xd46 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d5c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <xitoa+0x4a>
	subi	r26, -7		;
     d60:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d62:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d64:	af 93       	push	r26
	inc	r31		;/
     d66:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d68:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d6a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d6c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d6e:	91 05       	cpc	r25, r1
	brne	1b		;/
     d70:	41 f7       	brne	.-48     	; 0xd42 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d72:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d74:	11 f4       	brne	.+4      	; 0xd7a <xitoa+0x62>
	push	r30		;
     d76:	ef 93       	push	r30
	inc	r31		;/
     d78:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d7a:	f2 17       	cp	r31, r18
	brcc	6f		;
     d7c:	18 f4       	brcc	.+6      	; 0xd84 <xitoa+0x6c>
	push	r19		;
     d7e:	3f 93       	push	r19
	inc	r31		;
     d80:	f3 95       	inc	r31
	rjmp	5b		;/
     d82:	fb cf       	rjmp	.-10     	; 0xd7a <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d84:	8f 91       	pop	r24
	rcall	xputc		;
     d86:	b5 df       	rcall	.-150    	; 0xcf2 <xputc>
	dec	r31		;
     d88:	fa 95       	dec	r31
	brne	6b		;/
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <xitoa+0x6c>

	ret
     d8c:	08 95       	ret

00000d8e <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d8e:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d90:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d92:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d94:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d96:	21 f0       	breq	.+8      	; 0xda0 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d98:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d9a:	19 f0       	breq	.+6      	; 0xda2 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d9c:	aa df       	rcall	.-172    	; 0xcf2 <xputc>
	rjmp	0b		;/
     d9e:	f9 cf       	rjmp	.-14     	; 0xd92 <xvprintf+0x4>
90:	ret
     da0:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     da2:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     da4:	e8 94       	clt
	_LPMI	r21		;Get flags
     da6:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     da8:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     daa:	c1 f3       	breq	.-16     	; 0xd9c <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     dac:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     dae:	11 f4       	brne	.+4      	; 0xdb4 <xvprintf+0x26>
	set			;/
     db0:	68 94       	set
22:	_LPMI	r21		;Get width
     db2:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     db4:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     db6:	48 f4       	brcc	.+18     	; 0xdca <xvprintf+0x3c>
	subi	r21, '0'	;
     db8:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     dba:	90 f3       	brcs	.-28     	; 0xda0 <xvprintf+0x12>
	lsl	r18		;
     dbc:	22 0f       	add	r18, r18
	mov	r0, r18		;
     dbe:	02 2e       	mov	r0, r18
	lsl	r18		;
     dc0:	22 0f       	add	r18, r18
	lsl	r18		;
     dc2:	22 0f       	add	r18, r18
	add	r18, r0		;
     dc4:	20 0d       	add	r18, r0
	add	r18, r21	;
     dc6:	25 0f       	add	r18, r21
	rjmp	22b		;/
     dc8:	f4 cf       	rjmp	.-24     	; 0xdb2 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     dca:	0e f4       	brtc	.+2      	; 0xdce <xvprintf+0x40>
	neg	r18		;
     dcc:	21 95       	neg	r18
25:	ld	r24, Y+		;
     dce:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     dd0:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     dd2:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     dd4:	19 f3       	breq	.-58     	; 0xd9c <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     dd6:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     dd8:	29 f1       	breq	.+74     	; 0xe24 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     dda:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     ddc:	59 f1       	breq	.+86     	; 0xe34 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     dde:	bc 01       	movw	r22, r24
	clr	r24		;
     de0:	88 27       	eor	r24, r24
	clr	r25		;
     de2:	99 27       	eor	r25, r25
	clt			;/
     de4:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     de6:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     de8:	21 f4       	brne	.+8      	; 0xdf2 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     dea:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     dec:	99 91       	ld	r25, Y+
	set			;
     dee:	68 94       	set
	_LPMI	r21		;/
     df0:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     df2:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     df4:	39 f4       	brne	.+14     	; 0xe04 <xvprintf+0x76>
	ldi	r20, -10	;
     df6:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     df8:	7e f0       	brts	.+30     	; 0xe18 <xvprintf+0x8a>
	sbrs	r23, 7		;
     dfa:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <xvprintf+0x8a>
	ldi	r24, -1		;
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     e00:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     e02:	0a c0       	rjmp	.+20     	; 0xe18 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     e04:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     e06:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     e08:	39 f0       	breq	.+14     	; 0xe18 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     e0a:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     e0c:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     e0e:	21 f0       	breq	.+8      	; 0xe18 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     e10:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     e12:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     e14:	09 f0       	breq	.+2      	; 0xe18 <xvprintf+0x8a>
	ret			;abort
     e16:	08 95       	ret
40:	push	ZH		;Output the value
     e18:	ff 93       	push	r31
	push	ZL		;
     e1a:	ef 93       	push	r30
	rcall	xitoa		;
     e1c:	7d df       	rcall	.-262    	; 0xd18 <xitoa>
42:	pop	ZL		;
     e1e:	ef 91       	pop	r30
	pop	ZH		;
     e20:	ff 91       	pop	r31
	rjmp	0b		;/
     e22:	b7 cf       	rjmp	.-146    	; 0xd92 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     e24:	ff 93       	push	r31
	push	ZL
     e26:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     e28:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     e2a:	81 91       	ld	r24, Z+
	cpi	r24, 0
     e2c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     e2e:	b9 f3       	breq	.-18     	; 0xe1e <xvprintf+0x90>
	rcall	xputc
     e30:	60 df       	rcall	.-320    	; 0xcf2 <xputc>
	rjmp	51b
     e32:	fb cf       	rjmp	.-10     	; 0xe2a <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     e34:	ff 93       	push	r31
	push	ZL
     e36:	ef 93       	push	r30
	rcall	xputs
     e38:	68 df       	rcall	.-304    	; 0xd0a <xputs>
	rjmp	42b
     e3a:	f1 cf       	rjmp	.-30     	; 0xe1e <xvprintf+0x90>

00000e3c <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e3c:	df 93       	push	r29
	push	YL
     e3e:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e40:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e42:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e44:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e46:	a3 df       	rcall	.-186    	; 0xd8e <xvprintf>
	pop	YL
     e48:	cf 91       	pop	r28
	pop	YH
     e4a:	df 91       	pop	r29
	ret
     e4c:	08 95       	ret

00000e4e <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     e4e:	9c e0       	ldi	r25, 0x0C	; 12
     e50:	79 9f       	mul	r23, r25
     e52:	f0 01       	movw	r30, r0
     e54:	11 24       	eor	r1, r1
     e56:	e6 0f       	add	r30, r22
     e58:	f1 1d       	adc	r31, r1
     e5a:	90 e3       	ldi	r25, 0x30	; 48
     e5c:	89 9f       	mul	r24, r25
     e5e:	c0 01       	movw	r24, r0
     e60:	11 24       	eor	r1, r1
     e62:	e8 0f       	add	r30, r24
     e64:	f9 1f       	adc	r31, r25
     e66:	e4 55       	subi	r30, 0x54	; 84
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	e4 91       	lpm	r30, Z+
}
     e6c:	8e 2f       	mov	r24, r30
     e6e:	08 95       	ret

00000e70 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     e70:	e8 2f       	mov	r30, r24
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	e4 5b       	subi	r30, 0xB4	; 180
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	25 91       	lpm	r18, Z+
     e7e:	34 91       	lpm	r19, Z+
}
     e80:	c9 01       	movw	r24, r18
     e82:	08 95       	ret

00000e84 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
     e84:	e8 2f       	mov	r30, r24
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e8 5e       	subi	r30, 0xE8	; 232
     e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    return matrix[row];
}
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	08 95       	ret

00000e96 <unselect_rows>:
 * pin: F0  F1  F4  F5 
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b00110011;
     e96:	80 b3       	in	r24, 0x10	; 16
     e98:	8c 7c       	andi	r24, 0xCC	; 204
     e9a:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b00110011;
     e9c:	81 b3       	in	r24, 0x11	; 17
     e9e:	8c 7c       	andi	r24, 0xCC	; 204
     ea0:	81 bb       	out	0x11, r24	; 17
}
     ea2:	08 95       	ret

00000ea4 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     ea4:	0e 94 4b 07 	call	0xe96	; 0xe96 <unselect_rows>
 * pin: F6  F7  B6  B5  B4  D7  C7  C6  D3  D2  D1  D0
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<6 | 1<<7);
     ea8:	80 b3       	in	r24, 0x10	; 16
     eaa:	8f 73       	andi	r24, 0x3F	; 63
     eac:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<6 | 1<<7);
     eae:	81 b3       	in	r24, 0x11	; 17
     eb0:	80 6c       	ori	r24, 0xC0	; 192
     eb2:	81 bb       	out	0x11, r24	; 17
    DDRB  &= ~(1<<6 | 1<< 5 | 1<<4);
     eb4:	84 b1       	in	r24, 0x04	; 4
     eb6:	8f 78       	andi	r24, 0x8F	; 143
     eb8:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<6 | 1<< 5 | 1<<4);
     eba:	85 b1       	in	r24, 0x05	; 5
     ebc:	80 67       	ori	r24, 0x70	; 112
     ebe:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     ec0:	8a b1       	in	r24, 0x0a	; 10
     ec2:	80 77       	andi	r24, 0x70	; 112
     ec4:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     ec6:	8b b1       	in	r24, 0x0b	; 11
     ec8:	8f 68       	ori	r24, 0x8F	; 143
     eca:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     ecc:	87 b1       	in	r24, 0x07	; 7
     ece:	8f 73       	andi	r24, 0x3F	; 63
     ed0:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     ed2:	88 b1       	in	r24, 0x08	; 8
     ed4:	80 6c       	ori	r24, 0xC0	; 192
     ed6:	88 b9       	out	0x08, r24	; 8
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     edc:	fc 01       	movw	r30, r24
     ede:	e8 5e       	subi	r30, 0xE8	; 232
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	10 82       	st	Z, r1
        matrix_debouncing[i] = 0;
     ee6:	fc 01       	movw	r30, r24
     ee8:	e0 5e       	subi	r30, 0xE0	; 224
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	11 82       	std	Z+1, r1	; 0x01
     eee:	10 82       	st	Z, r1
     ef0:	02 96       	adiw	r24, 0x02	; 2
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     ef2:	88 30       	cpi	r24, 0x08	; 8
     ef4:	91 05       	cpc	r25, r1
     ef6:	91 f7       	brne	.-28     	; 0xedc <matrix_init+0x38>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     ef8:	08 95       	ret

00000efa <matrix_scan>:

uint8_t matrix_scan(void)
{
     efa:	2f 92       	push	r2
     efc:	3f 92       	push	r3
     efe:	4f 92       	push	r4
     f00:	5f 92       	push	r5
     f02:	6f 92       	push	r6
     f04:	7f 92       	push	r7
     f06:	8f 92       	push	r8
     f08:	9f 92       	push	r9
     f0a:	af 92       	push	r10
     f0c:	bf 92       	push	r11
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	60 e2       	ldi	r22, 0x20	; 32
     f20:	a6 2e       	mov	r10, r22
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	b6 2e       	mov	r11, r22
     f26:	dd 24       	eor	r13, r13
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     f28:	55 e0       	ldi	r21, 0x05	; 5
     f2a:	c5 2e       	mov	r12, r21
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     f2c:	22 24       	eor	r2, r2
     f2e:	23 94       	inc	r2
     f30:	d2 14       	cp	r13, r2
     f32:	69 f0       	breq	.+26     	; 0xf4e <matrix_scan+0x54>
     f34:	d2 14       	cp	r13, r2
     f36:	40 f0       	brcs	.+16     	; 0xf48 <matrix_scan+0x4e>
     f38:	42 e0       	ldi	r20, 0x02	; 2
     f3a:	34 2e       	mov	r3, r20
     f3c:	d3 14       	cp	r13, r3
     f3e:	51 f0       	breq	.+20     	; 0xf54 <matrix_scan+0x5a>
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	d8 16       	cp	r13, r24
     f44:	61 f4       	brne	.+24     	; 0xf5e <matrix_scan+0x64>
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <matrix_scan+0x60>
        case 0:
            DDRF  |= (1<<0);
     f48:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     f4a:	88 98       	cbi	0x11, 0	; 17
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <matrix_scan+0x64>
            break;
        case 1:
            DDRF  |= (1<<1);
     f4e:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     f50:	89 98       	cbi	0x11, 1	; 17
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <matrix_scan+0x64>
            break;
        case 2:
            DDRF  |= (1<<4);
     f54:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     f56:	8c 98       	cbi	0x11, 4	; 17
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <matrix_scan+0x64>
            break;
        case 3:
            DDRF  |= (1<<5);
     f5a:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     f5c:	8d 98       	cbi	0x11, 5	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f5e:	80 ea       	ldi	r24, 0xA0	; 160
     f60:	8a 95       	dec	r24
     f62:	f1 f7       	brne	.-4      	; 0xf60 <matrix_scan+0x66>
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f64:	2f b1       	in	r18, 0x0f	; 15
     f66:	8f b1       	in	r24, 0x0f	; 15
     f68:	68 2f       	mov	r22, r24
     f6a:	77 27       	eor	r23, r23
     f6c:	67 fd       	sbrc	r22, 7
     f6e:	70 95       	com	r23
     f70:	60 95       	com	r22
     f72:	70 95       	com	r23
     f74:	66 27       	eor	r22, r22
     f76:	77 0f       	add	r23, r23
     f78:	66 1f       	adc	r22, r22
     f7a:	77 27       	eor	r23, r23
     f7c:	66 0f       	add	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	1e 99       	sbic	0x03, 6	; 3
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <matrix_scan+0x92>
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	48 2e       	mov	r4, r24
     f88:	51 2c       	mov	r5, r1
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <matrix_scan+0x96>
     f8c:	44 24       	eor	r4, r4
     f8e:	55 24       	eor	r5, r5
     f90:	1d 99       	sbic	0x03, 5	; 3
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <matrix_scan+0xa2>
     f94:	08 e0       	ldi	r16, 0x08	; 8
     f96:	60 2e       	mov	r6, r16
     f98:	71 2c       	mov	r7, r1
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <matrix_scan+0xa6>
     f9c:	66 24       	eor	r6, r6
     f9e:	77 24       	eor	r7, r7
     fa0:	1c 99       	sbic	0x03, 4	; 3
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <matrix_scan+0xb2>
     fa4:	10 e1       	ldi	r17, 0x10	; 16
     fa6:	81 2e       	mov	r8, r17
     fa8:	91 2c       	mov	r9, r1
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <matrix_scan+0xb6>
     fac:	88 24       	eor	r8, r8
     fae:	99 24       	eor	r9, r9
     fb0:	89 b1       	in	r24, 0x09	; 9
     fb2:	48 2f       	mov	r20, r24
     fb4:	55 27       	eor	r21, r21
     fb6:	47 fd       	sbrc	r20, 7
     fb8:	50 95       	com	r21
     fba:	40 95       	com	r20
     fbc:	50 95       	com	r21
     fbe:	44 27       	eor	r20, r20
     fc0:	55 0f       	add	r21, r21
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 27       	eor	r21, r21
     fc6:	a5 e0       	ldi	r26, 0x05	; 5
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	aa 95       	dec	r26
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <matrix_scan+0xce>
     fd0:	86 b1       	in	r24, 0x06	; 6
     fd2:	99 27       	eor	r25, r25
     fd4:	87 fd       	sbrc	r24, 7
     fd6:	90 95       	com	r25
     fd8:	80 95       	com	r24
     fda:	90 95       	com	r25
     fdc:	88 27       	eor	r24, r24
     fde:	99 0f       	add	r25, r25
     fe0:	88 1f       	adc	r24, r24
     fe2:	99 27       	eor	r25, r25
     fe4:	e6 e0       	ldi	r30, 0x06	; 6
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	ea 95       	dec	r30
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <matrix_scan+0xec>
     fee:	36 99       	sbic	0x06, 6	; 6
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <matrix_scan+0x100>
     ff2:	30 e8       	ldi	r19, 0x80	; 128
     ff4:	e3 2e       	mov	r14, r19
     ff6:	f1 2c       	mov	r15, r1
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <matrix_scan+0x104>
     ffa:	ee 24       	eor	r14, r14
     ffc:	ff 24       	eor	r15, r15
     ffe:	4b 99       	sbic	0x09, 3	; 9
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <matrix_scan+0x10e>
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	11 e0       	ldi	r17, 0x01	; 1
    1006:	02 c0       	rjmp	.+4      	; 0x100c <matrix_scan+0x112>
    1008:	00 e0       	ldi	r16, 0x00	; 0
    100a:	10 e0       	ldi	r17, 0x00	; 0
    100c:	4a 99       	sbic	0x09, 2	; 9
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <matrix_scan+0x11c>
    1010:	c0 e0       	ldi	r28, 0x00	; 0
    1012:	d2 e0       	ldi	r29, 0x02	; 2
    1014:	02 c0       	rjmp	.+4      	; 0x101a <matrix_scan+0x120>
    1016:	c0 e0       	ldi	r28, 0x00	; 0
    1018:	d0 e0       	ldi	r29, 0x00	; 0
    101a:	49 99       	sbic	0x09, 1	; 9
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <matrix_scan+0x12a>
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b4 e0       	ldi	r27, 0x04	; 4
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <matrix_scan+0x12e>
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	48 99       	sbic	0x09, 0	; 9
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <matrix_scan+0x138>
    102c:	e0 e0       	ldi	r30, 0x00	; 0
    102e:	f8 e0       	ldi	r31, 0x08	; 8
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <matrix_scan+0x13c>
    1032:	e0 e0       	ldi	r30, 0x00	; 0
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	68 94       	set
    103a:	15 f8       	bld	r1, 5
    103c:	36 95       	lsr	r19
    103e:	27 95       	ror	r18
    1040:	16 94       	lsr	r1
    1042:	e1 f7       	brne	.-8      	; 0x103c <matrix_scan+0x142>
    1044:	22 24       	eor	r2, r2
    1046:	33 24       	eor	r3, r3
    1048:	23 94       	inc	r2
    104a:	22 25       	eor	r18, r2
    104c:	33 25       	eor	r19, r3
    104e:	21 70       	andi	r18, 0x01	; 1
    1050:	30 70       	andi	r19, 0x00	; 0
    1052:	26 2b       	or	r18, r22
    1054:	37 2b       	or	r19, r23
    1056:	24 29       	or	r18, r4
    1058:	35 29       	or	r19, r5
    105a:	26 29       	or	r18, r6
    105c:	37 29       	or	r19, r7
    105e:	28 29       	or	r18, r8
    1060:	39 29       	or	r19, r9
    1062:	24 2b       	or	r18, r20
    1064:	35 2b       	or	r19, r21
    1066:	28 2b       	or	r18, r24
    1068:	39 2b       	or	r19, r25
    106a:	2e 29       	or	r18, r14
    106c:	3f 29       	or	r19, r15
    106e:	20 2b       	or	r18, r16
    1070:	31 2b       	or	r19, r17
    1072:	2c 2b       	or	r18, r28
    1074:	3d 2b       	or	r19, r29
    1076:	2a 2b       	or	r18, r26
    1078:	3b 2b       	or	r19, r27
    107a:	2e 2b       	or	r18, r30
    107c:	3f 2b       	or	r19, r31
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    107e:	d5 01       	movw	r26, r10
    1080:	8d 91       	ld	r24, X+
    1082:	9c 91       	ld	r25, X
    1084:	11 97       	sbiw	r26, 0x01	; 1
    1086:	82 17       	cp	r24, r18
    1088:	93 07       	cpc	r25, r19
    108a:	a9 f1       	breq	.+106    	; 0x10f6 <matrix_scan+0x1fc>
            matrix_debouncing[i] = cols;
    108c:	2d 93       	st	X+, r18
    108e:	3c 93       	st	X, r19
            if (debouncing) {
    1090:	80 91 00 01 	lds	r24, 0x0100
    1094:	88 23       	and	r24, r24
    1096:	69 f1       	breq	.+90     	; 0x10f2 <matrix_scan+0x1f8>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1098:	80 91 9f 01 	lds	r24, 0x019F
    109c:	80 ff       	sbrs	r24, 0
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <matrix_scan+0x1ae>
    10a0:	8a e0       	ldi	r24, 0x0A	; 10
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    10a8:	80 91 9f 01 	lds	r24, 0x019F
    10ac:	80 ff       	sbrs	r24, 0
    10ae:	19 c0       	rjmp	.+50     	; 0x10e2 <matrix_scan+0x1e8>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <matrix_scan+0x1b8>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <matrix_scan+0x1ba>
    10b4:	ed b7       	in	r30, 0x3d	; 61
    10b6:	fe b7       	in	r31, 0x3e	; 62
    10b8:	31 96       	adiw	r30, 0x01	; 1
    10ba:	25 e0       	ldi	r18, 0x05	; 5
    10bc:	22 2e       	mov	r2, r18
    10be:	22 e0       	ldi	r18, 0x02	; 2
    10c0:	32 2e       	mov	r3, r18
    10c2:	ad b7       	in	r26, 0x3d	; 61
    10c4:	be b7       	in	r27, 0x3e	; 62
    10c6:	12 96       	adiw	r26, 0x02	; 2
    10c8:	3c 92       	st	X, r3
    10ca:	2e 92       	st	-X, r2
    10cc:	11 97       	sbiw	r26, 0x01	; 1
    10ce:	80 91 00 01 	lds	r24, 0x0100
    10d2:	82 83       	std	Z+2, r24	; 0x02
    10d4:	13 82       	std	Z+3, r1	; 0x03
    10d6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	80 91 9f 01 	lds	r24, 0x019F
    10e6:	80 ff       	sbrs	r24, 0
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <matrix_scan+0x1f8>
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            }
            debouncing = DEBOUNCE;
    10f2:	c0 92 00 01 	sts	0x0100, r12
        }
        unselect_rows();
    10f6:	0e 94 4b 07 	call	0xe96	; 0xe96 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    10fa:	d3 94       	inc	r13
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a8 0e       	add	r10, r24
    1102:	b9 1e       	adc	r11, r25
    1104:	94 e0       	ldi	r25, 0x04	; 4
    1106:	d9 16       	cp	r13, r25
    1108:	09 f0       	breq	.+2      	; 0x110c <matrix_scan+0x212>
    110a:	10 cf       	rjmp	.-480    	; 0xf2c <matrix_scan+0x32>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    110c:	80 91 00 01 	lds	r24, 0x0100
    1110:	88 23       	and	r24, r24
    1112:	51 f1       	breq	.+84     	; 0x1168 <matrix_scan+0x26e>
        if (--debouncing) {
    1114:	81 50       	subi	r24, 0x01	; 1
    1116:	80 93 00 01 	sts	0x0100, r24
    111a:	88 23       	and	r24, r24
    111c:	29 f0       	breq	.+10     	; 0x1128 <matrix_scan+0x22e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    111e:	80 ea       	ldi	r24, 0xA0	; 160
    1120:	9f e0       	ldi	r25, 0x0F	; 15
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <matrix_scan+0x228>
    1126:	20 c0       	rjmp	.+64     	; 0x1168 <matrix_scan+0x26e>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1128:	80 91 20 01 	lds	r24, 0x0120
    112c:	90 91 21 01 	lds	r25, 0x0121
    1130:	90 93 19 01 	sts	0x0119, r25
    1134:	80 93 18 01 	sts	0x0118, r24
    1138:	80 91 22 01 	lds	r24, 0x0122
    113c:	90 91 23 01 	lds	r25, 0x0123
    1140:	90 93 1b 01 	sts	0x011B, r25
    1144:	80 93 1a 01 	sts	0x011A, r24
    1148:	80 91 24 01 	lds	r24, 0x0124
    114c:	90 91 25 01 	lds	r25, 0x0125
    1150:	90 93 1d 01 	sts	0x011D, r25
    1154:	80 93 1c 01 	sts	0x011C, r24
    1158:	80 91 26 01 	lds	r24, 0x0126
    115c:	90 91 27 01 	lds	r25, 0x0127
    1160:	90 93 1f 01 	sts	0x011F, r25
    1164:	80 93 1e 01 	sts	0x011E, r24
            }
        }
    }

    return 1;
}
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	3f 90       	pop	r3
    118c:	2f 90       	pop	r2
    118e:	08 95       	ret

00001190 <matrix_print>:
{
    return matrix[row];
}

void matrix_print(void)
{
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    11a0:	8c ee       	ldi	r24, 0xEC	; 236
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    11a8:	08 e1       	ldi	r16, 0x18	; 24
    11aa:	11 e0       	ldi	r17, 0x01	; 1
    11ac:	c0 e0       	ldi	r28, 0x00	; 0
    11ae:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    11b0:	e7 ee       	ldi	r30, 0xE7	; 231
    11b2:	ce 2e       	mov	r12, r30
    11b4:	e1 e0       	ldi	r30, 0x01	; 1
    11b6:	de 2e       	mov	r13, r30
        pbin_reverse16(matrix_get_row(row));
    11b8:	7e ed       	ldi	r23, 0xDE	; 222
    11ba:	e7 2e       	mov	r14, r23
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	f7 2e       	mov	r15, r23

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <matrix_print+0x32>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <matrix_print+0x34>
    11c4:	ed b7       	in	r30, 0x3d	; 61
    11c6:	fe b7       	in	r31, 0x3e	; 62
    11c8:	d2 82       	std	Z+2, r13	; 0x02
    11ca:	c1 82       	std	Z+1, r12	; 0x01
    11cc:	d4 83       	std	Z+4, r29	; 0x04
    11ce:	c3 83       	std	Z+3, r28	; 0x03
    11d0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	84 ee       	ldi	r24, 0xE4	; 228
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
        pbin_reverse16(matrix_get_row(row));
    11e4:	f8 01       	movw	r30, r16
    11e6:	81 91       	ld	r24, Z+
    11e8:	91 91       	ld	r25, Z+
    11ea:	8f 01       	movw	r16, r30
    11ec:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <bitrev16>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <matrix_print+0x62>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <matrix_print+0x64>
    11f4:	ed b7       	in	r30, 0x3d	; 61
    11f6:	fe b7       	in	r31, 0x3e	; 62
    11f8:	f2 82       	std	Z+2, r15	; 0x02
    11fa:	e1 82       	std	Z+1, r14	; 0x01
    11fc:	94 83       	std	Z+4, r25	; 0x04
    11fe:	83 83       	std	Z+3, r24	; 0x03
    1200:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
        print("\n");
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	8c ed       	ldi	r24, 0xDC	; 220
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    1214:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1216:	c4 30       	cpi	r28, 0x04	; 4
    1218:	d1 05       	cpc	r29, r1
    121a:	91 f6       	brne	.-92     	; 0x11c0 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	08 95       	ret

0000122e <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    122e:	81 ff       	sbrs	r24, 1
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    1232:	22 9a       	sbi	0x04, 2	; 4
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    1236:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    1238:	2a 98       	cbi	0x05, 2	; 5
    123a:	08 95       	ret

0000123c <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    123c:	80 91 2c 01 	lds	r24, 0x012C
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	80 93 2c 01 	sts	0x012C, r24
    1246:	62 e3       	ldi	r22, 0x32	; 50
    1248:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <__udivmodqi4>
    124c:	99 23       	and	r25, r25
    124e:	a9 f5       	brne	.+106    	; 0x12ba <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1250:	10 92 2c 01 	sts	0x012C, r1

    if (!console_flush) return;
    1254:	80 91 2a 01 	lds	r24, 0x012A
    1258:	88 23       	and	r24, r24
    125a:	79 f1       	breq	.+94     	; 0x12ba <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    125c:	80 91 b4 01 	lds	r24, 0x01B4
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	49 f5       	brne	.+82     	; 0x12b6 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1264:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1268:	80 91 ec 00 	lds	r24, 0x00EC
    126c:	80 fd       	sbrc	r24, 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <EVENT_USB_Device_StartOfFrame+0x38>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <EVENT_USB_Device_StartOfFrame+0x3a>
    1274:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1276:	9f 70       	andi	r25, 0x0F	; 15
    1278:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1280:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1284:	80 ff       	sbrs	r24, 0
    1286:	14 c0       	rjmp	.+40     	; 0x12b0 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1288:	80 91 ee 00 	lds	r24, 0x00EE
    128c:	87 fd       	sbrc	r24, 7
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <EVENT_USB_Device_StartOfFrame+0x5a>
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1292:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1296:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    129a:	85 fd       	sbrc	r24, 5
    129c:	fa cf       	rjmp	.-12     	; 0x1292 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    129e:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    12a2:	80 ff       	sbrs	r24, 0
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12a6:	80 91 e8 00 	lds	r24, 0x00E8
    12aa:	8e 77       	andi	r24, 0x7E	; 126
    12ac:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12b0:	9f 70       	andi	r25, 0x0F	; 15
    12b2:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    12b6:	10 92 2a 01 	sts	0x012A, r1
    12ba:	08 95       	ret

000012bc <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    12bc:	80 91 29 01 	lds	r24, 0x0129
    12c0:	08 95       	ret

000012c2 <sendchar>:
 * sendchar
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
#define SEND_TIMEOUT 5
int8_t sendchar(uint8_t c)
{
    12c2:	68 2f       	mov	r22, r24
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    12c4:	8f b7       	in	r24, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	10 92 2a 01 	sts	0x012A, r1
    12cc:	8f bf       	out	0x3f, r24	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12ce:	80 91 b4 01 	lds	r24, 0x01B4
    12d2:	84 30       	cpi	r24, 0x04	; 4
    12d4:	11 f0       	breq	.+4      	; 0x12da <sendchar+0x18>
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	08 95       	ret
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    12da:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12de:	80 91 ec 00 	lds	r24, 0x00EC
    12e2:	80 fd       	sbrc	r24, 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <sendchar+0x28>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <sendchar+0x2a>
    12ea:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    12ec:	39 2f       	mov	r19, r25
    12ee:	3f 70       	andi	r19, 0x0F	; 15
    12f0:	38 2b       	or	r19, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    12f8:	80 91 eb 00 	lds	r24, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    12fc:	80 ff       	sbrs	r24, 0
    12fe:	43 c0       	rjmp	.+134    	; 0x1386 <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1300:	80 91 ee 00 	lds	r24, 0x00EE
    1304:	87 ff       	sbrs	r24, 7
    1306:	3f c0       	rjmp	.+126    	; 0x1386 <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1308:	80 91 2b 01 	lds	r24, 0x012B
    130c:	88 23       	and	r24, r24
    130e:	21 f0       	breq	.+8      	; 0x1318 <sendchar+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1310:	80 91 e8 00 	lds	r24, 0x00E8
    1314:	85 ff       	sbrs	r24, 5
    1316:	37 c0       	rjmp	.+110    	; 0x1386 <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1318:	10 92 2b 01 	sts	0x012B, r1
    131c:	25 e0       	ldi	r18, 0x05	; 5
    131e:	40 ea       	ldi	r20, 0xA0	; 160
    1320:	5f e0       	ldi	r21, 0x0F	; 15
    1322:	12 c0       	rjmp	.+36     	; 0x1348 <sendchar+0x86>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1324:	80 91 b4 01 	lds	r24, 0x01B4
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	69 f5       	brne	.+90     	; 0x1386 <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    132c:	80 91 eb 00 	lds	r24, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1330:	85 fd       	sbrc	r24, 5
    1332:	29 c0       	rjmp	.+82     	; 0x1386 <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1334:	22 23       	and	r18, r18
    1336:	21 f4       	brne	.+8      	; 0x1340 <sendchar+0x7e>
            timeouted = true;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 2b 01 	sts	0x012B, r24
    133e:	23 c0       	rjmp	.+70     	; 0x1386 <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	ca 01       	movw	r24, r20
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <sendchar+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1348:	80 91 e8 00 	lds	r24, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    134c:	85 ff       	sbrs	r24, 5
    134e:	ea cf       	rjmp	.-44     	; 0x1324 <sendchar+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1350:	60 93 f1 00 	sts	0x00F1, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1354:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1358:	85 fd       	sbrc	r24, 5
    135a:	0a c0       	rjmp	.+20     	; 0x1370 <sendchar+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    135c:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1360:	80 ff       	sbrs	r24, 0
    1362:	fc cf       	rjmp	.-8      	; 0x135c <sendchar+0x9a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1364:	80 91 e8 00 	lds	r24, 0x00E8
    1368:	8e 77       	andi	r24, 0x7E	; 126
    136a:	80 93 e8 00 	sts	0x00E8, r24
    136e:	06 c0       	rjmp	.+12     	; 0x137c <sendchar+0xba>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1370:	9f b7       	in	r25, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 2a 01 	sts	0x012A, r24
    137a:	9f bf       	out	0x3f, r25	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    137c:	3f 70       	andi	r19, 0x0F	; 15
    137e:	30 93 e9 00 	sts	0x00E9, r19
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 95       	ret
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1386:	3f 70       	andi	r19, 0x0F	; 15
    1388:	30 93 e9 00 	sts	0x00E9, r19
    138c:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    138e:	08 95       	ret

00001390 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <send_consumer+0x6>
    1396:	0f 92       	push	r0
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    139e:	80 91 b4 01 	lds	r24, 0x01B4
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	29 f5       	brne	.+74     	; 0x13f0 <send_consumer+0x60>
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	80 93 e9 00 	sts	0x00E9, r24
    13ac:	2f ef       	ldi	r18, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13ae:	95 ed       	ldi	r25, 0xD5	; 213
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <send_consumer+0x2c>
    13b2:	89 2f       	mov	r24, r25
    13b4:	8a 95       	dec	r24
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <send_consumer+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    13b8:	22 23       	and	r18, r18
    13ba:	29 f0       	breq	.+10     	; 0x13c6 <send_consumer+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13bc:	80 91 e8 00 	lds	r24, 0x00E8
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	85 ff       	sbrs	r24, 5
    13c4:	f6 cf       	rjmp	.-20     	; 0x13b2 <send_consumer+0x22>
    13c6:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    13ca:	85 ff       	sbrs	r24, 5
    13cc:	11 c0       	rjmp	.+34     	; 0x13f0 <send_consumer+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
    13ce:	5b 83       	std	Y+3, r21	; 0x03
    13d0:	4a 83       	std	Y+2, r20	; 0x02
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    13d6:	ce 01       	movw	r24, r28
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	63 e0       	ldi	r22, 0x03	; 3
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e6:	80 91 e8 00 	lds	r24, 0x00E8
    13ea:	8e 77       	andi	r24, 0x7E	; 126
    13ec:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <send_system+0x6>
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    140a:	80 91 b4 01 	lds	r24, 0x01B4
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	29 f5       	brne	.+74     	; 0x145c <send_system+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	80 93 e9 00 	sts	0x00E9, r24
    1418:	2f ef       	ldi	r18, 0xFF	; 255
    141a:	95 ed       	ldi	r25, 0xD5	; 213
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <send_system+0x2c>
    141e:	89 2f       	mov	r24, r25
    1420:	8a 95       	dec	r24
    1422:	f1 f7       	brne	.-4      	; 0x1420 <send_system+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1424:	22 23       	and	r18, r18
    1426:	29 f0       	breq	.+10     	; 0x1432 <send_system+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1428:	80 91 e8 00 	lds	r24, 0x00E8
    142c:	21 50       	subi	r18, 0x01	; 1
    142e:	85 ff       	sbrs	r24, 5
    1430:	f6 cf       	rjmp	.-20     	; 0x141e <send_system+0x22>
    1432:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1436:	85 ff       	sbrs	r24, 5
    1438:	11 c0       	rjmp	.+34     	; 0x145c <send_system+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    143a:	5b 83       	std	Y+3, r21	; 0x03
    143c:	4a 83       	std	Y+2, r20	; 0x02
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1442:	ce 01       	movw	r24, r28
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	63 e0       	ldi	r22, 0x03	; 3
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1452:	80 91 e8 00 	lds	r24, 0x00E8
    1456:	8e 77       	andi	r24, 0x7E	; 126
    1458:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
    1468:	ac 01       	movw	r20, r24
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    146a:	80 91 b4 01 	lds	r24, 0x01B4
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	01 f5       	brne	.+64     	; 0x14b2 <send_mouse+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	80 93 e9 00 	sts	0x00E9, r24
    1478:	2f ef       	ldi	r18, 0xFF	; 255
    147a:	95 ed       	ldi	r25, 0xD5	; 213
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <send_mouse+0x20>
    147e:	89 2f       	mov	r24, r25
    1480:	8a 95       	dec	r24
    1482:	f1 f7       	brne	.-4      	; 0x1480 <send_mouse+0x18>

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1484:	22 23       	and	r18, r18
    1486:	29 f0       	breq	.+10     	; 0x1492 <send_mouse+0x2a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1488:	80 91 e8 00 	lds	r24, 0x00E8
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	85 ff       	sbrs	r24, 5
    1490:	f6 cf       	rjmp	.-20     	; 0x147e <send_mouse+0x16>
    1492:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1496:	85 ff       	sbrs	r24, 5
    1498:	0c c0       	rjmp	.+24     	; 0x14b2 <send_mouse+0x4a>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    149a:	ca 01       	movw	r24, r20
    149c:	65 e0       	ldi	r22, 0x05	; 5
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14a8:	80 91 e8 00 	lds	r24, 0x00E8
    14ac:	8e 77       	andi	r24, 0x7E	; 126
    14ae:	80 93 e8 00 	sts	0x00E8, r24
    14b2:	08 95       	ret

000014b4 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	18 2f       	mov	r17, r24
    14ba:	09 2f       	mov	r16, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14bc:	80 91 b4 01 	lds	r24, 0x01B4
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <send_keyboard+0x12>
    14c4:	4d c0       	rjmp	.+154    	; 0x1560 <send_keyboard+0xac>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    14c6:	80 91 01 01 	lds	r24, 0x0101
    14ca:	88 23       	and	r24, r24
    14cc:	e9 f0       	breq	.+58     	; 0x1508 <send_keyboard+0x54>
    14ce:	80 91 0c 01 	lds	r24, 0x010C
    14d2:	88 23       	and	r24, r24
    14d4:	c9 f0       	breq	.+50     	; 0x1508 <send_keyboard+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14d6:	85 e0       	ldi	r24, 0x05	; 5
    14d8:	80 93 e9 00 	sts	0x00E9, r24
    14dc:	9f ef       	ldi	r25, 0xFF	; 255
    14de:	25 e1       	ldi	r18, 0x15	; 21
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <send_keyboard+0x38>
    14e2:	82 2f       	mov	r24, r18
    14e4:	8a 95       	dec	r24
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <send_keyboard+0x30>
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    14e8:	99 23       	and	r25, r25
    14ea:	29 f0       	breq	.+10     	; 0x14f6 <send_keyboard+0x42>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14ec:	80 91 e8 00 	lds	r24, 0x00E8
    14f0:	91 50       	subi	r25, 0x01	; 1
    14f2:	85 ff       	sbrs	r24, 5
    14f4:	f6 cf       	rjmp	.-20     	; 0x14e2 <send_keyboard+0x2e>
    14f6:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    14fa:	85 ff       	sbrs	r24, 5
    14fc:	31 c0       	rjmp	.+98     	; 0x1560 <send_keyboard+0xac>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    14fe:	81 2f       	mov	r24, r17
    1500:	90 2f       	mov	r25, r16
    1502:	60 e1       	ldi	r22, 0x10	; 16
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	18 c0       	rjmp	.+48     	; 0x1538 <send_keyboard+0x84>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 93 e9 00 	sts	0x00E9, r24
    150e:	9f ef       	ldi	r25, 0xFF	; 255
    1510:	25 ed       	ldi	r18, 0xD5	; 213
    1512:	05 c0       	rjmp	.+10     	; 0x151e <send_keyboard+0x6a>
    1514:	82 2f       	mov	r24, r18
    1516:	8a 95       	dec	r24
    1518:	f1 f7       	brne	.-4      	; 0x1516 <send_keyboard+0x62>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    151a:	99 23       	and	r25, r25
    151c:	29 f0       	breq	.+10     	; 0x1528 <send_keyboard+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    151e:	80 91 e8 00 	lds	r24, 0x00E8
    1522:	91 50       	subi	r25, 0x01	; 1
    1524:	85 ff       	sbrs	r24, 5
    1526:	f6 cf       	rjmp	.-20     	; 0x1514 <send_keyboard+0x60>
    1528:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    152c:	85 ff       	sbrs	r24, 5
    152e:	18 c0       	rjmp	.+48     	; 0x1560 <send_keyboard+0xac>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1530:	81 2f       	mov	r24, r17
    1532:	90 2f       	mov	r25, r16
    1534:	68 e0       	ldi	r22, 0x08	; 8
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1540:	80 91 e8 00 	lds	r24, 0x00E8
    1544:	8e 77       	andi	r24, 0x7E	; 126
    1546:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    154a:	ad e2       	ldi	r26, 0x2D	; 45
    154c:	b1 e0       	ldi	r27, 0x01	; 1
    154e:	21 2f       	mov	r18, r17
    1550:	30 2f       	mov	r19, r16
    1552:	c9 01       	movw	r24, r18
    1554:	fc 01       	movw	r30, r24
    1556:	80 e1       	ldi	r24, 0x10	; 16
    1558:	01 90       	ld	r0, Z+
    155a:	0d 92       	st	X+, r0
    155c:	81 50       	subi	r24, 0x01	; 1
    155e:	e1 f7       	brne	.-8      	; 0x1558 <send_keyboard+0xa4>
}
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1566:	8e e3       	ldi	r24, 0x3E	; 62
    1568:	92 e0       	ldi	r25, 0x02	; 2
    156a:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
#endif
}
    156e:	08 95       	ret

00001570 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1570:	82 e4       	ldi	r24, 0x42	; 66
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
}
    1578:	08 95       	ret

0000157a <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    157a:	86 e4       	ldi	r24, 0x46	; 70
    157c:	92 e0       	ldi	r25, 0x02	; 2
    157e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1582:	10 92 b3 01 	sts	0x01B3, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    1586:	08 95       	ret

00001588 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1588:	8a e4       	ldi	r24, 0x4A	; 74
    158a:	92 e0       	ldi	r25, 0x02	; 2
    158c:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1590:	80 91 b3 01 	lds	r24, 0x01B3
    1594:	88 23       	and	r24, r24
    1596:	49 f4       	brne	.+18     	; 0x15aa <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1598:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <USB_Disable>
        USB_Init();
    159c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    15a0:	80 91 e2 00 	lds	r24, 0x00E2
    15a4:	84 60       	ori	r24, 0x04	; 4
    15a6:	80 93 e2 00 	sts	0x00E2, r24
    15aa:	08 95       	ret

000015ac <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    15ac:	84 b7       	in	r24, 0x34	; 52
    15ae:	87 7f       	andi	r24, 0xF7	; 247
    15b0:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    15b2:	88 e1       	ldi	r24, 0x18	; 24
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	80 93 60 00 	sts	0x0060, r24
    15bc:	10 92 60 00 	sts	0x0060, r1
    15c0:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	20 e8       	ldi	r18, 0x80	; 128
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	20 93 61 00 	sts	0x0061, r18
    15d0:	80 93 61 00 	sts	0x0061, r24
    15d4:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    15d6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    15da:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <USB_Disable>

    USB_Init();
    15de:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <USB_Init>
    15e2:	80 91 e2 00 	lds	r24, 0x00E2
    15e6:	84 60       	ori	r24, 0x04	; 4
    15e8:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    15ec:	81 e6       	ldi	r24, 0x61	; 97
    15ee:	99 e0       	ldi	r25, 0x09	; 9
    15f0:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    15f4:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    15f6:	80 91 b4 01 	lds	r24, 0x01B4
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <main+0x4a>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    15fe:	89 e2       	ldi	r24, 0x29	; 41
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>

    /* init modules */
    keyboard_init();
    1606:	0e 94 cc 12 	call	0x2598	; 0x2598 <keyboard_init>
    host_set_driver(&lufa_driver);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	0e 94 4a 11 	call	0x2294	; 0x2294 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1612:	88 e1       	ldi	r24, 0x18	; 24
    1614:	92 e0       	ldi	r25, 0x02	; 2
    1616:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    161a:	10 c0       	rjmp	.+32     	; 0x163c <main+0x90>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    161c:	84 e1       	ldi	r24, 0x14	; 20
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            suspend_power_down();
    1624:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1628:	80 91 b2 01 	lds	r24, 0x01B2
    162c:	88 23       	and	r24, r24
    162e:	31 f0       	breq	.+12     	; 0x163c <main+0x90>
    1630:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <suspend_wakeup_condition>
    1634:	88 23       	and	r24, r24
    1636:	11 f0       	breq	.+4      	; 0x163c <main+0x90>
                    USB_Device_SendRemoteWakeup();
    1638:	0e 94 83 0c 	call	0x1906	; 0x1906 <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    163c:	80 91 b4 01 	lds	r24, 0x01B4
    1640:	85 30       	cpi	r24, 0x05	; 5
    1642:	61 f3       	breq	.-40     	; 0x161c <main+0x70>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
    1644:	0e 94 1d 12 	call	0x243a	; 0x243a <keyboard_task>
    1648:	f9 cf       	rjmp	.-14     	; 0x163c <main+0x90>

0000164a <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    164a:	80 91 b6 01 	lds	r24, 0x01B6
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	09 f4       	brne	.+2      	; 0x1654 <EVENT_USB_Device_ControlRequest+0xa>
    1652:	57 c0       	rjmp	.+174    	; 0x1702 <EVENT_USB_Device_ControlRequest+0xb8>
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	30 f4       	brcc	.+12     	; 0x1664 <EVENT_USB_Device_ControlRequest+0x1a>
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	71 f0       	breq	.+28     	; 0x1678 <EVENT_USB_Device_ControlRequest+0x2e>
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	09 f0       	breq	.+2      	; 0x1662 <EVENT_USB_Device_ControlRequest+0x18>
    1660:	b1 c0       	rjmp	.+354    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
    1662:	98 c0       	rjmp	.+304    	; 0x1794 <EVENT_USB_Device_ControlRequest+0x14a>
    1664:	8a 30       	cpi	r24, 0x0A	; 10
    1666:	09 f4       	brne	.+2      	; 0x166a <EVENT_USB_Device_ControlRequest+0x20>
    1668:	85 c0       	rjmp	.+266    	; 0x1774 <EVENT_USB_Device_ControlRequest+0x12a>
    166a:	8b 30       	cpi	r24, 0x0B	; 11
    166c:	09 f4       	brne	.+2      	; 0x1670 <EVENT_USB_Device_ControlRequest+0x26>
    166e:	6a c0       	rjmp	.+212    	; 0x1744 <EVENT_USB_Device_ControlRequest+0xfa>
    1670:	89 30       	cpi	r24, 0x09	; 9
    1672:	09 f0       	breq	.+2      	; 0x1676 <EVENT_USB_Device_ControlRequest+0x2c>
    1674:	a7 c0       	rjmp	.+334    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
    1676:	20 c0       	rjmp	.+64     	; 0x16b8 <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1678:	80 91 b5 01 	lds	r24, 0x01B5
    167c:	81 3a       	cpi	r24, 0xA1	; 161
    167e:	09 f0       	breq	.+2      	; 0x1682 <EVENT_USB_Device_ControlRequest+0x38>
    1680:	a1 c0       	rjmp	.+322    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1682:	80 91 e8 00 	lds	r24, 0x00E8
    1686:	87 7f       	andi	r24, 0xF7	; 247
    1688:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    168c:	80 91 b9 01 	lds	r24, 0x01B9
    1690:	90 91 ba 01 	lds	r25, 0x01BA
    1694:	89 2b       	or	r24, r25
    1696:	21 f4       	brne	.+8      	; 0x16a0 <EVENT_USB_Device_ControlRequest+0x56>
    1698:	8d e2       	ldi	r24, 0x2D	; 45
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	60 e1       	ldi	r22, 0x10	; 16
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <EVENT_USB_Device_ControlRequest+0x5c>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	60 e0       	ldi	r22, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	0e 94 99 0c 	call	0x1932	; 0x1932 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16ac:	80 91 e8 00 	lds	r24, 0x00E8
    16b0:	8b 77       	andi	r24, 0x7B	; 123
    16b2:	80 93 e8 00 	sts	0x00E8, r24
    16b6:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16b8:	80 91 b5 01 	lds	r24, 0x01B5
    16bc:	81 32       	cpi	r24, 0x21	; 33
    16be:	09 f0       	breq	.+2      	; 0x16c2 <EVENT_USB_Device_ControlRequest+0x78>
    16c0:	81 c0       	rjmp	.+258    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    16c2:	80 91 b9 01 	lds	r24, 0x01B9
    16c6:	90 91 ba 01 	lds	r25, 0x01BA
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	19 f0       	breq	.+6      	; 0x16d4 <EVENT_USB_Device_ControlRequest+0x8a>
    16ce:	04 97       	sbiw	r24, 0x04	; 4
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <EVENT_USB_Device_ControlRequest+0x8a>
    16d2:	78 c0       	rjmp	.+240    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16d4:	80 91 e8 00 	lds	r24, 0x00E8
    16d8:	87 7f       	andi	r24, 0xF7	; 247
    16da:	80 93 e8 00 	sts	0x00E8, r24
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <EVENT_USB_Device_ControlRequest+0xa0>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    16e0:	80 91 b4 01 	lds	r24, 0x01B4
    16e4:	88 23       	and	r24, r24
    16e6:	09 f4       	brne	.+2      	; 0x16ea <EVENT_USB_Device_ControlRequest+0xa0>
    16e8:	6d c0       	rjmp	.+218    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16ea:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    16ee:	82 ff       	sbrs	r24, 2
    16f0:	f7 cf       	rjmp	.-18     	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x96>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16f2:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    16f6:	80 93 29 01 	sts	0x0129, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16fa:	80 91 e8 00 	lds	r24, 0x00E8
    16fe:	8b 77       	andi	r24, 0x7B	; 123
    1700:	1c c0       	rjmp	.+56     	; 0x173a <EVENT_USB_Device_ControlRequest+0xf0>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1702:	80 91 b5 01 	lds	r24, 0x01B5
    1706:	81 3a       	cpi	r24, 0xA1	; 161
    1708:	09 f0       	breq	.+2      	; 0x170c <EVENT_USB_Device_ControlRequest+0xc2>
    170a:	5c c0       	rjmp	.+184    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    170c:	80 91 b9 01 	lds	r24, 0x01B9
    1710:	90 91 ba 01 	lds	r25, 0x01BA
    1714:	89 2b       	or	r24, r25
    1716:	09 f0       	breq	.+2      	; 0x171a <EVENT_USB_Device_ControlRequest+0xd0>
    1718:	55 c0       	rjmp	.+170    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    171a:	80 91 e8 00 	lds	r24, 0x00E8
    171e:	87 7f       	andi	r24, 0xF7	; 247
    1720:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1724:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1728:	80 ff       	sbrs	r24, 0
    172a:	fc cf       	rjmp	.-8      	; 0x1724 <EVENT_USB_Device_ControlRequest+0xda>
                    Endpoint_Write_8(keyboard_protocol);
    172c:	80 91 01 01 	lds	r24, 0x0101
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1730:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1734:	80 91 e8 00 	lds	r24, 0x00E8
    1738:	8e 77       	andi	r24, 0x7E	; 126
    173a:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    173e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Endpoint_ClearStatusStage>
    1742:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1744:	80 91 b5 01 	lds	r24, 0x01B5
    1748:	81 32       	cpi	r24, 0x21	; 33
    174a:	e1 f5       	brne	.+120    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    174c:	80 91 b9 01 	lds	r24, 0x01B9
    1750:	90 91 ba 01 	lds	r25, 0x01BA
    1754:	89 2b       	or	r24, r25
    1756:	b1 f5       	brne	.+108    	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1758:	80 91 e8 00 	lds	r24, 0x00E8
    175c:	87 7f       	andi	r24, 0xF7	; 247
    175e:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1762:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1766:	80 91 b7 01 	lds	r24, 0x01B7
    176a:	80 93 01 01 	sts	0x0101, r24
                    clear_keyboard();
    176e:	0e 94 32 13 	call	0x2664	; 0x2664 <clear_keyboard>
    1772:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1774:	80 91 b5 01 	lds	r24, 0x01B5
    1778:	81 32       	cpi	r24, 0x21	; 33
    177a:	21 f5       	brne	.+72     	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
    177c:	80 91 e8 00 	lds	r24, 0x00E8
    1780:	87 7f       	andi	r24, 0xF7	; 247
    1782:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1786:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    178a:	80 91 b8 01 	lds	r24, 0x01B8
    178e:	80 93 28 01 	sts	0x0128, r24
    1792:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1794:	80 91 b5 01 	lds	r24, 0x01B5
    1798:	81 3a       	cpi	r24, 0xA1	; 161
    179a:	a1 f4       	brne	.+40     	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x17a>
    179c:	80 91 e8 00 	lds	r24, 0x00E8
    17a0:	87 7f       	andi	r24, 0xF7	; 247
    17a2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17a6:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    17aa:	80 ff       	sbrs	r24, 0
    17ac:	fc cf       	rjmp	.-8      	; 0x17a6 <EVENT_USB_Device_ControlRequest+0x15c>
                Endpoint_Write_8(keyboard_idle);
    17ae:	80 91 28 01 	lds	r24, 0x0128
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17b2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17b6:	80 91 e8 00 	lds	r24, 0x00E8
    17ba:	8e 77       	andi	r24, 0x7E	; 126
    17bc:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    17c0:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Endpoint_ClearStatusStage>
    17c4:	08 95       	ret

000017c6 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	61 ec       	ldi	r22, 0xC1	; 193
    17ca:	42 e0       	ldi	r20, 0x02	; 2
    17cc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	61 ec       	ldi	r22, 0xC1	; 193
    17d4:	42 e0       	ldi	r20, 0x02	; 2
    17d6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Endpoint_ConfigureEndpoint_Prv>
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	61 ec       	ldi	r22, 0xC1	; 193
    17de:	42 e0       	ldi	r20, 0x02	; 2
    17e0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Endpoint_ConfigureEndpoint_Prv>
    17e4:	84 e0       	ldi	r24, 0x04	; 4
    17e6:	61 ec       	ldi	r22, 0xC1	; 193
    17e8:	42 e2       	ldi	r20, 0x22	; 34
    17ea:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Endpoint_ConfigureEndpoint_Prv>
    17ee:	85 e0       	ldi	r24, 0x05	; 5
    17f0:	61 ec       	ldi	r22, 0xC1	; 193
    17f2:	42 e1       	ldi	r20, 0x12	; 18
    17f4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Endpoint_ConfigureEndpoint_Prv>
    17f8:	08 95       	ret

000017fa <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    17fa:	8a e3       	ldi	r24, 0x3A	; 58
    17fc:	92 e0       	ldi	r25, 0x02	; 2
    17fe:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    suspend_wakeup_init();
    1802:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
#endif
}
    1806:	08 95       	ret

00001808 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    1808:	da 01       	movw	r26, r20
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    180a:	93 30       	cpi	r25, 0x03	; 3
    180c:	c1 f0       	breq	.+48     	; 0x183e <CALLBACK_USB_GetDescriptor+0x36>
    180e:	94 30       	cpi	r25, 0x04	; 4
    1810:	30 f4       	brcc	.+12     	; 0x181e <CALLBACK_USB_GetDescriptor+0x16>
    1812:	91 30       	cpi	r25, 0x01	; 1
    1814:	51 f0       	breq	.+20     	; 0x182a <CALLBACK_USB_GetDescriptor+0x22>
    1816:	92 30       	cpi	r25, 0x02	; 2
    1818:	09 f0       	breq	.+2      	; 0x181c <CALLBACK_USB_GetDescriptor+0x14>
    181a:	6d c0       	rjmp	.+218    	; 0x18f6 <CALLBACK_USB_GetDescriptor+0xee>
    181c:	0b c0       	rjmp	.+22     	; 0x1834 <CALLBACK_USB_GetDescriptor+0x2c>
    181e:	91 32       	cpi	r25, 0x21	; 33
    1820:	21 f1       	breq	.+72     	; 0x186a <CALLBACK_USB_GetDescriptor+0x62>
    1822:	92 32       	cpi	r25, 0x22	; 34
    1824:	09 f0       	breq	.+2      	; 0x1828 <CALLBACK_USB_GetDescriptor+0x20>
    1826:	67 c0       	rjmp	.+206    	; 0x18f6 <CALLBACK_USB_GetDescriptor+0xee>
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <CALLBACK_USB_GetDescriptor+0xa0>
    182a:	e9 e6       	ldi	r30, 0x69	; 105
    182c:	f3 e0       	ldi	r31, 0x03	; 3
    182e:	22 e1       	ldi	r18, 0x12	; 18
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	65 c0       	rjmp	.+202    	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
    1834:	eb e7       	ldi	r30, 0x7B	; 123
    1836:	f3 e0       	ldi	r31, 0x03	; 3
    1838:	2d e8       	ldi	r18, 0x8D	; 141
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	60 c0       	rjmp	.+192    	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	51 f0       	breq	.+20     	; 0x1856 <CALLBACK_USB_GetDescriptor+0x4e>
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	20 f0       	brcs	.+8      	; 0x184e <CALLBACK_USB_GetDescriptor+0x46>
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	09 f0       	breq	.+2      	; 0x184c <CALLBACK_USB_GetDescriptor+0x44>
    184a:	55 c0       	rjmp	.+170    	; 0x18f6 <CALLBACK_USB_GetDescriptor+0xee>
    184c:	08 c0       	rjmp	.+16     	; 0x185e <CALLBACK_USB_GetDescriptor+0x56>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    184e:	e8 e0       	ldi	r30, 0x08	; 8
    1850:	f4 e0       	ldi	r31, 0x04	; 4
    1852:	84 91       	lpm	r24, Z+
    1854:	07 c0       	rjmp	.+14     	; 0x1864 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1856:	ec e0       	ldi	r30, 0x0C	; 12
    1858:	f4 e0       	ldi	r31, 0x04	; 4
    185a:	84 91       	lpm	r24, Z+
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    185e:	e0 e3       	ldi	r30, 0x30	; 48
    1860:	f4 e0       	ldi	r31, 0x04	; 4
    1862:	84 91       	lpm	r24, Z+
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a c0       	rjmp	.+148    	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
                    break;
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
    186a:	62 30       	cpi	r22, 0x02	; 2
    186c:	a1 f0       	breq	.+40     	; 0x1896 <CALLBACK_USB_GetDescriptor+0x8e>
    186e:	63 30       	cpi	r22, 0x03	; 3
    1870:	28 f4       	brcc	.+10     	; 0x187c <CALLBACK_USB_GetDescriptor+0x74>
    1872:	66 23       	and	r22, r22
    1874:	41 f0       	breq	.+16     	; 0x1886 <CALLBACK_USB_GetDescriptor+0x7e>
    1876:	61 30       	cpi	r22, 0x01	; 1
    1878:	f1 f5       	brne	.+124    	; 0x18f6 <CALLBACK_USB_GetDescriptor+0xee>
    187a:	08 c0       	rjmp	.+16     	; 0x188c <CALLBACK_USB_GetDescriptor+0x84>
    187c:	63 30       	cpi	r22, 0x03	; 3
    187e:	71 f0       	breq	.+28     	; 0x189c <CALLBACK_USB_GetDescriptor+0x94>
    1880:	64 30       	cpi	r22, 0x04	; 4
    1882:	c9 f5       	brne	.+114    	; 0x18f6 <CALLBACK_USB_GetDescriptor+0xee>
    1884:	0e c0       	rjmp	.+28     	; 0x18a2 <CALLBACK_USB_GetDescriptor+0x9a>
    1886:	ed e8       	ldi	r30, 0x8D	; 141
    1888:	f3 e0       	ldi	r31, 0x03	; 3
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <CALLBACK_USB_GetDescriptor+0x88>
    188c:	e6 ea       	ldi	r30, 0xA6	; 166
    188e:	f3 e0       	ldi	r31, 0x03	; 3
    1890:	29 e0       	ldi	r18, 0x09	; 9
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	34 c0       	rjmp	.+104    	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &ConfigurationDescriptor.Mouse_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    1896:	ef eb       	ldi	r30, 0xBF	; 191
    1898:	f3 e0       	ldi	r31, 0x03	; 3
    189a:	fa cf       	rjmp	.-12     	; 0x1890 <CALLBACK_USB_GetDescriptor+0x88>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ConfigurationDescriptor.Extrakey_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    189c:	e8 ed       	ldi	r30, 0xD8	; 216
    189e:	f3 e0       	ldi	r31, 0x03	; 3
    18a0:	f7 cf       	rjmp	.-18     	; 0x1890 <CALLBACK_USB_GetDescriptor+0x88>
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConfigurationDescriptor.Console_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    18a2:	e8 ef       	ldi	r30, 0xF8	; 248
    18a4:	f3 e0       	ldi	r31, 0x03	; 3
    18a6:	f4 cf       	rjmp	.-24     	; 0x1890 <CALLBACK_USB_GetDescriptor+0x88>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    18a8:	62 30       	cpi	r22, 0x02	; 2
    18aa:	b1 f0       	breq	.+44     	; 0x18d8 <CALLBACK_USB_GetDescriptor+0xd0>
    18ac:	63 30       	cpi	r22, 0x03	; 3
    18ae:	28 f4       	brcc	.+10     	; 0x18ba <CALLBACK_USB_GetDescriptor+0xb2>
    18b0:	66 23       	and	r22, r22
    18b2:	41 f0       	breq	.+16     	; 0x18c4 <CALLBACK_USB_GetDescriptor+0xbc>
    18b4:	61 30       	cpi	r22, 0x01	; 1
    18b6:	f9 f4       	brne	.+62     	; 0x18f6 <CALLBACK_USB_GetDescriptor+0xee>
    18b8:	0a c0       	rjmp	.+20     	; 0x18ce <CALLBACK_USB_GetDescriptor+0xc6>
    18ba:	63 30       	cpi	r22, 0x03	; 3
    18bc:	91 f0       	breq	.+36     	; 0x18e2 <CALLBACK_USB_GetDescriptor+0xda>
    18be:	64 30       	cpi	r22, 0x04	; 4
    18c0:	d1 f4       	brne	.+52     	; 0x18f6 <CALLBACK_USB_GetDescriptor+0xee>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <CALLBACK_USB_GetDescriptor+0xe4>
    18c4:	ee e4       	ldi	r30, 0x4E	; 78
    18c6:	f2 e0       	ldi	r31, 0x02	; 2
    18c8:	2f e3       	ldi	r18, 0x3F	; 63
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	18 c0       	rjmp	.+48     	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
    18ce:	ed e8       	ldi	r30, 0x8D	; 141
    18d0:	f2 e0       	ldi	r31, 0x02	; 2
    18d2:	2d e4       	ldi	r18, 0x4D	; 77
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &MouseReport;
                Size    = sizeof(MouseReport);
                break;
    18d8:	ea ed       	ldi	r30, 0xDA	; 218
    18da:	f2 e0       	ldi	r31, 0x02	; 2
    18dc:	26 e3       	ldi	r18, 0x36	; 54
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ExtrakeyReport;
                Size    = sizeof(ExtrakeyReport);
                break;
    18e2:	e0 e1       	ldi	r30, 0x10	; 16
    18e4:	f3 e0       	ldi	r31, 0x03	; 3
    18e6:	20 e2       	ldi	r18, 0x20	; 32
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConsoleReport;
                Size    = sizeof(ConsoleReport);
                break;
    18ec:	e0 e3       	ldi	r30, 0x30	; 48
    18ee:	f3 e0       	ldi	r31, 0x03	; 3
    18f0:	29 e3       	ldi	r18, 0x39	; 57
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <CALLBACK_USB_GetDescriptor+0xf6>
    18f6:	e0 e0       	ldi	r30, 0x00	; 0
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    18fe:	ed 93       	st	X+, r30
    1900:	fc 93       	st	X, r31
    return Size;
}
    1902:	c9 01       	movw	r24, r18
    1904:	08 95       	ret

00001906 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1906:	80 e1       	ldi	r24, 0x10	; 16
    1908:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    190a:	82 e1       	ldi	r24, 0x12	; 18
    190c:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    190e:	09 b4       	in	r0, 0x29	; 41
    1910:	00 fe       	sbrs	r0, 0
    1912:	fd cf       	rjmp	.-6      	; 0x190e <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1914:	80 91 d8 00 	lds	r24, 0x00D8
    1918:	8f 7d       	andi	r24, 0xDF	; 223
    191a:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    191e:	80 91 e0 00 	lds	r24, 0x00E0
    1922:	82 60       	ori	r24, 0x02	; 2
    1924:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1928:	80 91 e0 00 	lds	r24, 0x00E0
    192c:	81 fd       	sbrc	r24, 1
    192e:	fc cf       	rjmp	.-8      	; 0x1928 <USB_Device_SendRemoteWakeup+0x22>
}
    1930:	08 95       	ret

00001932 <Endpoint_Write_Control_Stream_LE>:
    1932:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1934:	40 91 bb 01 	lds	r20, 0x01BB
    1938:	50 91 bc 01 	lds	r21, 0x01BC
    193c:	46 17       	cp	r20, r22
    193e:	57 07       	cpc	r21, r23
    1940:	18 f4       	brcc	.+6      	; 0x1948 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1942:	f9 01       	movw	r30, r18
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	43 c0       	rjmp	.+134    	; 0x19ce <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1948:	61 15       	cp	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	11 f0       	breq	.+4      	; 0x1952 <Endpoint_Write_Control_Stream_LE+0x20>
    194e:	ab 01       	movw	r20, r22
    1950:	f8 cf       	rjmp	.-16     	; 0x1942 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1952:	80 91 e8 00 	lds	r24, 0x00E8
    1956:	8e 77       	andi	r24, 0x7E	; 126
    1958:	80 93 e8 00 	sts	0x00E8, r24
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	f0 cf       	rjmp	.-32     	; 0x1942 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1962:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1966:	88 23       	and	r24, r24
    1968:	09 f4       	brne	.+2      	; 0x196c <Endpoint_Write_Control_Stream_LE+0x3a>
    196a:	47 c0       	rjmp	.+142    	; 0x19fa <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    196c:	85 30       	cpi	r24, 0x05	; 5
    196e:	09 f4       	brne	.+2      	; 0x1972 <Endpoint_Write_Control_Stream_LE+0x40>
    1970:	46 c0       	rjmp	.+140    	; 0x19fe <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1972:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1976:	83 fd       	sbrc	r24, 3
    1978:	44 c0       	rjmp	.+136    	; 0x1a02 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    197a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    197e:	82 fd       	sbrc	r24, 2
    1980:	36 c0       	rjmp	.+108    	; 0x19ee <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1982:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1986:	80 ff       	sbrs	r24, 0
    1988:	22 c0       	rjmp	.+68     	; 0x19ce <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    198a:	80 91 f3 00 	lds	r24, 0x00F3
    198e:	90 91 f2 00 	lds	r25, 0x00F2
    1992:	78 2f       	mov	r23, r24
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	29 2f       	mov	r18, r25
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	26 2b       	or	r18, r22
    199c:	37 2b       	or	r19, r23
    199e:	07 c0       	rjmp	.+14     	; 0x19ae <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19a0:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19a2:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    19a6:	41 50       	subi	r20, 0x01	; 1
    19a8:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    19aa:	2f 5f       	subi	r18, 0xFF	; 255
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19ae:	41 15       	cp	r20, r1
    19b0:	51 05       	cpc	r21, r1
    19b2:	19 f0       	breq	.+6      	; 0x19ba <Endpoint_Write_Control_Stream_LE+0x88>
    19b4:	28 30       	cpi	r18, 0x08	; 8
    19b6:	31 05       	cpc	r19, r1
    19b8:	98 f3       	brcs	.-26     	; 0x19a0 <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	28 30       	cpi	r18, 0x08	; 8
    19be:	31 05       	cpc	r19, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <Endpoint_Write_Control_Stream_LE+0x92>
    19c2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19c4:	80 91 e8 00 	lds	r24, 0x00E8
    19c8:	8e 77       	andi	r24, 0x7E	; 126
    19ca:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19ce:	41 15       	cp	r20, r1
    19d0:	51 05       	cpc	r21, r1
    19d2:	39 f6       	brne	.-114    	; 0x1962 <Endpoint_Write_Control_Stream_LE+0x30>
    19d4:	99 23       	and	r25, r25
    19d6:	29 f6       	brne	.-118    	; 0x1962 <Endpoint_Write_Control_Stream_LE+0x30>
    19d8:	0a c0       	rjmp	.+20     	; 0x19ee <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19da:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19de:	88 23       	and	r24, r24
    19e0:	61 f0       	breq	.+24     	; 0x19fa <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19e2:	85 30       	cpi	r24, 0x05	; 5
    19e4:	61 f0       	breq	.+24     	; 0x19fe <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19e6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19ea:	83 fd       	sbrc	r24, 3
    19ec:	0a c0       	rjmp	.+20     	; 0x1a02 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ee:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19f2:	82 ff       	sbrs	r24, 2
    19f4:	f2 cf       	rjmp	.-28     	; 0x19da <Endpoint_Write_Control_Stream_LE+0xa8>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	08 95       	ret
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	08 95       	ret
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	08 95       	ret
    1a02:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a04:	08 95       	ret

00001a06 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1a06:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a08:	40 91 bb 01 	lds	r20, 0x01BB
    1a0c:	50 91 bc 01 	lds	r21, 0x01BC
    1a10:	46 17       	cp	r20, r22
    1a12:	57 07       	cpc	r21, r23
    1a14:	18 f4       	brcc	.+6      	; 0x1a1c <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a16:	f9 01       	movw	r30, r18
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	44 c0       	rjmp	.+136    	; 0x1aa4 <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a1c:	61 15       	cp	r22, r1
    1a1e:	71 05       	cpc	r23, r1
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <Endpoint_Write_Control_PStream_LE+0x20>
    1a22:	ab 01       	movw	r20, r22
    1a24:	f8 cf       	rjmp	.-16     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a26:	80 91 e8 00 	lds	r24, 0x00E8
    1a2a:	8e 77       	andi	r24, 0x7E	; 126
    1a2c:	80 93 e8 00 	sts	0x00E8, r24
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	f0 cf       	rjmp	.-32     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a36:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a3a:	88 23       	and	r24, r24
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <Endpoint_Write_Control_PStream_LE+0x3a>
    1a3e:	48 c0       	rjmp	.+144    	; 0x1ad0 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a40:	85 30       	cpi	r24, 0x05	; 5
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <Endpoint_Write_Control_PStream_LE+0x40>
    1a44:	47 c0       	rjmp	.+142    	; 0x1ad4 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a46:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a4a:	83 fd       	sbrc	r24, 3
    1a4c:	45 c0       	rjmp	.+138    	; 0x1ad8 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a4e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a52:	82 fd       	sbrc	r24, 2
    1a54:	37 c0       	rjmp	.+110    	; 0x1ac4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a56:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a5a:	80 ff       	sbrs	r24, 0
    1a5c:	23 c0       	rjmp	.+70     	; 0x1aa4 <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a5e:	80 91 f3 00 	lds	r24, 0x00F3
    1a62:	90 91 f2 00 	lds	r25, 0x00F2
    1a66:	78 2f       	mov	r23, r24
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	29 2f       	mov	r18, r25
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	26 2b       	or	r18, r22
    1a70:	37 2b       	or	r19, r23
    1a72:	08 c0       	rjmp	.+16     	; 0x1a84 <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a74:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a76:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a7a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a7c:	41 50       	subi	r20, 0x01	; 1
    1a7e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a84:	41 15       	cp	r20, r1
    1a86:	51 05       	cpc	r21, r1
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <Endpoint_Write_Control_PStream_LE+0x8a>
    1a8a:	28 30       	cpi	r18, 0x08	; 8
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	90 f3       	brcs	.-28     	; 0x1a74 <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	28 30       	cpi	r18, 0x08	; 8
    1a94:	31 05       	cpc	r19, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <Endpoint_Write_Control_PStream_LE+0x94>
    1a98:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a9a:	80 91 e8 00 	lds	r24, 0x00E8
    1a9e:	8e 77       	andi	r24, 0x7E	; 126
    1aa0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1aa4:	41 15       	cp	r20, r1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	31 f6       	brne	.-116    	; 0x1a36 <Endpoint_Write_Control_PStream_LE+0x30>
    1aaa:	99 23       	and	r25, r25
    1aac:	21 f6       	brne	.-120    	; 0x1a36 <Endpoint_Write_Control_PStream_LE+0x30>
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ab0:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ab4:	88 23       	and	r24, r24
    1ab6:	61 f0       	breq	.+24     	; 0x1ad0 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ab8:	85 30       	cpi	r24, 0x05	; 5
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1abc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ac0:	83 fd       	sbrc	r24, 3
    1ac2:	0a c0       	rjmp	.+20     	; 0x1ad8 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ac4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1ac8:	82 ff       	sbrs	r24, 2
    1aca:	f2 cf       	rjmp	.-28     	; 0x1ab0 <Endpoint_Write_Control_PStream_LE+0xaa>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	08 95       	ret
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	08 95       	ret
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	08 95       	ret
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ada:	08 95       	ret

00001adc <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1adc:	bf 92       	push	r11
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	18 2f       	mov	r17, r24
    1af0:	09 2f       	mov	r16, r25
    1af2:	7b 01       	movw	r14, r22
    1af4:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1af6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <Endpoint_WaitUntilReady>
    1afa:	b8 2e       	mov	r11, r24
    1afc:	88 23       	and	r24, r24
    1afe:	b1 f5       	brne	.+108    	; 0x1b6c <Endpoint_Write_Stream_LE+0x90>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1b00:	81 2f       	mov	r24, r17
    1b02:	90 2f       	mov	r25, r16
    1b04:	9c 01       	movw	r18, r24
    1b06:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1b08:	c1 14       	cp	r12, r1
    1b0a:	d1 04       	cpc	r13, r1
    1b0c:	39 f0       	breq	.+14     	; 0x1b1c <Endpoint_Write_Stream_LE+0x40>
	{
		Length -= *BytesProcessed;
    1b0e:	f6 01       	movw	r30, r12
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	e8 1a       	sub	r14, r24
    1b16:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1b18:	c8 0f       	add	r28, r24
    1b1a:	d9 1f       	adc	r29, r25
    1b1c:	00 e0       	ldi	r16, 0x00	; 0
    1b1e:	10 e0       	ldi	r17, 0x00	; 0
    1b20:	22 c0       	rjmp	.+68     	; 0x1b66 <Endpoint_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b22:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1b26:	85 fd       	sbrc	r24, 5
    1b28:	16 c0       	rjmp	.+44     	; 0x1b56 <Endpoint_Write_Stream_LE+0x7a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b2a:	80 91 e8 00 	lds	r24, 0x00E8
    1b2e:	8e 77       	andi	r24, 0x7E	; 126
    1b30:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1b34:	c1 14       	cp	r12, r1
    1b36:	d1 04       	cpc	r13, r1
    1b38:	49 f0       	breq	.+18     	; 0x1b4c <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1b3a:	f6 01       	movw	r30, r12
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	80 0f       	add	r24, r16
    1b42:	91 1f       	adc	r25, r17
    1b44:	91 83       	std	Z+1, r25	; 0x01
    1b46:	80 83       	st	Z, r24
    1b48:	85 e0       	ldi	r24, 0x05	; 5
    1b4a:	11 c0       	rjmp	.+34     	; 0x1b6e <Endpoint_Write_Stream_LE+0x92>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1b4c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <Endpoint_WaitUntilReady>
    1b50:	88 23       	and	r24, r24
    1b52:	49 f0       	breq	.+18     	; 0x1b66 <Endpoint_Write_Stream_LE+0x8a>
    1b54:	0c c0       	rjmp	.+24     	; 0x1b6e <Endpoint_Write_Stream_LE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1b56:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b58:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1b5c:	08 94       	sec
    1b5e:	e1 08       	sbc	r14, r1
    1b60:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1b62:	0f 5f       	subi	r16, 0xFF	; 255
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1b66:	e1 14       	cp	r14, r1
    1b68:	f1 04       	cpc	r15, r1
    1b6a:	d9 f6       	brne	.-74     	; 0x1b22 <Endpoint_Write_Stream_LE+0x46>
    1b6c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	08 95       	ret

00001b82 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    1b82:	38 2f       	mov	r19, r24
    1b84:	28 2f       	mov	r18, r24
    1b86:	2e c0       	rjmp	.+92     	; 0x1be4 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b88:	82 2f       	mov	r24, r18
    1b8a:	8f 70       	andi	r24, 0x0F	; 15
    1b8c:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1b90:	23 17       	cp	r18, r19
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <Endpoint_ConfigureEndpoint_Prv+0x1a>
    1b94:	76 2f       	mov	r23, r22
    1b96:	94 2f       	mov	r25, r20
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1b9c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1ba0:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    1ba4:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1ba8:	91 ff       	sbrs	r25, 1
    1baa:	1b c0       	rjmp	.+54     	; 0x1be2 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1bac:	80 91 eb 00 	lds	r24, 0x00EB
    1bb0:	8e 7f       	andi	r24, 0xFE	; 254
    1bb2:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1bb6:	80 91 ed 00 	lds	r24, 0x00ED
    1bba:	8d 7f       	andi	r24, 0xFD	; 253
    1bbc:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1bc0:	80 91 eb 00 	lds	r24, 0x00EB
    1bc4:	81 60       	ori	r24, 0x01	; 1
    1bc6:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1bca:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1bce:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    1bd2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1bd6:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1bda:	87 fd       	sbrc	r24, 7
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1be2:	2f 5f       	subi	r18, 0xFF	; 255
    1be4:	27 30       	cpi	r18, 0x07	; 7
    1be6:	80 f2       	brcs	.-96     	; 0x1b88 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1be8:	3f 70       	andi	r19, 0x0F	; 15
    1bea:	30 93 e9 00 	sts	0x00E9, r19
    1bee:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1bf0:	08 95       	ret

00001bf2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1bf2:	80 91 b5 01 	lds	r24, 0x01B5
    1bf6:	88 23       	and	r24, r24
    1bf8:	9c f4       	brge	.+38     	; 0x1c20 <Endpoint_ClearStatusStage+0x2e>
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bfc:	80 91 b4 01 	lds	r24, 0x01B4
    1c00:	88 23       	and	r24, r24
    1c02:	b9 f0       	breq	.+46     	; 0x1c32 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c04:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1c08:	82 ff       	sbrs	r24, 2
    1c0a:	f8 cf       	rjmp	.-16     	; 0x1bfc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c0c:	80 91 e8 00 	lds	r24, 0x00E8
    1c10:	8b 77       	andi	r24, 0x7B	; 123
    1c12:	80 93 e8 00 	sts	0x00E8, r24
    1c16:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c18:	80 91 b4 01 	lds	r24, 0x01B4
    1c1c:	88 23       	and	r24, r24
    1c1e:	49 f0       	breq	.+18     	; 0x1c32 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c20:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c24:	80 ff       	sbrs	r24, 0
    1c26:	f8 cf       	rjmp	.-16     	; 0x1c18 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c28:	80 91 e8 00 	lds	r24, 0x00E8
    1c2c:	8e 77       	andi	r24, 0x7E	; 126
    1c2e:	80 93 e8 00 	sts	0x00E8, r24
    1c32:	08 95       	ret

00001c34 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c34:	40 91 e4 00 	lds	r20, 0x00E4
    1c38:	50 91 e5 00 	lds	r21, 0x00E5
    1c3c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c3e:	80 91 ec 00 	lds	r24, 0x00EC
    1c42:	80 ff       	sbrs	r24, 0
    1c44:	24 c0       	rjmp	.+72     	; 0x1c8e <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c46:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c4a:	80 fd       	sbrc	r24, 0
    1c4c:	1e c0       	rjmp	.+60     	; 0x1c8a <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c4e:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c52:	88 23       	and	r24, r24
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <Endpoint_WaitUntilReady+0x26>
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c5a:	85 30       	cpi	r24, 0x05	; 5
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <Endpoint_WaitUntilReady+0x2e>
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c62:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c66:	85 ff       	sbrs	r24, 5
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <Endpoint_WaitUntilReady+0x3a>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	08 95       	ret
    1c6e:	80 91 e4 00 	lds	r24, 0x00E4
    1c72:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c76:	84 17       	cp	r24, r20
    1c78:	95 07       	cpc	r25, r21
    1c7a:	09 f3       	breq	.-62     	; 0x1c3e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c7c:	22 23       	and	r18, r18
    1c7e:	11 f4       	brne	.+4      	; 0x1c84 <Endpoint_WaitUntilReady+0x50>
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	08 95       	ret
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	ac 01       	movw	r20, r24
    1c88:	da cf       	rjmp	.-76     	; 0x1c3e <Endpoint_WaitUntilReady+0xa>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c8c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c8e:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c92:	82 ff       	sbrs	r24, 2
    1c94:	dc cf       	rjmp	.-72     	; 0x1c4e <Endpoint_WaitUntilReady+0x1a>
    1c96:	f9 cf       	rjmp	.-14     	; 0x1c8a <Endpoint_WaitUntilReady+0x56>

00001c98 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1c98:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c9c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1ca0:	e0 ee       	ldi	r30, 0xE0	; 224
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	81 60       	ori	r24, 0x01	; 1
    1ca8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1caa:	a8 ed       	ldi	r26, 0xD8	; 216
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	8c 91       	ld	r24, X
    1cb0:	8f 77       	andi	r24, 0x7F	; 127
    1cb2:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cb4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1cb6:	e7 ed       	ldi	r30, 0xD7	; 215
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	8e 7f       	andi	r24, 0xFE	; 254
    1cbe:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1cc0:	8c 91       	ld	r24, X
    1cc2:	8f 7e       	andi	r24, 0xEF	; 239
    1cc4:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1cc6:	10 92 b3 01 	sts	0x01B3, r1
}
    1cca:	08 95       	ret

00001ccc <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1cd4:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1cd8:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1cdc:	08 ed       	ldi	r16, 0xD8	; 216
    1cde:	10 e0       	ldi	r17, 0x00	; 0
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 77       	andi	r24, 0x7F	; 127
    1ce6:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 68       	ori	r24, 0x80	; 128
    1cec:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cee:	80 81       	ld	r24, Z
    1cf0:	8f 7d       	andi	r24, 0xDF	; 223
    1cf2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cf4:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1cf6:	10 92 b4 01 	sts	0x01B4, r1
	USB_Device_ConfigurationNumber  = 0;
    1cfa:	10 92 b0 01 	sts	0x01B0, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1cfe:	10 92 b2 01 	sts	0x01B2, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1d02:	10 92 b1 01 	sts	0x01B1, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1d06:	80 ee       	ldi	r24, 0xE0	; 224
    1d08:	e8 2e       	mov	r14, r24
    1d0a:	f1 2c       	mov	r15, r1
    1d0c:	f7 01       	movw	r30, r14
    1d0e:	80 81       	ld	r24, Z
    1d10:	8b 7f       	andi	r24, 0xFB	; 251
    1d12:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1d14:	f8 01       	movw	r30, r16
    1d16:	80 81       	ld	r24, Z
    1d18:	81 60       	ori	r24, 0x01	; 1
    1d1a:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	42 e0       	ldi	r20, 0x02	; 2
    1d22:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d26:	e1 ee       	ldi	r30, 0xE1	; 225
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8e 7f       	andi	r24, 0xFE	; 254
    1d2e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d30:	e2 ee       	ldi	r30, 0xE2	; 226
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	81 60       	ori	r24, 0x01	; 1
    1d38:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 60       	ori	r24, 0x08	; 8
    1d3e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1d40:	f7 01       	movw	r30, r14
    1d42:	80 81       	ld	r24, Z
    1d44:	8e 7f       	andi	r24, 0xFE	; 254
    1d46:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1d48:	f8 01       	movw	r30, r16
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 61       	ori	r24, 0x10	; 16
    1d4e:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	08 95       	ret

00001d5a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d5a:	e8 ed       	ldi	r30, 0xD8	; 216
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7e       	andi	r24, 0xEF	; 239
    1d62:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d64:	e7 ed       	ldi	r30, 0xD7	; 215
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	81 60       	ori	r24, 0x01	; 1
    1d6c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1d6e:	84 e0       	ldi	r24, 0x04	; 4
    1d70:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	80 93 b3 01 	sts	0x01B3, r24

	USB_ResetInterface();
    1d78:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <USB_ResetInterface>
}
    1d7c:	08 95       	ret

00001d7e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d7e:	e8 ed       	ldi	r30, 0xD8	; 216
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8e 7f       	andi	r24, 0xFE	; 254
    1d86:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d88:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1d8c:	08 95       	ret

00001d8e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d8e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d92:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1d96:	08 95       	ret

00001d98 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d98:	1f 92       	push	r1
    1d9a:	0f 92       	push	r0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	1f 93       	push	r17
    1da4:	2f 93       	push	r18
    1da6:	3f 93       	push	r19
    1da8:	4f 93       	push	r20
    1daa:	5f 93       	push	r21
    1dac:	6f 93       	push	r22
    1dae:	7f 93       	push	r23
    1db0:	8f 93       	push	r24
    1db2:	9f 93       	push	r25
    1db4:	af 93       	push	r26
    1db6:	bf 93       	push	r27
    1db8:	ef 93       	push	r30
    1dba:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1dbc:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1dc0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dc4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1dc8:	80 91 f0 00 	lds	r24, 0x00F0
    1dcc:	87 7f       	andi	r24, 0xF7	; 247
    1dce:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1dd2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1dd4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <USB_Device_ProcessControlRequest>
    1dd8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ddc:	80 91 f0 00 	lds	r24, 0x00F0
    1de0:	88 60       	ori	r24, 0x08	; 8
    1de2:	80 93 f0 00 	sts	0x00F0, r24
    1de6:	1f 70       	andi	r17, 0x0F	; 15
    1de8:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	7f 91       	pop	r23
    1dfa:	6f 91       	pop	r22
    1dfc:	5f 91       	pop	r21
    1dfe:	4f 91       	pop	r20
    1e00:	3f 91       	pop	r19
    1e02:	2f 91       	pop	r18
    1e04:	1f 91       	pop	r17
    1e06:	0f 90       	pop	r0
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	0f 90       	pop	r0
    1e0c:	1f 90       	pop	r1
    1e0e:	18 95       	reti

00001e10 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1e10:	1f 92       	push	r1
    1e12:	0f 92       	push	r0
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	0f 92       	push	r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	2f 93       	push	r18
    1e1c:	3f 93       	push	r19
    1e1e:	4f 93       	push	r20
    1e20:	5f 93       	push	r21
    1e22:	6f 93       	push	r22
    1e24:	7f 93       	push	r23
    1e26:	8f 93       	push	r24
    1e28:	9f 93       	push	r25
    1e2a:	af 93       	push	r26
    1e2c:	bf 93       	push	r27
    1e2e:	ef 93       	push	r30
    1e30:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1e32:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1e36:	82 ff       	sbrs	r24, 2
    1e38:	0b c0       	rjmp	.+22     	; 0x1e50 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1e3a:	80 91 e2 00 	lds	r24, 0x00E2
    1e3e:	82 ff       	sbrs	r24, 2
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1e42:	80 91 e1 00 	lds	r24, 0x00E1
    1e46:	8b 7f       	andi	r24, 0xFB	; 251
    1e48:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1e4c:	0e 94 1e 09 	call	0x123c	; 0x123c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1e50:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1e54:	80 ff       	sbrs	r24, 0
    1e56:	1f c0       	rjmp	.+62     	; 0x1e96 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1e58:	80 91 d8 00 	lds	r24, 0x00D8
    1e5c:	80 ff       	sbrs	r24, 0
    1e5e:	1b c0       	rjmp	.+54     	; 0x1e96 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1e60:	80 91 da 00 	lds	r24, 0x00DA
    1e64:	8e 7f       	andi	r24, 0xFE	; 254
    1e66:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e6a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e6e:	80 ff       	sbrs	r24, 0
    1e70:	0d c0       	rjmp	.+26     	; 0x1e8c <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e72:	80 e1       	ldi	r24, 0x10	; 16
    1e74:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e76:	82 e1       	ldi	r24, 0x12	; 18
    1e78:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e7a:	09 b4       	in	r0, 0x29	; 41
    1e7c:	00 fe       	sbrs	r0, 0
    1e7e:	fd cf       	rjmp	.-6      	; 0x1e7a <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	80 93 b4 01 	sts	0x01B4, r24
			EVENT_USB_Device_Connect();
    1e86:	0e 94 c4 0a 	call	0x1588	; 0x1588 <EVENT_USB_Device_Connect>
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e8c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1e8e:	10 92 b4 01 	sts	0x01B4, r1
			EVENT_USB_Device_Disconnect();
    1e92:	0e 94 bd 0a 	call	0x157a	; 0x157a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1e96:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e9a:	80 ff       	sbrs	r24, 0
    1e9c:	19 c0       	rjmp	.+50     	; 0x1ed0 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1e9e:	80 91 e2 00 	lds	r24, 0x00E2
    1ea2:	80 ff       	sbrs	r24, 0
    1ea4:	15 c0       	rjmp	.+42     	; 0x1ed0 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ea6:	80 91 e2 00 	lds	r24, 0x00E2
    1eaa:	8e 7f       	andi	r24, 0xFE	; 254
    1eac:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1eb0:	80 91 e2 00 	lds	r24, 0x00E2
    1eb4:	80 61       	ori	r24, 0x10	; 16
    1eb6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1eba:	80 91 d8 00 	lds	r24, 0x00D8
    1ebe:	80 62       	ori	r24, 0x20	; 32
    1ec0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ec4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1ec6:	85 e0       	ldi	r24, 0x05	; 5
    1ec8:	80 93 b4 01 	sts	0x01B4, r24
		EVENT_USB_Device_Suspend();
    1ecc:	0e 94 b3 0a 	call	0x1566	; 0x1566 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ed0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1ed4:	84 ff       	sbrs	r24, 4
    1ed6:	30 c0       	rjmp	.+96     	; 0x1f38 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1ed8:	80 91 e2 00 	lds	r24, 0x00E2
    1edc:	84 ff       	sbrs	r24, 4
    1ede:	2c c0       	rjmp	.+88     	; 0x1f38 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ee0:	80 e1       	ldi	r24, 0x10	; 16
    1ee2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ee4:	82 e1       	ldi	r24, 0x12	; 18
    1ee6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1ee8:	09 b4       	in	r0, 0x29	; 41
    1eea:	00 fe       	sbrs	r0, 0
    1eec:	fd cf       	rjmp	.-6      	; 0x1ee8 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1eee:	80 91 d8 00 	lds	r24, 0x00D8
    1ef2:	8f 7d       	andi	r24, 0xDF	; 223
    1ef4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1ef8:	80 91 e1 00 	lds	r24, 0x00E1
    1efc:	8f 7e       	andi	r24, 0xEF	; 239
    1efe:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1f02:	80 91 e2 00 	lds	r24, 0x00E2
    1f06:	8f 7e       	andi	r24, 0xEF	; 239
    1f08:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1f0c:	80 91 e2 00 	lds	r24, 0x00E2
    1f10:	81 60       	ori	r24, 0x01	; 1
    1f12:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1f16:	80 91 b0 01 	lds	r24, 0x01B0
    1f1a:	88 23       	and	r24, r24
    1f1c:	11 f0       	breq	.+4      	; 0x1f22 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1f1e:	84 e0       	ldi	r24, 0x04	; 4
    1f20:	07 c0       	rjmp	.+14     	; 0x1f30 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f22:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1f26:	87 fd       	sbrc	r24, 7
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <__vector_10+0x11e>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	01 c0       	rjmp	.+2      	; 0x1f30 <__vector_10+0x120>
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	80 93 b4 01 	sts	0x01B4, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1f34:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1f38:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1f3c:	83 ff       	sbrs	r24, 3
    1f3e:	29 c0       	rjmp	.+82     	; 0x1f92 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1f40:	80 91 e2 00 	lds	r24, 0x00E2
    1f44:	83 ff       	sbrs	r24, 3
    1f46:	25 c0       	rjmp	.+74     	; 0x1f92 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1f48:	80 91 e1 00 	lds	r24, 0x00E1
    1f4c:	87 7f       	andi	r24, 0xF7	; 247
    1f4e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	80 93 b4 01 	sts	0x01B4, r24
		USB_Device_ConfigurationNumber = 0;
    1f58:	10 92 b0 01 	sts	0x01B0, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1f5c:	80 91 e1 00 	lds	r24, 0x00E1
    1f60:	8e 7f       	andi	r24, 0xFE	; 254
    1f62:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1f66:	80 91 e2 00 	lds	r24, 0x00E2
    1f6a:	8e 7f       	andi	r24, 0xFE	; 254
    1f6c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1f70:	80 91 e2 00 	lds	r24, 0x00E2
    1f74:	80 61       	ori	r24, 0x10	; 16
    1f76:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	42 e0       	ldi	r20, 0x02	; 2
    1f80:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f84:	80 91 f0 00 	lds	r24, 0x00F0
    1f88:	88 60       	ori	r24, 0x08	; 8
    1f8a:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1f8e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1f92:	ff 91       	pop	r31
    1f94:	ef 91       	pop	r30
    1f96:	bf 91       	pop	r27
    1f98:	af 91       	pop	r26
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	7f 91       	pop	r23
    1fa0:	6f 91       	pop	r22
    1fa2:	5f 91       	pop	r21
    1fa4:	4f 91       	pop	r20
    1fa6:	3f 91       	pop	r19
    1fa8:	2f 91       	pop	r18
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti

00001fb4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1fb4:	1f 93       	push	r17
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	ac 97       	sbiw	r28, 0x2c	; 44
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	e5 eb       	ldi	r30, 0xB5	; 181
    1fcc:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1fce:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1fd2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1fd4:	21 e0       	ldi	r18, 0x01	; 1
    1fd6:	ed 3b       	cpi	r30, 0xBD	; 189
    1fd8:	f2 07       	cpc	r31, r18
    1fda:	c9 f7       	brne	.-14     	; 0x1fce <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1fdc:	0e 94 25 0b 	call	0x164a	; 0x164a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fe0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1fe4:	83 ff       	sbrs	r24, 3
    1fe6:	3e c1       	rjmp	.+636    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1fe8:	80 91 b5 01 	lds	r24, 0x01B5

		switch (USB_ControlRequest.bRequest)
    1fec:	30 91 b6 01 	lds	r19, 0x01B6
    1ff0:	35 30       	cpi	r19, 0x05	; 5
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <USB_Device_ProcessControlRequest+0x42>
    1ff4:	87 c0       	rjmp	.+270    	; 0x2104 <USB_Device_ProcessControlRequest+0x150>
    1ff6:	36 30       	cpi	r19, 0x06	; 6
    1ff8:	40 f4       	brcc	.+16     	; 0x200a <USB_Device_ProcessControlRequest+0x56>
    1ffa:	31 30       	cpi	r19, 0x01	; 1
    1ffc:	c9 f1       	breq	.+114    	; 0x2070 <USB_Device_ProcessControlRequest+0xbc>
    1ffe:	31 30       	cpi	r19, 0x01	; 1
    2000:	70 f0       	brcs	.+28     	; 0x201e <USB_Device_ProcessControlRequest+0x6a>
    2002:	33 30       	cpi	r19, 0x03	; 3
    2004:	09 f0       	breq	.+2      	; 0x2008 <USB_Device_ProcessControlRequest+0x54>
    2006:	2e c1       	rjmp	.+604    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
    2008:	33 c0       	rjmp	.+102    	; 0x2070 <USB_Device_ProcessControlRequest+0xbc>
    200a:	38 30       	cpi	r19, 0x08	; 8
    200c:	09 f4       	brne	.+2      	; 0x2010 <USB_Device_ProcessControlRequest+0x5c>
    200e:	f9 c0       	rjmp	.+498    	; 0x2202 <USB_Device_ProcessControlRequest+0x24e>
    2010:	39 30       	cpi	r19, 0x09	; 9
    2012:	09 f4       	brne	.+2      	; 0x2016 <USB_Device_ProcessControlRequest+0x62>
    2014:	09 c1       	rjmp	.+530    	; 0x2228 <USB_Device_ProcessControlRequest+0x274>
    2016:	36 30       	cpi	r19, 0x06	; 6
    2018:	09 f0       	breq	.+2      	; 0x201c <USB_Device_ProcessControlRequest+0x68>
    201a:	24 c1       	rjmp	.+584    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
    201c:	97 c0       	rjmp	.+302    	; 0x214c <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    201e:	80 38       	cpi	r24, 0x80	; 128
    2020:	21 f0       	breq	.+8      	; 0x202a <USB_Device_ProcessControlRequest+0x76>
    2022:	82 38       	cpi	r24, 0x82	; 130
    2024:	09 f0       	breq	.+2      	; 0x2028 <USB_Device_ProcessControlRequest+0x74>
    2026:	1e c1       	rjmp	.+572    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
    2028:	08 c0       	rjmp	.+16     	; 0x203a <USB_Device_ProcessControlRequest+0x86>
    202a:	90 91 b1 01 	lds	r25, 0x01B1
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    202e:	80 91 b2 01 	lds	r24, 0x01B2
    2032:	88 23       	and	r24, r24
    2034:	99 f0       	breq	.+38     	; 0x205c <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2036:	92 60       	ori	r25, 0x02	; 2
    2038:	11 c0       	rjmp	.+34     	; 0x205c <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    203a:	80 91 b9 01 	lds	r24, 0x01B9
    203e:	8f 70       	andi	r24, 0x0F	; 15
    2040:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2044:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	25 e0       	ldi	r18, 0x05	; 5
    204c:	96 95       	lsr	r25
    204e:	87 95       	ror	r24
    2050:	2a 95       	dec	r18
    2052:	e1 f7       	brne	.-8      	; 0x204c <USB_Device_ProcessControlRequest+0x98>
    2054:	98 2f       	mov	r25, r24
    2056:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2058:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    205c:	80 91 e8 00 	lds	r24, 0x00E8
    2060:	87 7f       	andi	r24, 0xF7	; 247
    2062:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2066:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    206a:	10 92 f1 00 	sts	0x00F1, r1
    206e:	d4 c0       	rjmp	.+424    	; 0x2218 <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2070:	88 23       	and	r24, r24
    2072:	19 f0       	breq	.+6      	; 0x207a <USB_Device_ProcessControlRequest+0xc6>
    2074:	82 30       	cpi	r24, 0x02	; 2
    2076:	09 f0       	breq	.+2      	; 0x207a <USB_Device_ProcessControlRequest+0xc6>
    2078:	f5 c0       	rjmp	.+490    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	8f 71       	andi	r24, 0x1F	; 31
    207e:	90 70       	andi	r25, 0x00	; 0
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	21 f0       	breq	.+8      	; 0x208c <USB_Device_ProcessControlRequest+0xd8>
    2084:	02 97       	sbiw	r24, 0x02	; 2
    2086:	09 f0       	breq	.+2      	; 0x208a <USB_Device_ProcessControlRequest+0xd6>
    2088:	ed c0       	rjmp	.+474    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
    208a:	0c c0       	rjmp	.+24     	; 0x20a4 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    208c:	80 91 b7 01 	lds	r24, 0x01B7
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	09 f0       	breq	.+2      	; 0x2096 <USB_Device_ProcessControlRequest+0xe2>
    2094:	e7 c0       	rjmp	.+462    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2096:	10 92 b2 01 	sts	0x01B2, r1
    209a:	33 30       	cpi	r19, 0x03	; 3
    209c:	69 f5       	brne	.+90     	; 0x20f8 <USB_Device_ProcessControlRequest+0x144>
    209e:	80 93 b2 01 	sts	0x01B2, r24
    20a2:	2a c0       	rjmp	.+84     	; 0x20f8 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    20a4:	80 91 b7 01 	lds	r24, 0x01B7
    20a8:	88 23       	and	r24, r24
    20aa:	31 f5       	brne	.+76     	; 0x20f8 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    20ac:	20 91 b9 01 	lds	r18, 0x01B9
    20b0:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <USB_Device_ProcessControlRequest+0x102>
    20b4:	d7 c0       	rjmp	.+430    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20b6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    20ba:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    20be:	80 ff       	sbrs	r24, 0
    20c0:	1b c0       	rjmp	.+54     	; 0x20f8 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    20c2:	33 30       	cpi	r19, 0x03	; 3
    20c4:	21 f4       	brne	.+8      	; 0x20ce <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20c6:	80 91 eb 00 	lds	r24, 0x00EB
    20ca:	80 62       	ori	r24, 0x20	; 32
    20cc:	13 c0       	rjmp	.+38     	; 0x20f4 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    20ce:	80 91 eb 00 	lds	r24, 0x00EB
    20d2:	80 61       	ori	r24, 0x10	; 16
    20d4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <USB_Device_ProcessControlRequest+0x12e>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	2a 95       	dec	r18
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <USB_Device_ProcessControlRequest+0x12a>
    20e6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    20ea:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    20ee:	80 91 eb 00 	lds	r24, 0x00EB
    20f2:	88 60       	ori	r24, 0x08	; 8
    20f4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20f8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20fc:	80 91 e8 00 	lds	r24, 0x00E8
    2100:	87 7f       	andi	r24, 0xF7	; 247
    2102:	8d c0       	rjmp	.+282    	; 0x221e <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2104:	88 23       	and	r24, r24
    2106:	09 f0       	breq	.+2      	; 0x210a <USB_Device_ProcessControlRequest+0x156>
    2108:	ad c0       	rjmp	.+346    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    210a:	10 91 b7 01 	lds	r17, 0x01B7
    210e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2110:	80 91 e3 00 	lds	r24, 0x00E3
    2114:	80 78       	andi	r24, 0x80	; 128
    2116:	81 2b       	or	r24, r17
    2118:	80 93 e3 00 	sts	0x00E3, r24
    211c:	80 91 e8 00 	lds	r24, 0x00E8
    2120:	87 7f       	andi	r24, 0xF7	; 247
    2122:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2126:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    212a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    212e:	80 ff       	sbrs	r24, 0
    2130:	fc cf       	rjmp	.-8      	; 0x212a <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2132:	80 91 e3 00 	lds	r24, 0x00E3
    2136:	80 68       	ori	r24, 0x80	; 128
    2138:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    213c:	11 23       	and	r17, r17
    213e:	11 f4       	brne	.+4      	; 0x2144 <USB_Device_ProcessControlRequest+0x190>
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <USB_Device_ProcessControlRequest+0x192>
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	80 93 b4 01 	sts	0x01B4, r24
    214a:	8c c0       	rjmp	.+280    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    214c:	80 58       	subi	r24, 0x80	; 128
    214e:	82 30       	cpi	r24, 0x02	; 2
    2150:	08 f0       	brcs	.+2      	; 0x2154 <USB_Device_ProcessControlRequest+0x1a0>
    2152:	88 c0       	rjmp	.+272    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2154:	80 91 b7 01 	lds	r24, 0x01B7
    2158:	90 91 b8 01 	lds	r25, 0x01B8
    215c:	23 e0       	ldi	r18, 0x03	; 3
    215e:	8c 3d       	cpi	r24, 0xDC	; 220
    2160:	92 07       	cpc	r25, r18
    2162:	09 f0       	breq	.+2      	; 0x2166 <USB_Device_ProcessControlRequest+0x1b2>
    2164:	34 c0       	rjmp	.+104    	; 0x21ce <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    216a:	8a e2       	ldi	r24, 0x2A	; 42
    216c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    216e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2170:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2172:	de 01       	movw	r26, r28
    2174:	15 96       	adiw	r26, 0x05	; 5
    2176:	6e e0       	ldi	r22, 0x0E	; 14
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    217c:	11 e2       	ldi	r17, 0x21	; 33
    217e:	e6 2f       	mov	r30, r22
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	10 93 57 00 	sts	0x0057, r17
    2186:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    2188:	40 ff       	sbrs	r20, 0
    218a:	03 c0       	rjmp	.+6      	; 0x2192 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    218c:	82 95       	swap	r24
    218e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    2190:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2192:	8f 70       	andi	r24, 0x0F	; 15
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2198:	8a 30       	cpi	r24, 0x0A	; 10
    219a:	18 f0       	brcs	.+6      	; 0x21a2 <USB_Device_ProcessControlRequest+0x1ee>
    219c:	c9 01       	movw	r24, r18
    219e:	c7 96       	adiw	r24, 0x37	; 55
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <USB_Device_ProcessControlRequest+0x1f2>
    21a2:	c9 01       	movw	r24, r18
    21a4:	c0 96       	adiw	r24, 0x30	; 48
    21a6:	8d 93       	st	X+, r24
    21a8:	9d 93       	st	X+, r25
    21aa:	4f 5f       	subi	r20, 0xFF	; 255
    21ac:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    21ae:	44 31       	cpi	r20, 0x14	; 20
    21b0:	51 05       	cpc	r21, r1
    21b2:	29 f7       	brne	.-54     	; 0x217e <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    21b4:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21b6:	80 91 e8 00 	lds	r24, 0x00E8
    21ba:	87 7f       	andi	r24, 0xF7	; 247
    21bc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    21c0:	ce 01       	movw	r24, r28
    21c2:	03 96       	adiw	r24, 0x03	; 3
    21c4:	6a e2       	ldi	r22, 0x2A	; 42
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	0e 94 99 0c 	call	0x1932	; 0x1932 <Endpoint_Write_Control_Stream_LE>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    21ce:	60 91 b9 01 	lds	r22, 0x01B9
    21d2:	ae 01       	movw	r20, r28
    21d4:	4f 5f       	subi	r20, 0xFF	; 255
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	0e 94 04 0c 	call	0x1808	; 0x1808 <CALLBACK_USB_GetDescriptor>
    21dc:	bc 01       	movw	r22, r24
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <USB_Device_ProcessControlRequest+0x230>
    21e2:	40 c0       	rjmp	.+128    	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
    21e4:	80 91 e8 00 	lds	r24, 0x00E8
    21e8:	87 7f       	andi	r24, 0xF7	; 247
    21ea:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	9a 81       	ldd	r25, Y+2	; 0x02
    21f2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    21f6:	80 91 e8 00 	lds	r24, 0x00E8
    21fa:	8b 77       	andi	r24, 0x7B	; 123
    21fc:	80 93 e8 00 	sts	0x00E8, r24
    2200:	31 c0       	rjmp	.+98     	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2202:	80 38       	cpi	r24, 0x80	; 128
    2204:	79 f5       	brne	.+94     	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2206:	80 91 e8 00 	lds	r24, 0x00E8
    220a:	87 7f       	andi	r24, 0xF7	; 247
    220c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2210:	80 91 b0 01 	lds	r24, 0x01B0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2214:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2218:	80 91 e8 00 	lds	r24, 0x00E8
    221c:	8e 77       	andi	r24, 0x7E	; 126
    221e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2222:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Endpoint_ClearStatusStage>
    2226:	1e c0       	rjmp	.+60     	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2228:	88 23       	and	r24, r24
    222a:	e1 f4       	brne	.+56     	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    222c:	90 91 b7 01 	lds	r25, 0x01B7
    2230:	92 30       	cpi	r25, 0x02	; 2
    2232:	c0 f4       	brcc	.+48     	; 0x2264 <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2234:	80 91 e8 00 	lds	r24, 0x00E8
    2238:	87 7f       	andi	r24, 0xF7	; 247
    223a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    223e:	90 93 b0 01 	sts	0x01B0, r25

	Endpoint_ClearStatusStage();
    2242:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2246:	80 91 b0 01 	lds	r24, 0x01B0
    224a:	88 23       	and	r24, r24
    224c:	31 f4       	brne	.+12     	; 0x225a <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    224e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2252:	87 fd       	sbrc	r24, 7
    2254:	02 c0       	rjmp	.+4      	; 0x225a <USB_Device_ProcessControlRequest+0x2a6>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	01 c0       	rjmp	.+2      	; 0x225c <USB_Device_ProcessControlRequest+0x2a8>
    225a:	84 e0       	ldi	r24, 0x04	; 4
    225c:	80 93 b4 01 	sts	0x01B4, r24

	EVENT_USB_Device_ConfigurationChanged();
    2260:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2264:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2268:	83 ff       	sbrs	r24, 3
    226a:	0a c0       	rjmp	.+20     	; 0x2280 <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    226c:	80 91 e8 00 	lds	r24, 0x00E8
    2270:	87 7f       	andi	r24, 0xF7	; 247
    2272:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2276:	80 91 eb 00 	lds	r24, 0x00EB
    227a:	80 62       	ori	r24, 0x20	; 32
    227c:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2280:	ac 96       	adiw	r28, 0x2c	; 44
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	1f 91       	pop	r17
    2292:	08 95       	ret

00002294 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2294:	90 93 42 01 	sts	0x0142, r25
    2298:	80 93 41 01 	sts	0x0141, r24
}
    229c:	08 95       	ret

0000229e <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    229e:	e0 91 41 01 	lds	r30, 0x0141
    22a2:	f0 91 42 01 	lds	r31, 0x0142
    22a6:	30 97       	sbiw	r30, 0x00	; 0
    22a8:	11 f4       	brne	.+4      	; 0x22ae <host_keyboard_leds+0x10>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	08 95       	ret
    return (*driver->keyboard_leds)();
    22ae:	01 90       	ld	r0, Z+
    22b0:	f0 81       	ld	r31, Z
    22b2:	e0 2d       	mov	r30, r0
    22b4:	09 95       	icall
}
    22b6:	08 95       	ret

000022b8 <host_mouse_send>:
    }
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    22b8:	e0 91 41 01 	lds	r30, 0x0141
    22bc:	f0 91 42 01 	lds	r31, 0x0142
    22c0:	30 97       	sbiw	r30, 0x00	; 0
    22c2:	21 f0       	breq	.+8      	; 0x22cc <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    22c4:	04 80       	ldd	r0, Z+4	; 0x04
    22c6:	f5 81       	ldd	r31, Z+5	; 0x05
    22c8:	e0 2d       	mov	r30, r0
    22ca:	09 95       	icall
    22cc:	08 95       	ret

000022ce <host_system_send>:
}

void host_system_send(uint16_t report)
{
    22ce:	9c 01       	movw	r18, r24
    if (report == last_system_report) return;
    22d0:	80 91 3f 01 	lds	r24, 0x013F
    22d4:	90 91 40 01 	lds	r25, 0x0140
    22d8:	28 17       	cp	r18, r24
    22da:	39 07       	cpc	r19, r25
    22dc:	79 f0       	breq	.+30     	; 0x22fc <host_system_send+0x2e>
    last_system_report = report;
    22de:	30 93 40 01 	sts	0x0140, r19
    22e2:	20 93 3f 01 	sts	0x013F, r18

    if (!driver) return;
    22e6:	e0 91 41 01 	lds	r30, 0x0141
    22ea:	f0 91 42 01 	lds	r31, 0x0142
    22ee:	30 97       	sbiw	r30, 0x00	; 0
    22f0:	29 f0       	breq	.+10     	; 0x22fc <host_system_send+0x2e>
    (*driver->send_system)(report);
    22f2:	06 80       	ldd	r0, Z+6	; 0x06
    22f4:	f7 81       	ldd	r31, Z+7	; 0x07
    22f6:	e0 2d       	mov	r30, r0
    22f8:	c9 01       	movw	r24, r18
    22fa:	09 95       	icall
    22fc:	08 95       	ret

000022fe <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    22fe:	9c 01       	movw	r18, r24
    if (report == last_consumer_report) return;
    2300:	80 91 3d 01 	lds	r24, 0x013D
    2304:	90 91 3e 01 	lds	r25, 0x013E
    2308:	28 17       	cp	r18, r24
    230a:	39 07       	cpc	r19, r25
    230c:	79 f0       	breq	.+30     	; 0x232c <host_consumer_send+0x2e>
    last_consumer_report = report;
    230e:	30 93 3e 01 	sts	0x013E, r19
    2312:	20 93 3d 01 	sts	0x013D, r18

    if (!driver) return;
    2316:	e0 91 41 01 	lds	r30, 0x0141
    231a:	f0 91 42 01 	lds	r31, 0x0142
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	29 f0       	breq	.+10     	; 0x232c <host_consumer_send+0x2e>
    (*driver->send_consumer)(report);
    2322:	00 84       	ldd	r0, Z+8	; 0x08
    2324:	f1 85       	ldd	r31, Z+9	; 0x09
    2326:	e0 2d       	mov	r30, r0
    2328:	c9 01       	movw	r24, r18
    232a:	09 95       	icall
    232c:	08 95       	ret

0000232e <host_keyboard_send>:
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    232e:	ef 92       	push	r14
    2330:	ff 92       	push	r15
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	18 2f       	mov	r17, r24
    233c:	09 2f       	mov	r16, r25
    if (!driver) return;
    233e:	e0 91 41 01 	lds	r30, 0x0141
    2342:	f0 91 42 01 	lds	r31, 0x0142
    2346:	30 97       	sbiw	r30, 0x00	; 0
    2348:	d9 f1       	breq	.+118    	; 0x23c0 <host_keyboard_send+0x92>
    (*driver->send_keyboard)(report);
    234a:	02 80       	ldd	r0, Z+2	; 0x02
    234c:	f3 81       	ldd	r31, Z+3	; 0x03
    234e:	e0 2d       	mov	r30, r0
    2350:	09 95       	icall

    if (debug_keyboard) {
    2352:	80 91 9f 01 	lds	r24, 0x019F
    2356:	82 ff       	sbrs	r24, 2
    2358:	33 c0       	rjmp	.+102    	; 0x23c0 <host_keyboard_send+0x92>
        dprint("keyboard_report: ");
    235a:	80 ff       	sbrs	r24, 0
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <host_keyboard_send+0x38>
    235e:	8c e4       	ldi	r24, 0x4C	; 76
    2360:	94 e0       	ldi	r25, 0x04	; 4
    2362:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    2366:	81 2f       	mov	r24, r17
    2368:	90 2f       	mov	r25, r16
    236a:	9c 01       	movw	r18, r24
    236c:	e9 01       	movw	r28, r18
    236e:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2370:	86 e4       	ldi	r24, 0x46	; 70
    2372:	e8 2e       	mov	r14, r24
    2374:	84 e0       	ldi	r24, 0x04	; 4
    2376:	f8 2e       	mov	r15, r24
    2378:	80 91 9f 01 	lds	r24, 0x019F
    237c:	80 ff       	sbrs	r24, 0
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <host_keyboard_send+0x7a>
    2380:	00 d0       	rcall	.+0      	; 0x2382 <host_keyboard_send+0x54>
    2382:	00 d0       	rcall	.+0      	; 0x2384 <host_keyboard_send+0x56>
    2384:	ed b7       	in	r30, 0x3d	; 61
    2386:	fe b7       	in	r31, 0x3e	; 62
    2388:	31 96       	adiw	r30, 0x01	; 1
    238a:	ad b7       	in	r26, 0x3d	; 61
    238c:	be b7       	in	r27, 0x3e	; 62
    238e:	12 96       	adiw	r26, 0x02	; 2
    2390:	fc 92       	st	X, r15
    2392:	ee 92       	st	-X, r14
    2394:	11 97       	sbiw	r26, 0x01	; 1
    2396:	88 81       	ld	r24, Y
    2398:	82 83       	std	Z+2, r24	; 0x02
    239a:	13 82       	std	Z+3, r1	; 0x03
    239c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    23a8:	1f 5f       	subi	r17, 0xFF	; 255
    23aa:	21 96       	adiw	r28, 0x01	; 1
    23ac:	10 31       	cpi	r17, 0x10	; 16
    23ae:	21 f7       	brne	.-56     	; 0x2378 <host_keyboard_send+0x4a>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    23b0:	80 91 9f 01 	lds	r24, 0x019F
    23b4:	80 ff       	sbrs	r24, 0
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <host_keyboard_send+0x92>
    23b8:	84 e4       	ldi	r24, 0x44	; 68
    23ba:	94 e0       	ldi	r25, 0x04	; 4
    23bc:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    }
}
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	ff 90       	pop	r15
    23ca:	ef 90       	pop	r14
    23cc:	08 95       	ret

000023ce <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    23ce:	08 95       	ret

000023d0 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    23d0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <matrix_setup>
}
    23d4:	08 95       	ret

000023d6 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    23d6:	1f 93       	push	r17
    23d8:	18 2f       	mov	r17, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    23da:	80 91 9f 01 	lds	r24, 0x019F
    23de:	82 ff       	sbrs	r24, 2
    23e0:	27 c0       	rjmp	.+78     	; 0x2430 <keyboard_set_leds+0x5a>
    23e2:	80 ff       	sbrs	r24, 0
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <keyboard_set_leds+0x18>
    23e6:	85 e6       	ldi	r24, 0x65	; 101
    23e8:	94 e0       	ldi	r25, 0x04	; 4
    23ea:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    23ee:	80 91 9f 01 	lds	r24, 0x019F
    23f2:	80 ff       	sbrs	r24, 0
    23f4:	15 c0       	rjmp	.+42     	; 0x2420 <keyboard_set_leds+0x4a>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <keyboard_set_leds+0x22>
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <keyboard_set_leds+0x24>
    23fa:	ed b7       	in	r30, 0x3d	; 61
    23fc:	fe b7       	in	r31, 0x3e	; 62
    23fe:	31 96       	adiw	r30, 0x01	; 1
    2400:	80 e6       	ldi	r24, 0x60	; 96
    2402:	94 e0       	ldi	r25, 0x04	; 4
    2404:	ad b7       	in	r26, 0x3d	; 61
    2406:	be b7       	in	r27, 0x3e	; 62
    2408:	12 96       	adiw	r26, 0x02	; 2
    240a:	9c 93       	st	X, r25
    240c:	8e 93       	st	-X, r24
    240e:	11 97       	sbiw	r26, 0x01	; 1
    2410:	12 83       	std	Z+2, r17	; 0x02
    2412:	13 82       	std	Z+3, r1	; 0x03
    2414:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	80 91 9f 01 	lds	r24, 0x019F
    2424:	80 ff       	sbrs	r24, 0
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <keyboard_set_leds+0x5a>
    2428:	8e e5       	ldi	r24, 0x5E	; 94
    242a:	94 e0       	ldi	r25, 0x04	; 4
    242c:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    led_set(leds);
    2430:	81 2f       	mov	r24, r17
    2432:	0e 94 17 09 	call	0x122e	; 0x122e <led_set>
}
    2436:	1f 91       	pop	r17
    2438:	08 95       	ret

0000243a <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    243a:	2f 92       	push	r2
    243c:	3f 92       	push	r3
    243e:	5f 92       	push	r5
    2440:	6f 92       	push	r6
    2442:	7f 92       	push	r7
    2444:	8f 92       	push	r8
    2446:	9f 92       	push	r9
    2448:	af 92       	push	r10
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	2a 97       	sbiw	r28, 0x0a	; 10
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    246c:	0e 94 7d 07 	call	0xefa	; 0xefa <matrix_scan>
    2470:	24 e4       	ldi	r18, 0x44	; 68
    2472:	82 2e       	mov	r8, r18
    2474:	21 e0       	ldi	r18, 0x01	; 1
    2476:	92 2e       	mov	r9, r18
    2478:	aa 24       	eor	r10, r10
    247a:	bb 24       	eor	r11, r11
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	29 2e       	mov	r2, r25
    2480:	31 2c       	mov	r3, r1
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2482:	5a 2c       	mov	r5, r10
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2484:	8a 2d       	mov	r24, r10
    2486:	0e 94 42 07 	call	0xe84	; 0xe84 <matrix_get_row>
    248a:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    248c:	f4 01       	movw	r30, r8
    248e:	e0 80       	ld	r14, Z
    2490:	f1 80       	ldd	r15, Z+1	; 0x01
    2492:	e8 26       	eor	r14, r24
    2494:	f9 26       	eor	r15, r25
        if (matrix_change) {
    2496:	e1 14       	cp	r14, r1
    2498:	f1 04       	cpc	r15, r1
    249a:	e1 f1       	breq	.+120    	; 0x2514 <keyboard_task+0xda>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    249c:	80 91 9f 01 	lds	r24, 0x019F
    24a0:	81 ff       	sbrs	r24, 1
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <keyboard_task+0x6e>
    24a4:	0e 94 c8 08 	call	0x1190	; 0x1190 <matrix_print>
    24a8:	00 e0       	ldi	r16, 0x00	; 0
    24aa:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    24ac:	31 01       	movw	r6, r2
    24ae:	00 2e       	mov	r0, r16
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <keyboard_task+0x7c>
    24b2:	66 0c       	add	r6, r6
    24b4:	77 1c       	adc	r7, r7
    24b6:	0a 94       	dec	r0
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <keyboard_task+0x78>
    24ba:	c3 01       	movw	r24, r6
    24bc:	8e 21       	and	r24, r14
    24be:	9f 21       	and	r25, r15
    24c0:	89 2b       	or	r24, r25
    24c2:	19 f1       	breq	.+70     	; 0x250a <keyboard_task+0xd0>
                    action_exec((keyevent_t){
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
    24c4:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <timer_read>
    24c8:	9c 01       	movw	r18, r24
    24ca:	09 83       	std	Y+1, r16	; 0x01
    24cc:	5a 82       	std	Y+2, r5	; 0x02
    24ce:	1b 82       	std	Y+3, r1	; 0x03
    24d0:	c6 20       	and	r12, r6
    24d2:	d7 20       	and	r13, r7
    24d4:	cd 28       	or	r12, r13
    24d6:	11 f0       	breq	.+4      	; 0x24dc <keyboard_task+0xa2>
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	8b 83       	std	Y+3, r24	; 0x03
    24dc:	c9 01       	movw	r24, r18
    24de:	81 60       	ori	r24, 0x01	; 1
    24e0:	78 2f       	mov	r23, r24
    24e2:	9d 83       	std	Y+5, r25	; 0x05
    24e4:	8c 83       	std	Y+4, r24	; 0x04
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    24e6:	49 81       	ldd	r20, Y+1	; 0x01
    24e8:	5a 81       	ldd	r21, Y+2	; 0x02
    24ea:	6b 81       	ldd	r22, Y+3	; 0x03
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    24f2:	f5 01       	movw	r30, r10
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	ec 5b       	subi	r30, 0xBC	; 188
    24fa:	fe 4f       	sbci	r31, 0xFE	; 254
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	86 25       	eor	r24, r6
    2502:	97 25       	eor	r25, r7
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	80 83       	st	Z, r24
    2508:	21 c0       	rjmp	.+66     	; 0x254c <keyboard_task+0x112>
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    250a:	0f 5f       	subi	r16, 0xFF	; 255
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    250e:	0c 30       	cpi	r16, 0x0C	; 12
    2510:	11 05       	cpc	r17, r1
    2512:	61 f6       	brne	.-104    	; 0x24ac <keyboard_task+0x72>
    2514:	08 94       	sec
    2516:	a1 1c       	adc	r10, r1
    2518:	b1 1c       	adc	r11, r1
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	88 0e       	add	r8, r24
    2520:	99 1e       	adc	r9, r25
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2522:	94 e0       	ldi	r25, 0x04	; 4
    2524:	a9 16       	cp	r10, r25
    2526:	b1 04       	cpc	r11, r1
    2528:	09 f0       	breq	.+2      	; 0x252c <keyboard_task+0xf2>
    252a:	ab cf       	rjmp	.-170    	; 0x2482 <keyboard_task+0x48>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    252c:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <timer_read>
    2530:	2f ef       	ldi	r18, 0xFF	; 255
    2532:	2e 83       	std	Y+6, r18	; 0x06
    2534:	2f 83       	std	Y+7, r18	; 0x07
    2536:	18 86       	std	Y+8, r1	; 0x08
    2538:	81 60       	ori	r24, 0x01	; 1
    253a:	78 2f       	mov	r23, r24
    253c:	9a 87       	std	Y+10, r25	; 0x0a
    253e:	89 87       	std	Y+9, r24	; 0x09
    2540:	4f ef       	ldi	r20, 0xFF	; 255
    2542:	5f ef       	ldi	r21, 0xFF	; 255
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	8a 85       	ldd	r24, Y+10	; 0x0a
    2548:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    254c:	0e 94 10 24 	call	0x4820	; 0x4820 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2550:	10 91 43 01 	lds	r17, 0x0143
    2554:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    2558:	18 17       	cp	r17, r24
    255a:	31 f0       	breq	.+12     	; 0x2568 <keyboard_task+0x12e>
        led_status = host_keyboard_leds();
    255c:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    2560:	80 93 43 01 	sts	0x0143, r24
        keyboard_set_leds(led_status);
    2564:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <keyboard_set_leds>
    }
}
    2568:	2a 96       	adiw	r28, 0x0a	; 10
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	bf 90       	pop	r11
    2586:	af 90       	pop	r10
    2588:	9f 90       	pop	r9
    258a:	8f 90       	pop	r8
    258c:	7f 90       	pop	r7
    258e:	6f 90       	pop	r6
    2590:	5f 90       	pop	r5
    2592:	3f 90       	pop	r3
    2594:	2f 90       	pop	r2
    2596:	08 95       	ret

00002598 <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    2598:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <timer_init>
    matrix_init();
    259c:	0e 94 52 07 	call	0xea4	; 0xea4 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    25a0:	0e 94 14 20 	call	0x4028	; 0x4028 <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    25a4:	08 95       	ret

000025a6 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <debug_event+0x6>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <debug_event+0x8>
    25ae:	0f 92       	push	r0
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <debug_record>:

void debug_record(keyrecord_t record)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <debug_record+0x6>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <debug_record+0x8>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <debug_record+0xa>
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    25d2:	26 96       	adiw	r28, 0x06	; 6
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    25e4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <layer_switch_get_action>
    25e8:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    25ea:	89 2f       	mov	r24, r25
    25ec:	82 95       	swap	r24
    25ee:	8f 70       	andi	r24, 0x0F	; 15
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	2c 30       	cpi	r18, 0x0C	; 12
    25f6:	31 05       	cpc	r19, r1
    25f8:	4c f4       	brge	.+18     	; 0x260c <is_tap_key+0x28>
    25fa:	2a 30       	cpi	r18, 0x0A	; 10
    25fc:	31 05       	cpc	r19, r1
    25fe:	6c f4       	brge	.+26     	; 0x261a <is_tap_key+0x36>
    2600:	22 50       	subi	r18, 0x02	; 2
    2602:	30 40       	sbci	r19, 0x00	; 0
    2604:	22 30       	cpi	r18, 0x02	; 2
    2606:	31 05       	cpc	r19, r1
    2608:	c0 f4       	brcc	.+48     	; 0x263a <is_tap_key+0x56>
    260a:	07 c0       	rjmp	.+14     	; 0x261a <is_tap_key+0x36>
    260c:	2c 30       	cpi	r18, 0x0C	; 12
    260e:	31 05       	cpc	r19, r1
    2610:	51 f0       	breq	.+20     	; 0x2626 <is_tap_key+0x42>
    2612:	2f 30       	cpi	r18, 0x0F	; 15
    2614:	31 05       	cpc	r19, r1
    2616:	89 f4       	brne	.+34     	; 0x263a <is_tap_key+0x56>
    2618:	06 c0       	rjmp	.+12     	; 0x2626 <is_tap_key+0x42>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    261a:	40 3e       	cpi	r20, 0xE0	; 224
    261c:	10 f0       	brcs	.+4      	; 0x2622 <is_tap_key+0x3e>
    261e:	40 3f       	cpi	r20, 0xF0	; 240
    2620:	61 f4       	brne	.+24     	; 0x263a <is_tap_key+0x56>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	08 95       	ret
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2626:	9f 70       	andi	r25, 0x0F	; 15
    2628:	89 2f       	mov	r24, r25
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	23 e0       	ldi	r18, 0x03	; 3
    262e:	96 95       	lsr	r25
    2630:	87 95       	ror	r24
    2632:	2a 95       	dec	r18
    2634:	e1 f7       	brne	.-8      	; 0x262e <is_tap_key+0x4a>
    2636:	81 70       	andi	r24, 0x01	; 1
    2638:	08 95       	ret
    263a:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return false;
}
    263c:	08 95       	ret

0000263e <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    263e:	0e 94 a3 1c 	call	0x3946	; 0x3946 <clear_weak_mods>
    clear_keys();
    2642:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <clear_keys>
    send_keyboard_report();
    2646:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    264a:	0e 94 34 23 	call	0x4668	; 0x4668 <mousekey_clear>
    mousekey_send();
    264e:	0e 94 40 23 	call	0x4680	; 0x4680 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 67 11 	call	0x22ce	; 0x22ce <host_system_send>
    host_consumer_send(0);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <host_consumer_send>
#endif
}
    2662:	08 95       	ret

00002664 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2664:	0e 94 93 1c 	call	0x3926	; 0x3926 <clear_mods>
    clear_keyboard_but_mods();
    2668:	0e 94 1f 13 	call	0x263e	; 0x263e <clear_keyboard_but_mods>
}
    266c:	08 95       	ret

0000266e <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    266e:	88 23       	and	r24, r24
    2670:	21 f0       	breq	.+8      	; 0x267a <unregister_mods+0xc>
        del_mods(mods);
    2672:	0e 94 89 1c 	call	0x3912	; 0x3912 <del_mods>
        send_keyboard_report();
    2676:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
    267a:	08 95       	ret

0000267c <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    267c:	88 23       	and	r24, r24
    267e:	21 f0       	breq	.+8      	; 0x2688 <register_mods+0xc>
        add_mods(mods);
    2680:	0e 94 83 1c 	call	0x3906	; 0x3906 <add_mods>
        send_keyboard_report();
    2684:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
    2688:	08 95       	ret

0000268a <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
    268a:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    268c:	88 23       	and	r24, r24
    268e:	09 f4       	brne	.+2      	; 0x2692 <unregister_code+0x8>
    2690:	4e c0       	rjmp	.+156    	; 0x272e <unregister_code+0xa4>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2692:	82 38       	cpi	r24, 0x82	; 130
    2694:	59 f4       	brne	.+22     	; 0x26ac <unregister_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2696:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    269a:	81 ff       	sbrs	r24, 1
    269c:	48 c0       	rjmp	.+144    	; 0x272e <unregister_code+0xa4>
#endif
        add_key(KC_CAPSLOCK);
    269e:	89 e3       	ldi	r24, 0x39	; 57
    26a0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    26a4:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    26a8:	89 e3       	ldi	r24, 0x39	; 57
    26aa:	0c c0       	rjmp	.+24     	; 0x26c4 <unregister_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    26ac:	83 38       	cpi	r24, 0x83	; 131
    26ae:	69 f4       	brne	.+26     	; 0x26ca <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    26b0:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    26b4:	80 ff       	sbrs	r24, 0
    26b6:	3b c0       	rjmp	.+118    	; 0x272e <unregister_code+0xa4>
#endif
        add_key(KC_NUMLOCK);
    26b8:	83 e5       	ldi	r24, 0x53	; 83
    26ba:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    26be:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    26c2:	83 e5       	ldi	r24, 0x53	; 83
    26c4:	0e 94 bb 1c 	call	0x3976	; 0x3976 <del_key>
    26c8:	1f c0       	rjmp	.+62     	; 0x2708 <unregister_code+0x7e>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    26ca:	84 38       	cpi	r24, 0x84	; 132
    26cc:	59 f4       	brne	.+22     	; 0x26e4 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    26ce:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    26d2:	82 ff       	sbrs	r24, 2
    26d4:	2c c0       	rjmp	.+88     	; 0x272e <unregister_code+0xa4>
#endif
        add_key(KC_SCROLLLOCK);
    26d6:	87 e4       	ldi	r24, 0x47	; 71
    26d8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    26dc:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    26e0:	87 e4       	ldi	r24, 0x47	; 71
    26e2:	f0 cf       	rjmp	.-32     	; 0x26c4 <unregister_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    26e4:	84 50       	subi	r24, 0x04	; 4
    26e6:	81 3a       	cpi	r24, 0xA1	; 161
    26e8:	10 f4       	brcc	.+4      	; 0x26ee <unregister_code+0x64>
        del_key(code);
    26ea:	82 2f       	mov	r24, r18
    26ec:	eb cf       	rjmp	.-42     	; 0x26c4 <unregister_code+0x3a>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    26ee:	82 2f       	mov	r24, r18
    26f0:	80 5e       	subi	r24, 0xE0	; 224
    26f2:	88 30       	cpi	r24, 0x08	; 8
    26f4:	60 f4       	brcc	.+24     	; 0x270e <unregister_code+0x84>
        del_mods(MOD_BIT(code));
    26f6:	27 70       	andi	r18, 0x07	; 7
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <unregister_code+0x76>
    26fe:	88 0f       	add	r24, r24
    2700:	2a 95       	dec	r18
    2702:	ea f7       	brpl	.-6      	; 0x26fe <unregister_code+0x74>
    2704:	0e 94 89 1c 	call	0x3912	; 0x3912 <del_mods>
        send_keyboard_report();
    2708:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
    270c:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    270e:	82 2f       	mov	r24, r18
    2710:	85 5a       	subi	r24, 0xA5	; 165
    2712:	83 30       	cpi	r24, 0x03	; 3
    2714:	28 f4       	brcc	.+10     	; 0x2720 <unregister_code+0x96>
        host_system_send(0);
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 67 11 	call	0x22ce	; 0x22ce <host_system_send>
    271e:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    2720:	28 5a       	subi	r18, 0xA8	; 168
    2722:	25 31       	cpi	r18, 0x15	; 21
    2724:	20 f4       	brcc	.+8      	; 0x272e <unregister_code+0xa4>
        host_consumer_send(0);
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <host_consumer_send>
    272e:	08 95       	ret

00002730 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2730:	1f 93       	push	r17
    2732:	18 2f       	mov	r17, r24
    if (code == KC_NO) {
    2734:	88 23       	and	r24, r24
    2736:	09 f4       	brne	.+2      	; 0x273a <register_code+0xa>
    2738:	d0 c0       	rjmp	.+416    	; 0x28da <register_code+0x1aa>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    273a:	82 38       	cpi	r24, 0x82	; 130
    273c:	59 f4       	brne	.+22     	; 0x2754 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    273e:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    2742:	81 fd       	sbrc	r24, 1
    2744:	ca c0       	rjmp	.+404    	; 0x28da <register_code+0x1aa>
#endif
        add_key(KC_CAPSLOCK);
    2746:	89 e3       	ldi	r24, 0x39	; 57
    2748:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    274c:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2750:	89 e3       	ldi	r24, 0x39	; 57
    2752:	0c c0       	rjmp	.+24     	; 0x276c <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2754:	83 38       	cpi	r24, 0x83	; 131
    2756:	79 f4       	brne	.+30     	; 0x2776 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2758:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    275c:	80 fd       	sbrc	r24, 0
    275e:	bd c0       	rjmp	.+378    	; 0x28da <register_code+0x1aa>
#endif
        add_key(KC_NUMLOCK);
    2760:	83 e5       	ldi	r24, 0x53	; 83
    2762:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    2766:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    276a:	83 e5       	ldi	r24, 0x53	; 83
    276c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <del_key>
        send_keyboard_report();
    2770:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
    2774:	b2 c0       	rjmp	.+356    	; 0x28da <register_code+0x1aa>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2776:	84 38       	cpi	r24, 0x84	; 132
    2778:	59 f4       	brne	.+22     	; 0x2790 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    277a:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    277e:	82 fd       	sbrc	r24, 2
    2780:	ac c0       	rjmp	.+344    	; 0x28da <register_code+0x1aa>
#endif
        add_key(KC_SCROLLLOCK);
    2782:	87 e4       	ldi	r24, 0x47	; 71
    2784:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    2788:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    278c:	87 e4       	ldi	r24, 0x47	; 71
    278e:	ee cf       	rjmp	.-36     	; 0x276c <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2790:	84 50       	subi	r24, 0x04	; 4
    2792:	81 3a       	cpi	r24, 0xA1	; 161
    2794:	50 f4       	brcc	.+20     	; 0x27aa <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2796:	81 2f       	mov	r24, r17
    2798:	0e 94 00 2a 	call	0x5400	; 0x5400 <command_proc>
    279c:	88 23       	and	r24, r24
    279e:	09 f0       	breq	.+2      	; 0x27a2 <register_code+0x72>
    27a0:	9c c0       	rjmp	.+312    	; 0x28da <register_code+0x1aa>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    27a2:	81 2f       	mov	r24, r17
    27a4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
    27a8:	e3 cf       	rjmp	.-58     	; 0x2770 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    27aa:	81 2f       	mov	r24, r17
    27ac:	80 5e       	subi	r24, 0xE0	; 224
    27ae:	88 30       	cpi	r24, 0x08	; 8
    27b0:	50 f4       	brcc	.+20     	; 0x27c6 <register_code+0x96>
        add_mods(MOD_BIT(code));
    27b2:	17 70       	andi	r17, 0x07	; 7
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <register_code+0x8c>
    27ba:	88 0f       	add	r24, r24
    27bc:	1a 95       	dec	r17
    27be:	ea f7       	brpl	.-6      	; 0x27ba <register_code+0x8a>
    27c0:	0e 94 83 1c 	call	0x3906	; 0x3906 <add_mods>
    27c4:	d5 cf       	rjmp	.-86     	; 0x2770 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    27c6:	81 2f       	mov	r24, r17
    27c8:	85 5a       	subi	r24, 0xA5	; 165
    27ca:	83 30       	cpi	r24, 0x03	; 3
    27cc:	a0 f4       	brcc	.+40     	; 0x27f6 <register_code+0xc6>
        host_system_send(KEYCODE2SYSTEM(code));
    27ce:	15 3a       	cpi	r17, 0xA5	; 165
    27d0:	19 f4       	brne	.+6      	; 0x27d8 <register_code+0xa8>
    27d2:	81 e8       	ldi	r24, 0x81	; 129
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0c c0       	rjmp	.+24     	; 0x27f0 <register_code+0xc0>
    27d8:	16 3a       	cpi	r17, 0xA6	; 166
    27da:	19 f4       	brne	.+6      	; 0x27e2 <register_code+0xb2>
    27dc:	82 e8       	ldi	r24, 0x82	; 130
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	07 c0       	rjmp	.+14     	; 0x27f0 <register_code+0xc0>
    27e2:	17 3a       	cpi	r17, 0xA7	; 167
    27e4:	19 f0       	breq	.+6      	; 0x27ec <register_code+0xbc>
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <register_code+0xc0>
    27ec:	83 e8       	ldi	r24, 0x83	; 131
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 67 11 	call	0x22ce	; 0x22ce <host_system_send>
    27f4:	72 c0       	rjmp	.+228    	; 0x28da <register_code+0x1aa>
    }
    else if IS_CONSUMER(code) {
    27f6:	81 2f       	mov	r24, r17
    27f8:	88 5a       	subi	r24, 0xA8	; 168
    27fa:	85 31       	cpi	r24, 0x15	; 21
    27fc:	08 f0       	brcs	.+2      	; 0x2800 <register_code+0xd0>
    27fe:	6d c0       	rjmp	.+218    	; 0x28da <register_code+0x1aa>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2800:	18 3a       	cpi	r17, 0xA8	; 168
    2802:	19 f4       	brne	.+6      	; 0x280a <register_code+0xda>
    2804:	82 ee       	ldi	r24, 0xE2	; 226
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	66 c0       	rjmp	.+204    	; 0x28d6 <register_code+0x1a6>
    280a:	19 3a       	cpi	r17, 0xA9	; 169
    280c:	19 f4       	brne	.+6      	; 0x2814 <register_code+0xe4>
    280e:	89 ee       	ldi	r24, 0xE9	; 233
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	61 c0       	rjmp	.+194    	; 0x28d6 <register_code+0x1a6>
    2814:	1a 3a       	cpi	r17, 0xAA	; 170
    2816:	19 f4       	brne	.+6      	; 0x281e <register_code+0xee>
    2818:	8a ee       	ldi	r24, 0xEA	; 234
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	5c c0       	rjmp	.+184    	; 0x28d6 <register_code+0x1a6>
    281e:	1b 3a       	cpi	r17, 0xAB	; 171
    2820:	19 f4       	brne	.+6      	; 0x2828 <register_code+0xf8>
    2822:	85 eb       	ldi	r24, 0xB5	; 181
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	57 c0       	rjmp	.+174    	; 0x28d6 <register_code+0x1a6>
    2828:	1c 3a       	cpi	r17, 0xAC	; 172
    282a:	19 f4       	brne	.+6      	; 0x2832 <register_code+0x102>
    282c:	86 eb       	ldi	r24, 0xB6	; 182
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	52 c0       	rjmp	.+164    	; 0x28d6 <register_code+0x1a6>
    2832:	1d 3a       	cpi	r17, 0xAD	; 173
    2834:	19 f4       	brne	.+6      	; 0x283c <register_code+0x10c>
    2836:	83 eb       	ldi	r24, 0xB3	; 179
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	4d c0       	rjmp	.+154    	; 0x28d6 <register_code+0x1a6>
    283c:	1e 3a       	cpi	r17, 0xAE	; 174
    283e:	19 f4       	brne	.+6      	; 0x2846 <register_code+0x116>
    2840:	84 eb       	ldi	r24, 0xB4	; 180
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	48 c0       	rjmp	.+144    	; 0x28d6 <register_code+0x1a6>
    2846:	1f 3a       	cpi	r17, 0xAF	; 175
    2848:	19 f4       	brne	.+6      	; 0x2850 <register_code+0x120>
    284a:	87 eb       	ldi	r24, 0xB7	; 183
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	43 c0       	rjmp	.+134    	; 0x28d6 <register_code+0x1a6>
    2850:	11 3b       	cpi	r17, 0xB1	; 177
    2852:	19 f4       	brne	.+6      	; 0x285a <register_code+0x12a>
    2854:	8c ec       	ldi	r24, 0xCC	; 204
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	3e c0       	rjmp	.+124    	; 0x28d6 <register_code+0x1a6>
    285a:	10 3b       	cpi	r17, 0xB0	; 176
    285c:	19 f4       	brne	.+6      	; 0x2864 <register_code+0x134>
    285e:	8d ec       	ldi	r24, 0xCD	; 205
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	39 c0       	rjmp	.+114    	; 0x28d6 <register_code+0x1a6>
    2864:	12 3b       	cpi	r17, 0xB2	; 178
    2866:	19 f4       	brne	.+6      	; 0x286e <register_code+0x13e>
    2868:	83 e8       	ldi	r24, 0x83	; 131
    286a:	91 e0       	ldi	r25, 0x01	; 1
    286c:	34 c0       	rjmp	.+104    	; 0x28d6 <register_code+0x1a6>
    286e:	13 3b       	cpi	r17, 0xB3	; 179
    2870:	19 f4       	brne	.+6      	; 0x2878 <register_code+0x148>
    2872:	8a e8       	ldi	r24, 0x8A	; 138
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	2f c0       	rjmp	.+94     	; 0x28d6 <register_code+0x1a6>
    2878:	14 3b       	cpi	r17, 0xB4	; 180
    287a:	19 f4       	brne	.+6      	; 0x2882 <register_code+0x152>
    287c:	82 e9       	ldi	r24, 0x92	; 146
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	2a c0       	rjmp	.+84     	; 0x28d6 <register_code+0x1a6>
    2882:	15 3b       	cpi	r17, 0xB5	; 181
    2884:	19 f4       	brne	.+6      	; 0x288c <register_code+0x15c>
    2886:	84 e9       	ldi	r24, 0x94	; 148
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	25 c0       	rjmp	.+74     	; 0x28d6 <register_code+0x1a6>
    288c:	16 3b       	cpi	r17, 0xB6	; 182
    288e:	19 f4       	brne	.+6      	; 0x2896 <register_code+0x166>
    2890:	81 e2       	ldi	r24, 0x21	; 33
    2892:	92 e0       	ldi	r25, 0x02	; 2
    2894:	20 c0       	rjmp	.+64     	; 0x28d6 <register_code+0x1a6>
    2896:	17 3b       	cpi	r17, 0xB7	; 183
    2898:	19 f4       	brne	.+6      	; 0x28a0 <register_code+0x170>
    289a:	83 e2       	ldi	r24, 0x23	; 35
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	1b c0       	rjmp	.+54     	; 0x28d6 <register_code+0x1a6>
    28a0:	18 3b       	cpi	r17, 0xB8	; 184
    28a2:	19 f4       	brne	.+6      	; 0x28aa <register_code+0x17a>
    28a4:	84 e2       	ldi	r24, 0x24	; 36
    28a6:	92 e0       	ldi	r25, 0x02	; 2
    28a8:	16 c0       	rjmp	.+44     	; 0x28d6 <register_code+0x1a6>
    28aa:	19 3b       	cpi	r17, 0xB9	; 185
    28ac:	19 f4       	brne	.+6      	; 0x28b4 <register_code+0x184>
    28ae:	85 e2       	ldi	r24, 0x25	; 37
    28b0:	92 e0       	ldi	r25, 0x02	; 2
    28b2:	11 c0       	rjmp	.+34     	; 0x28d6 <register_code+0x1a6>
    28b4:	1a 3b       	cpi	r17, 0xBA	; 186
    28b6:	19 f4       	brne	.+6      	; 0x28be <register_code+0x18e>
    28b8:	86 e2       	ldi	r24, 0x26	; 38
    28ba:	92 e0       	ldi	r25, 0x02	; 2
    28bc:	0c c0       	rjmp	.+24     	; 0x28d6 <register_code+0x1a6>
    28be:	1b 3b       	cpi	r17, 0xBB	; 187
    28c0:	19 f4       	brne	.+6      	; 0x28c8 <register_code+0x198>
    28c2:	87 e2       	ldi	r24, 0x27	; 39
    28c4:	92 e0       	ldi	r25, 0x02	; 2
    28c6:	07 c0       	rjmp	.+14     	; 0x28d6 <register_code+0x1a6>
    28c8:	1c 3b       	cpi	r17, 0xBC	; 188
    28ca:	19 f0       	breq	.+6      	; 0x28d2 <register_code+0x1a2>
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <register_code+0x1a6>
    28d2:	8a e2       	ldi	r24, 0x2A	; 42
    28d4:	92 e0       	ldi	r25, 0x02	; 2
    28d6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <host_consumer_send>
    }
}
    28da:	1f 91       	pop	r17
    28dc:	08 95       	ret

000028de <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    28de:	af 92       	push	r10
    28e0:	bf 92       	push	r11
    28e2:	cf 92       	push	r12
    28e4:	df 92       	push	r13
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	2a 97       	sbiw	r28, 0x0a	; 10
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    2904:	de 01       	movw	r26, r28
    2906:	11 96       	adiw	r26, 0x01	; 1
    2908:	fc 01       	movw	r30, r24
    290a:	85 e0       	ldi	r24, 0x05	; 5
    290c:	01 90       	ld	r0, Z+
    290e:	0d 92       	st	X+, r0
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	e1 f7       	brne	.-8      	; 0x290c <process_action+0x2e>
    2914:	0b 81       	ldd	r16, Y+3	; 0x03
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2916:	f5 01       	movw	r30, r10
    2918:	f5 80       	ldd	r15, Z+5	; 0x05
    291a:	f2 94       	swap	r15
    291c:	4f e0       	ldi	r20, 0x0F	; 15
    291e:	f4 22       	and	r15, r20
#endif

    if (IS_NOEVENT(event)) { return; }
    2920:	de 01       	movw	r26, r28
    2922:	16 96       	adiw	r26, 0x06	; 6
    2924:	fe 01       	movw	r30, r28
    2926:	31 96       	adiw	r30, 0x01	; 1
    2928:	85 e0       	ldi	r24, 0x05	; 5
    292a:	01 90       	ld	r0, Z+
    292c:	0d 92       	st	X+, r0
    292e:	81 50       	subi	r24, 0x01	; 1
    2930:	e1 f7       	brne	.-8      	; 0x292a <process_action+0x4c>
    2932:	3e 81       	ldd	r19, Y+6	; 0x06
    2934:	2f 81       	ldd	r18, Y+7	; 0x07

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	89 2b       	or	r24, r25
    293c:	09 f4       	brne	.+2      	; 0x2940 <process_action+0x62>
    293e:	f8 c1       	rjmp	.+1008   	; 0x2d30 <process_action+0x452>
    2940:	2f 3f       	cpi	r18, 0xFF	; 255
    2942:	09 f0       	breq	.+2      	; 0x2946 <process_action+0x68>
    2944:	c8 c1       	rjmp	.+912    	; 0x2cd6 <process_action+0x3f8>
    2946:	3f 3f       	cpi	r19, 0xFF	; 255
    2948:	09 f0       	breq	.+2      	; 0x294c <process_action+0x6e>
    294a:	c5 c1       	rjmp	.+906    	; 0x2cd6 <process_action+0x3f8>
    294c:	f1 c1       	rjmp	.+994    	; 0x2d30 <process_action+0x452>
    294e:	8d 2d       	mov	r24, r13
    2950:	8f 70       	andi	r24, 0x0F	; 15
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
    2952:	22 23       	and	r18, r18
    2954:	11 f4       	brne	.+4      	; 0x295a <process_action+0x7c>
    2956:	18 2f       	mov	r17, r24
    2958:	03 c0       	rjmp	.+6      	; 0x2960 <process_action+0x82>
    295a:	18 2f       	mov	r17, r24
    295c:	12 95       	swap	r17
    295e:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    2960:	00 23       	and	r16, r16
    2962:	49 f0       	breq	.+18     	; 0x2976 <process_action+0x98>
                    if (mods) {
    2964:	11 23       	and	r17, r17
    2966:	09 f4       	brne	.+2      	; 0x296a <process_action+0x8c>
    2968:	90 c1       	rjmp	.+800    	; 0x2c8a <process_action+0x3ac>
                        add_weak_mods(mods);
    296a:	81 2f       	mov	r24, r17
    296c:	0e 94 96 1c 	call	0x392c	; 0x392c <add_weak_mods>
                        send_keyboard_report();
    2970:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
    2974:	8a c1       	rjmp	.+788    	; 0x2c8a <process_action+0x3ac>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2976:	8c 2d       	mov	r24, r12
    2978:	0e 94 45 13 	call	0x268a	; 0x268a <unregister_code>
                    if (mods) {
    297c:	11 23       	and	r17, r17
    297e:	09 f4       	brne	.+2      	; 0x2982 <process_action+0xa4>
    2980:	d7 c1       	rjmp	.+942    	; 0x2d30 <process_action+0x452>
                        del_weak_mods(mods);
    2982:	81 2f       	mov	r24, r17
    2984:	0e 94 9c 1c 	call	0x3938	; 0x3938 <del_weak_mods>
                        send_keyboard_report();
    2988:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
    298c:	d1 c1       	rjmp	.+930    	; 0x2d30 <process_action+0x452>
    298e:	8d 2d       	mov	r24, r13
    2990:	8f 70       	andi	r24, 0x0F	; 15
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
                                                                    action.key.mods<<4;
    2992:	20 32       	cpi	r18, 0x20	; 32
    2994:	11 f4       	brne	.+4      	; 0x299a <process_action+0xbc>
    2996:	18 2f       	mov	r17, r24
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <process_action+0xc2>
    299a:	18 2f       	mov	r17, r24
    299c:	12 95       	swap	r17
    299e:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.layer_tap.code) {
    29a0:	cc 20       	and	r12, r12
    29a2:	21 f0       	breq	.+8      	; 0x29ac <process_action+0xce>
    29a4:	f1 e0       	ldi	r31, 0x01	; 1
    29a6:	cf 16       	cp	r12, r31
    29a8:	29 f5       	brne	.+74     	; 0x29f4 <process_action+0x116>
    29aa:	14 c0       	rjmp	.+40     	; 0x29d4 <process_action+0xf6>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    29ac:	00 23       	and	r16, r16
    29ae:	49 f0       	breq	.+18     	; 0x29c2 <process_action+0xe4>
                            if (tap_count == 0) {
    29b0:	ff 20       	and	r15, r15
    29b2:	51 f1       	breq	.+84     	; 0x2a08 <process_action+0x12a>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    29b4:	21 e0       	ldi	r18, 0x01	; 1
    29b6:	f2 16       	cp	r15, r18
    29b8:	39 f5       	brne	.+78     	; 0x2a08 <process_action+0x12a>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    29ba:	81 2f       	mov	r24, r17
    29bc:	0e 94 a6 1c 	call	0x394c	; 0x394c <set_oneshot_mods>
    29c0:	b7 c1       	rjmp	.+878    	; 0x2d30 <process_action+0x452>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    29c2:	ff 20       	and	r15, r15
    29c4:	21 f0       	breq	.+8      	; 0x29ce <process_action+0xf0>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	f8 16       	cp	r15, r24
    29ca:	09 f4       	brne	.+2      	; 0x29ce <process_action+0xf0>
    29cc:	b1 c1       	rjmp	.+866    	; 0x2d30 <process_action+0x452>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    29ce:	0e 94 a9 1c 	call	0x3952	; 0x3952 <clear_oneshot_mods>
    29d2:	2f c1       	rjmp	.+606    	; 0x2c32 <process_action+0x354>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    29d4:	00 23       	and	r16, r16
    29d6:	49 f0       	breq	.+18     	; 0x29ea <process_action+0x10c>
                            if (tap_count <= TAPPING_TOGGLE) {
    29d8:	e5 e0       	ldi	r30, 0x05	; 5
    29da:	ef 15       	cp	r30, r15
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <process_action+0x102>
    29de:	a8 c1       	rjmp	.+848    	; 0x2d30 <process_action+0x452>
                                if (mods & get_mods()) {
    29e0:	0e 94 80 1c 	call	0x3900	; 0x3900 <get_mods>
    29e4:	81 23       	and	r24, r17
    29e6:	81 f0       	breq	.+32     	; 0x2a08 <process_action+0x12a>
    29e8:	24 c1       	rjmp	.+584    	; 0x2c32 <process_action+0x354>
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    29ea:	f4 e0       	ldi	r31, 0x04	; 4
    29ec:	ff 15       	cp	r31, r15
    29ee:	08 f4       	brcc	.+2      	; 0x29f2 <process_action+0x114>
    29f0:	9f c1       	rjmp	.+830    	; 0x2d30 <process_action+0x452>
    29f2:	1f c1       	rjmp	.+574    	; 0x2c32 <process_action+0x354>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    29f4:	00 23       	and	r16, r16
    29f6:	61 f0       	breq	.+24     	; 0x2a10 <process_action+0x132>
                            if (tap_count > 0) {
    29f8:	ff 20       	and	r15, r15
    29fa:	31 f0       	breq	.+12     	; 0x2a08 <process_action+0x12a>
                                if (record->tap.interrupted) {
    29fc:	f5 01       	movw	r30, r10
    29fe:	85 81       	ldd	r24, Z+5	; 0x05
    2a00:	80 ff       	sbrs	r24, 0
    2a02:	43 c1       	rjmp	.+646    	; 0x2c8a <process_action+0x3ac>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2a04:	8f 70       	andi	r24, 0x0F	; 15
    2a06:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    2a08:	81 2f       	mov	r24, r17
    2a0a:	0e 94 3e 13 	call	0x267c	; 0x267c <register_mods>
    2a0e:	90 c1       	rjmp	.+800    	; 0x2d30 <process_action+0x452>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2a10:	ff 20       	and	r15, r15
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <process_action+0x138>
    2a14:	0e c1       	rjmp	.+540    	; 0x2c32 <process_action+0x354>
    2a16:	44 c1       	rjmp	.+648    	; 0x2ca0 <process_action+0x3c2>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2a18:	8d 2d       	mov	r24, r13
    2a1a:	86 95       	lsr	r24
    2a1c:	86 95       	lsr	r24
    2a1e:	83 70       	andi	r24, 0x03	; 3
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	21 f0       	breq	.+8      	; 0x2a2e <process_action+0x150>
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <process_action+0x14e>
    2a2a:	82 c1       	rjmp	.+772    	; 0x2d30 <process_action+0x452>
    2a2c:	0a c0       	rjmp	.+20     	; 0x2a42 <process_action+0x164>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2a2e:	00 23       	and	r16, r16
    2a30:	19 f0       	breq	.+6      	; 0x2a38 <process_action+0x15a>
                        host_system_send(action.usage.code);
    2a32:	c6 01       	movw	r24, r12
    2a34:	93 70       	andi	r25, 0x03	; 3
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <process_action+0x15e>
                    } else {
                        host_system_send(0);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 67 11 	call	0x22ce	; 0x22ce <host_system_send>
    2a40:	77 c1       	rjmp	.+750    	; 0x2d30 <process_action+0x452>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2a42:	00 23       	and	r16, r16
    2a44:	19 f0       	breq	.+6      	; 0x2a4c <process_action+0x16e>
                        host_consumer_send(action.usage.code);
    2a46:	c6 01       	movw	r24, r12
    2a48:	93 70       	andi	r25, 0x03	; 3
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <process_action+0x172>
                    } else {
                        host_consumer_send(0);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	0e 94 7f 11 	call	0x22fe	; 0x22fe <host_consumer_send>
    2a54:	6d c1       	rjmp	.+730    	; 0x2d30 <process_action+0x452>
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2a56:	00 23       	and	r16, r16
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <process_action+0x184>
                mousekey_on(action.key.code);
    2a5a:	8c 2d       	mov	r24, r12
    2a5c:	0e 94 42 22 	call	0x4484	; 0x4484 <mousekey_on>
    2a60:	03 c0       	rjmp	.+6      	; 0x2a68 <process_action+0x18a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2a62:	8c 2d       	mov	r24, r12
    2a64:	0e 94 ac 22 	call	0x4558	; 0x4558 <mousekey_off>
                mousekey_send();
    2a68:	0e 94 40 23 	call	0x4680	; 0x4680 <mousekey_send>
    2a6c:	61 c1       	rjmp	.+706    	; 0x2d30 <process_action+0x452>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2a6e:	8d 2d       	mov	r24, r13
    2a70:	83 70       	andi	r24, 0x03	; 3
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <process_action+0x198>
    2a74:	5e c0       	rjmp	.+188    	; 0x2b32 <process_action+0x254>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2a76:	00 23       	and	r16, r16
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <process_action+0x19e>
    2a7a:	5a c1       	rjmp	.+692    	; 0x2d30 <process_action+0x452>
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a7c:	2c 2d       	mov	r18, r12
    2a7e:	22 95       	swap	r18
    2a80:	26 95       	lsr	r18
    2a82:	27 70       	andi	r18, 0x07	; 7
    2a84:	22 0f       	add	r18, r18
    2a86:	22 0f       	add	r18, r18
    2a88:	8c 2d       	mov	r24, r12
    2a8a:	8f 70       	andi	r24, 0x0F	; 15
    2a8c:	e8 2e       	mov	r14, r24
    2a8e:	ff 24       	eor	r15, r15
    2a90:	00 e0       	ldi	r16, 0x00	; 0
    2a92:	10 e0       	ldi	r17, 0x00	; 0
    2a94:	02 2e       	mov	r0, r18
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <process_action+0x1c2>
    2a98:	ee 0c       	add	r14, r14
    2a9a:	ff 1c       	adc	r15, r15
    2a9c:	00 1f       	adc	r16, r16
    2a9e:	11 1f       	adc	r17, r17
    2aa0:	0a 94       	dec	r0
    2aa2:	d2 f7       	brpl	.-12     	; 0x2a98 <process_action+0x1ba>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2aa4:	c4 fc       	sbrc	r12, 4
    2aa6:	05 c0       	rjmp	.+10     	; 0x2ab2 <process_action+0x1d4>
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	70 e0       	ldi	r23, 0x00	; 0
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <process_action+0x1f2>
    2ab2:	6f e0       	ldi	r22, 0x0F	; 15
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	04 c0       	rjmp	.+8      	; 0x2ac4 <process_action+0x1e6>
    2abc:	66 0f       	add	r22, r22
    2abe:	77 1f       	adc	r23, r23
    2ac0:	88 1f       	adc	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	2a 95       	dec	r18
    2ac6:	d2 f7       	brpl	.-12     	; 0x2abc <process_action+0x1de>
    2ac8:	60 95       	com	r22
    2aca:	70 95       	com	r23
    2acc:	80 95       	com	r24
    2ace:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2ad0:	d6 94       	lsr	r13
    2ad2:	d6 94       	lsr	r13
    2ad4:	f3 e0       	ldi	r31, 0x03	; 3
    2ad6:	df 22       	and	r13, r31
    2ad8:	4d 2d       	mov	r20, r13
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	41 30       	cpi	r20, 0x01	; 1
    2ade:	51 05       	cpc	r21, r1
    2ae0:	a9 f0       	breq	.+42     	; 0x2b0c <process_action+0x22e>
    2ae2:	42 30       	cpi	r20, 0x02	; 2
    2ae4:	51 05       	cpc	r21, r1
    2ae6:	1c f4       	brge	.+6      	; 0x2aee <process_action+0x210>
    2ae8:	45 2b       	or	r20, r21
    2aea:	49 f0       	breq	.+18     	; 0x2afe <process_action+0x220>
    2aec:	21 c1       	rjmp	.+578    	; 0x2d30 <process_action+0x452>
    2aee:	42 30       	cpi	r20, 0x02	; 2
    2af0:	51 05       	cpc	r21, r1
    2af2:	89 f0       	breq	.+34     	; 0x2b16 <process_action+0x238>
    2af4:	43 30       	cpi	r20, 0x03	; 3
    2af6:	51 05       	cpc	r21, r1
    2af8:	09 f0       	breq	.+2      	; 0x2afc <process_action+0x21e>
    2afa:	1a c1       	rjmp	.+564    	; 0x2d30 <process_action+0x452>
    2afc:	13 c0       	rjmp	.+38     	; 0x2b24 <process_action+0x246>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2afe:	6e 29       	or	r22, r14
    2b00:	7f 29       	or	r23, r15
    2b02:	80 2b       	or	r24, r16
    2b04:	91 2b       	or	r25, r17
    2b06:	0e 94 4d 1c 	call	0x389a	; 0x389a <default_layer_and>
    2b0a:	12 c1       	rjmp	.+548    	; 0x2d30 <process_action+0x452>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    2b0c:	6e 29       	or	r22, r14
    2b0e:	7f 29       	or	r23, r15
    2b10:	80 2b       	or	r24, r16
    2b12:	91 2b       	or	r25, r17
    2b14:	0b c0       	rjmp	.+22     	; 0x2b2c <process_action+0x24e>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2b16:	6e 29       	or	r22, r14
    2b18:	7f 29       	or	r23, r15
    2b1a:	80 2b       	or	r24, r16
    2b1c:	91 2b       	or	r25, r17
    2b1e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <default_layer_xor>
    2b22:	06 c1       	rjmp	.+524    	; 0x2d30 <process_action+0x452>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2b24:	0e 94 4d 1c 	call	0x389a	; 0x389a <default_layer_and>
    2b28:	c8 01       	movw	r24, r16
    2b2a:	b7 01       	movw	r22, r14
    2b2c:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <default_layer_or>
    2b30:	ff c0       	rjmp	.+510    	; 0x2d30 <process_action+0x452>
    2b32:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2b34:	00 23       	and	r16, r16
    2b36:	11 f4       	brne	.+4      	; 0x2b3c <process_action+0x25e>
    2b38:	96 95       	lsr	r25
    2b3a:	87 95       	ror	r24
    2b3c:	81 70       	andi	r24, 0x01	; 1
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <process_action+0x264>
    2b40:	f7 c0       	rjmp	.+494    	; 0x2d30 <process_action+0x452>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b42:	2c 2d       	mov	r18, r12
    2b44:	22 95       	swap	r18
    2b46:	26 95       	lsr	r18
    2b48:	27 70       	andi	r18, 0x07	; 7
    2b4a:	22 0f       	add	r18, r18
    2b4c:	22 0f       	add	r18, r18
    2b4e:	8c 2d       	mov	r24, r12
    2b50:	8f 70       	andi	r24, 0x0F	; 15
    2b52:	e8 2e       	mov	r14, r24
    2b54:	ff 24       	eor	r15, r15
    2b56:	00 e0       	ldi	r16, 0x00	; 0
    2b58:	10 e0       	ldi	r17, 0x00	; 0
    2b5a:	02 2e       	mov	r0, r18
    2b5c:	04 c0       	rjmp	.+8      	; 0x2b66 <process_action+0x288>
    2b5e:	ee 0c       	add	r14, r14
    2b60:	ff 1c       	adc	r15, r15
    2b62:	00 1f       	adc	r16, r16
    2b64:	11 1f       	adc	r17, r17
    2b66:	0a 94       	dec	r0
    2b68:	d2 f7       	brpl	.-12     	; 0x2b5e <process_action+0x280>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2b6a:	c4 fc       	sbrc	r12, 4
    2b6c:	05 c0       	rjmp	.+10     	; 0x2b78 <process_action+0x29a>
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0f c0       	rjmp	.+30     	; 0x2b96 <process_action+0x2b8>
    2b78:	6f e0       	ldi	r22, 0x0F	; 15
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	04 c0       	rjmp	.+8      	; 0x2b8a <process_action+0x2ac>
    2b82:	66 0f       	add	r22, r22
    2b84:	77 1f       	adc	r23, r23
    2b86:	88 1f       	adc	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	2a 95       	dec	r18
    2b8c:	d2 f7       	brpl	.-12     	; 0x2b82 <process_action+0x2a4>
    2b8e:	60 95       	com	r22
    2b90:	70 95       	com	r23
    2b92:	80 95       	com	r24
    2b94:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2b96:	d6 94       	lsr	r13
    2b98:	d6 94       	lsr	r13
    2b9a:	23 e0       	ldi	r18, 0x03	; 3
    2b9c:	d2 22       	and	r13, r18
    2b9e:	4d 2d       	mov	r20, r13
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	41 30       	cpi	r20, 0x01	; 1
    2ba4:	51 05       	cpc	r21, r1
    2ba6:	a9 f0       	breq	.+42     	; 0x2bd2 <process_action+0x2f4>
    2ba8:	42 30       	cpi	r20, 0x02	; 2
    2baa:	51 05       	cpc	r21, r1
    2bac:	1c f4       	brge	.+6      	; 0x2bb4 <process_action+0x2d6>
    2bae:	45 2b       	or	r20, r21
    2bb0:	49 f0       	breq	.+18     	; 0x2bc4 <process_action+0x2e6>
    2bb2:	be c0       	rjmp	.+380    	; 0x2d30 <process_action+0x452>
    2bb4:	42 30       	cpi	r20, 0x02	; 2
    2bb6:	51 05       	cpc	r21, r1
    2bb8:	89 f0       	breq	.+34     	; 0x2bdc <process_action+0x2fe>
    2bba:	43 30       	cpi	r20, 0x03	; 3
    2bbc:	51 05       	cpc	r21, r1
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <process_action+0x2e4>
    2bc0:	b7 c0       	rjmp	.+366    	; 0x2d30 <process_action+0x452>
    2bc2:	13 c0       	rjmp	.+38     	; 0x2bea <process_action+0x30c>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2bc4:	6e 29       	or	r22, r14
    2bc6:	7f 29       	or	r23, r15
    2bc8:	80 2b       	or	r24, r16
    2bca:	91 2b       	or	r25, r17
    2bcc:	0e 94 a0 1b 	call	0x3740	; 0x3740 <layer_and>
    2bd0:	af c0       	rjmp	.+350    	; 0x2d30 <process_action+0x452>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    2bd2:	6e 29       	or	r22, r14
    2bd4:	7f 29       	or	r23, r15
    2bd6:	80 2b       	or	r24, r16
    2bd8:	91 2b       	or	r25, r17
    2bda:	0b c0       	rjmp	.+22     	; 0x2bf2 <process_action+0x314>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2bdc:	6e 29       	or	r22, r14
    2bde:	7f 29       	or	r23, r15
    2be0:	80 2b       	or	r24, r16
    2be2:	91 2b       	or	r25, r17
    2be4:	0e 94 8f 1b 	call	0x371e	; 0x371e <layer_xor>
    2be8:	a3 c0       	rjmp	.+326    	; 0x2d30 <process_action+0x452>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2bea:	0e 94 a0 1b 	call	0x3740	; 0x3740 <layer_and>
    2bee:	c8 01       	movw	r24, r16
    2bf0:	b7 01       	movw	r22, r14
    2bf2:	0e 94 b1 1b 	call	0x3762	; 0x3762 <layer_or>
    2bf6:	9c c0       	rjmp	.+312    	; 0x2d30 <process_action+0x452>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2bf8:	80 ef       	ldi	r24, 0xF0	; 240
    2bfa:	c8 16       	cp	r12, r24
    2bfc:	f1 f0       	breq	.+60     	; 0x2c3a <process_action+0x35c>
    2bfe:	8c 15       	cp	r24, r12
    2c00:	20 f0       	brcs	.+8      	; 0x2c0a <process_action+0x32c>
    2c02:	e0 ee       	ldi	r30, 0xE0	; 224
    2c04:	ce 16       	cp	r12, r30
    2c06:	e8 f1       	brcs	.+122    	; 0x2c82 <process_action+0x3a4>
    2c08:	09 c0       	rjmp	.+18     	; 0x2c1c <process_action+0x33e>
    2c0a:	f2 ef       	ldi	r31, 0xF2	; 242
    2c0c:	cf 16       	cp	r12, r31
    2c0e:	51 f1       	breq	.+84     	; 0x2c64 <process_action+0x386>
    2c10:	cf 16       	cp	r12, r31
    2c12:	18 f1       	brcs	.+70     	; 0x2c5a <process_action+0x37c>
    2c14:	23 ef       	ldi	r18, 0xF3	; 243
    2c16:	c2 16       	cp	r12, r18
    2c18:	a1 f5       	brne	.+104    	; 0x2c82 <process_action+0x3a4>
    2c1a:	29 c0       	rjmp	.+82     	; 0x2c6e <process_action+0x390>
    2c1c:	1c 2d       	mov	r17, r12
    2c1e:	1f 70       	andi	r17, 0x0F	; 15
    2c20:	8d 2d       	mov	r24, r13
    2c22:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2c24:	00 23       	and	r16, r16
    2c26:	19 f0       	breq	.+6      	; 0x2c2e <process_action+0x350>
                        layer_on(action.layer_tap.val);
    2c28:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <layer_on>
    2c2c:	ed ce       	rjmp	.-550    	; 0x2a08 <process_action+0x12a>
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
    2c2e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2c32:	81 2f       	mov	r24, r17
    2c34:	0e 94 37 13 	call	0x266e	; 0x266e <unregister_mods>
    2c38:	7b c0       	rjmp	.+246    	; 0x2d30 <process_action+0x452>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2c3a:	00 23       	and	r16, r16
    2c3c:	29 f0       	breq	.+10     	; 0x2c48 <process_action+0x36a>
                        if (tap_count < TAPPING_TOGGLE) {
    2c3e:	84 e0       	ldi	r24, 0x04	; 4
    2c40:	8f 15       	cp	r24, r15
    2c42:	08 f4       	brcc	.+2      	; 0x2c46 <process_action+0x368>
    2c44:	75 c0       	rjmp	.+234    	; 0x2d30 <process_action+0x452>
    2c46:	04 c0       	rjmp	.+8      	; 0x2c50 <process_action+0x372>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2c48:	e5 e0       	ldi	r30, 0x05	; 5
    2c4a:	ef 15       	cp	r30, r15
    2c4c:	08 f4       	brcc	.+2      	; 0x2c50 <process_action+0x372>
    2c4e:	70 c0       	rjmp	.+224    	; 0x2d30 <process_action+0x452>
                            layer_invert(action.layer_tap.val);
    2c50:	8d 2d       	mov	r24, r13
    2c52:	8f 71       	andi	r24, 0x1F	; 31
    2c54:	0e 94 c2 1b 	call	0x3784	; 0x3784 <layer_invert>
    2c58:	6b c0       	rjmp	.+214    	; 0x2d30 <process_action+0x452>
    2c5a:	8d 2d       	mov	r24, r13
    2c5c:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c5e:	00 23       	and	r16, r16
    2c60:	29 f1       	breq	.+74     	; 0x2cac <process_action+0x3ce>
    2c62:	19 c0       	rjmp	.+50     	; 0x2c96 <process_action+0x3b8>
    2c64:	8d 2d       	mov	r24, r13
    2c66:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2c68:	00 23       	and	r16, r16
    2c6a:	a9 f0       	breq	.+42     	; 0x2c96 <process_action+0x3b8>
    2c6c:	1f c0       	rjmp	.+62     	; 0x2cac <process_action+0x3ce>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c6e:	00 23       	and	r16, r16
    2c70:	29 f0       	breq	.+10     	; 0x2c7c <process_action+0x39e>
    2c72:	8d 2d       	mov	r24, r13
    2c74:	8f 71       	andi	r24, 0x1F	; 31
    2c76:	0e 94 1a 1c 	call	0x3834	; 0x3834 <layer_move>
    2c7a:	5a c0       	rjmp	.+180    	; 0x2d30 <process_action+0x452>
    2c7c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <layer_clear>
    2c80:	57 c0       	rjmp	.+174    	; 0x2d30 <process_action+0x452>
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2c82:	00 23       	and	r16, r16
    2c84:	59 f0       	breq	.+22     	; 0x2c9c <process_action+0x3be>
                        if (tap_count > 0) {
    2c86:	ff 20       	and	r15, r15
    2c88:	21 f0       	breq	.+8      	; 0x2c92 <process_action+0x3b4>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c8a:	8c 2d       	mov	r24, r12
    2c8c:	0e 94 98 13 	call	0x2730	; 0x2730 <register_code>
    2c90:	4f c0       	rjmp	.+158    	; 0x2d30 <process_action+0x452>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    2c92:	8d 2d       	mov	r24, r13
    2c94:	8f 71       	andi	r24, 0x1F	; 31
    2c96:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <layer_on>
    2c9a:	4a c0       	rjmp	.+148    	; 0x2d30 <process_action+0x452>
                        }
                    } else {
                        if (tap_count > 0) {
    2c9c:	ff 20       	and	r15, r15
    2c9e:	21 f0       	breq	.+8      	; 0x2ca8 <process_action+0x3ca>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2ca0:	8c 2d       	mov	r24, r12
    2ca2:	0e 94 45 13 	call	0x268a	; 0x268a <unregister_code>
    2ca6:	44 c0       	rjmp	.+136    	; 0x2d30 <process_action+0x452>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    2ca8:	8d 2d       	mov	r24, r13
    2caa:	8f 71       	andi	r24, 0x1F	; 31
    2cac:	0e 94 de 1b 	call	0x37bc	; 0x37bc <layer_off>
    2cb0:	3f c0       	rjmp	.+126    	; 0x2d30 <process_action+0x452>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2cb2:	ff e0       	ldi	r31, 0x0F	; 15
    2cb4:	df 22       	and	r13, r31
    2cb6:	c5 01       	movw	r24, r10
    2cb8:	6c 2d       	mov	r22, r12
    2cba:	4d 2d       	mov	r20, r13
    2cbc:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <action_get_macro>
    2cc0:	0e 94 a5 1a 	call	0x354a	; 0x354a <action_macro_play>
    2cc4:	35 c0       	rjmp	.+106    	; 0x2d30 <process_action+0x452>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2cc6:	2f e0       	ldi	r18, 0x0F	; 15
    2cc8:	d2 22       	and	r13, r18
    2cca:	c5 01       	movw	r24, r10
    2ccc:	6c 2d       	mov	r22, r12
    2cce:	4d 2d       	mov	r20, r13
    2cd0:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <action_function>
    2cd4:	2d c0       	rjmp	.+90     	; 0x2d30 <process_action+0x452>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	0e 94 3b 1b 	call	0x3676	; 0x3676 <layer_switch_get_action>
    2cde:	6c 01       	movw	r12, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2ce0:	0e 94 3a 1b 	call	0x3674	; 0x3674 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2ce4:	0e 94 39 1b 	call	0x3672	; 0x3672 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2ce8:	8d 2d       	mov	r24, r13
    2cea:	82 95       	swap	r24
    2cec:	8f 70       	andi	r24, 0x0F	; 15
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	85 30       	cpi	r24, 0x05	; 5
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <process_action+0x41a>
    2cf6:	af ce       	rjmp	.-674    	; 0x2a56 <process_action+0x178>
    2cf8:	86 30       	cpi	r24, 0x06	; 6
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	54 f4       	brge	.+20     	; 0x2d12 <process_action+0x434>
    2cfe:	84 30       	cpi	r24, 0x04	; 4
    2d00:	91 05       	cpc	r25, r1
    2d02:	0c f0       	brlt	.+2      	; 0x2d06 <process_action+0x428>
    2d04:	89 ce       	rjmp	.-750    	; 0x2a18 <process_action+0x13a>
    2d06:	2d 2d       	mov	r18, r13
    2d08:	20 7f       	andi	r18, 0xF0	; 240
    2d0a:	02 97       	sbiw	r24, 0x02	; 2
    2d0c:	0c f0       	brlt	.+2      	; 0x2d10 <process_action+0x432>
    2d0e:	3f ce       	rjmp	.-898    	; 0x298e <process_action+0xb0>
    2d10:	1e ce       	rjmp	.-964    	; 0x294e <process_action+0x70>
    2d12:	8c 30       	cpi	r24, 0x0C	; 12
    2d14:	91 05       	cpc	r25, r1
    2d16:	3c f4       	brge	.+14     	; 0x2d26 <process_action+0x448>
    2d18:	8a 30       	cpi	r24, 0x0A	; 10
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	0c f0       	brlt	.+2      	; 0x2d20 <process_action+0x442>
    2d1e:	6c cf       	rjmp	.-296    	; 0x2bf8 <process_action+0x31a>
    2d20:	08 97       	sbiw	r24, 0x08	; 8
    2d22:	31 f4       	brne	.+12     	; 0x2d30 <process_action+0x452>
    2d24:	a4 ce       	rjmp	.-696    	; 0x2a6e <process_action+0x190>
    2d26:	8c 30       	cpi	r24, 0x0C	; 12
    2d28:	91 05       	cpc	r25, r1
    2d2a:	19 f2       	breq	.-122    	; 0x2cb2 <process_action+0x3d4>
    2d2c:	0f 97       	sbiw	r24, 0x0f	; 15
    2d2e:	59 f2       	breq	.-106    	; 0x2cc6 <process_action+0x3e8>
            break;
#endif
        default:
            break;
    }
}
    2d30:	2a 96       	adiw	r28, 0x0a	; 10
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	ff 90       	pop	r15
    2d46:	ef 90       	pop	r14
    2d48:	df 90       	pop	r13
    2d4a:	cf 90       	pop	r12
    2d4c:	bf 90       	pop	r11
    2d4e:	af 90       	pop	r10
    2d50:	08 95       	ret

00002d52 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	2b 97       	sbiw	r28, 0x0b	; 11
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	34 2f       	mov	r19, r20
    2d68:	4f 83       	std	Y+7, r20	; 0x07
    2d6a:	25 2f       	mov	r18, r21
    2d6c:	58 87       	std	Y+8, r21	; 0x08
    2d6e:	69 87       	std	Y+9, r22	; 0x09
    2d70:	7a 87       	std	Y+10, r23	; 0x0a
    2d72:	8b 87       	std	Y+11, r24	; 0x0b
    2d74:	47 2f       	mov	r20, r23
    2d76:	58 2f       	mov	r21, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2d78:	fe 01       	movw	r30, r28
    2d7a:	31 96       	adiw	r30, 0x01	; 1
    2d7c:	86 e0       	ldi	r24, 0x06	; 6
    2d7e:	df 01       	movw	r26, r30
    2d80:	1d 92       	st	X+, r1
    2d82:	8a 95       	dec	r24
    2d84:	e9 f7       	brne	.-6      	; 0x2d80 <action_exec+0x2e>
    2d86:	6b 83       	std	Y+3, r22	; 0x03
    2d88:	39 83       	std	Y+1, r19	; 0x01
    2d8a:	2a 83       	std	Y+2, r18	; 0x02
    2d8c:	4c 83       	std	Y+4, r20	; 0x04
    2d8e:	5d 83       	std	Y+5, r21	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2d90:	43 2f       	mov	r20, r19
    2d92:	52 2f       	mov	r21, r18
    2d94:	8d 81       	ldd	r24, Y+5	; 0x05
    2d96:	9e 81       	ldd	r25, Y+6	; 0x06
    2d98:	0e 94 e6 19 	call	0x33cc	; 0x33cc <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2d9c:	2b 96       	adiw	r28, 0x0b	; 11
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2db2:	00 91 53 01 	lds	r16, 0x0153
    2db6:	15 c0       	rjmp	.+42     	; 0x2de2 <debug_waiting_buffer+0x34>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2db8:	10 e0       	ldi	r17, 0x00	; 0
    2dba:	f8 01       	movw	r30, r16
    2dbc:	ee 0f       	add	r30, r30
    2dbe:	ff 1f       	adc	r31, r31
    2dc0:	e0 0f       	add	r30, r16
    2dc2:	f1 1f       	adc	r31, r17
    2dc4:	ee 0f       	add	r30, r30
    2dc6:	ff 1f       	adc	r31, r31
    2dc8:	ec 5a       	subi	r30, 0xAC	; 172
    2dca:	fe 4f       	sbci	r31, 0xFE	; 254
    2dcc:	40 81       	ld	r20, Z
    2dce:	51 81       	ldd	r21, Z+1	; 0x01
    2dd0:	62 81       	ldd	r22, Z+2	; 0x02
    2dd2:	73 81       	ldd	r23, Z+3	; 0x03
    2dd4:	84 81       	ldd	r24, Z+4	; 0x04
    2dd6:	95 81       	ldd	r25, Z+5	; 0x05
    2dd8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ddc:	0f 5f       	subi	r16, 0xFF	; 255
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	07 70       	andi	r16, 0x07	; 7
    2de2:	80 91 52 01 	lds	r24, 0x0152
    2de6:	08 17       	cp	r16, r24
    2de8:	39 f7       	brne	.-50     	; 0x2db8 <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
    2dee:	08 95       	ret

00002df0 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2df0:	40 91 4c 01 	lds	r20, 0x014C
    2df4:	50 91 4d 01 	lds	r21, 0x014D
    2df8:	60 91 4e 01 	lds	r22, 0x014E
    2dfc:	70 91 4f 01 	lds	r23, 0x014F
    2e00:	80 91 50 01 	lds	r24, 0x0150
    2e04:	90 91 51 01 	lds	r25, 0x0151
    2e08:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <debug_record>
}
    2e0c:	08 95       	ret

00002e0e <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2e16:	80 91 51 01 	lds	r24, 0x0151
    2e1a:	82 95       	swap	r24
    2e1c:	8f 70       	andi	r24, 0x0F	; 15
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <waiting_buffer_scan_tap+0x14>
    2e20:	6d c0       	rjmp	.+218    	; 0x2efc <waiting_buffer_scan_tap+0xee>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2e22:	80 91 4e 01 	lds	r24, 0x014E
    2e26:	88 23       	and	r24, r24
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <waiting_buffer_scan_tap+0x1e>
    2e2a:	68 c0       	rjmp	.+208    	; 0x2efc <waiting_buffer_scan_tap+0xee>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e2c:	60 91 53 01 	lds	r22, 0x0153
    2e30:	00 91 52 01 	lds	r16, 0x0152
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e34:	40 91 4f 01 	lds	r20, 0x014F
    2e38:	50 91 50 01 	lds	r21, 0x0150
    2e3c:	10 91 4d 01 	lds	r17, 0x014D
    2e40:	70 91 4c 01 	lds	r23, 0x014C
    2e44:	ea 01       	movw	r28, r20
    2e46:	c0 95       	com	r28
    2e48:	d0 95       	com	r29
    2e4a:	55 c0       	rjmp	.+170    	; 0x2ef6 <waiting_buffer_scan_tap+0xe8>
    2e4c:	41 15       	cp	r20, r1
    2e4e:	51 05       	cpc	r21, r1
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <waiting_buffer_scan_tap+0x46>
    2e52:	4f c0       	rjmp	.+158    	; 0x2ef2 <waiting_buffer_scan_tap+0xe4>
    2e54:	1f 3f       	cpi	r17, 0xFF	; 255
    2e56:	49 f4       	brne	.+18     	; 0x2e6a <waiting_buffer_scan_tap+0x5c>
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	7f 3f       	cpi	r23, 0xFF	; 255
    2e5e:	11 f4       	brne	.+4      	; 0x2e64 <waiting_buffer_scan_tap+0x56>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	88 23       	and	r24, r24
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <waiting_buffer_scan_tap+0x5c>
    2e68:	44 c0       	rjmp	.+136    	; 0x2ef2 <waiting_buffer_scan_tap+0xe4>
    2e6a:	26 2f       	mov	r18, r22
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	f9 01       	movw	r30, r18
    2e70:	ee 0f       	add	r30, r30
    2e72:	ff 1f       	adc	r31, r31
    2e74:	e2 0f       	add	r30, r18
    2e76:	f3 1f       	adc	r31, r19
    2e78:	df 01       	movw	r26, r30
    2e7a:	aa 0f       	add	r26, r26
    2e7c:	bb 1f       	adc	r27, r27
    2e7e:	ac 5a       	subi	r26, 0xAC	; 172
    2e80:	be 4f       	sbci	r27, 0xFE	; 254
    2e82:	11 96       	adiw	r26, 0x01	; 1
    2e84:	8c 91       	ld	r24, X
    2e86:	11 97       	sbiw	r26, 0x01	; 1
    2e88:	18 17       	cp	r17, r24
    2e8a:	99 f5       	brne	.+102    	; 0x2ef2 <waiting_buffer_scan_tap+0xe4>
    2e8c:	8c 91       	ld	r24, X
    2e8e:	78 17       	cp	r23, r24
    2e90:	81 f5       	brne	.+96     	; 0x2ef2 <waiting_buffer_scan_tap+0xe4>
    2e92:	ee 0f       	add	r30, r30
    2e94:	ff 1f       	adc	r31, r31
    2e96:	ea 5a       	subi	r30, 0xAA	; 170
    2e98:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9a:	80 81       	ld	r24, Z
    2e9c:	88 23       	and	r24, r24
    2e9e:	49 f5       	brne	.+82     	; 0x2ef2 <waiting_buffer_scan_tap+0xe4>
    2ea0:	13 96       	adiw	r26, 0x03	; 3
    2ea2:	8d 91       	ld	r24, X+
    2ea4:	9c 91       	ld	r25, X
    2ea6:	14 97       	sbiw	r26, 0x04	; 4
    2ea8:	84 17       	cp	r24, r20
    2eaa:	95 07       	cpc	r25, r21
    2eac:	18 f0       	brcs	.+6      	; 0x2eb4 <waiting_buffer_scan_tap+0xa6>
    2eae:	84 1b       	sub	r24, r20
    2eb0:	95 0b       	sbc	r25, r21
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <waiting_buffer_scan_tap+0xaa>
    2eb4:	8c 0f       	add	r24, r28
    2eb6:	9d 1f       	adc	r25, r29
    2eb8:	88 3c       	cpi	r24, 0xC8	; 200
    2eba:	91 05       	cpc	r25, r1
    2ebc:	d0 f4       	brcc	.+52     	; 0x2ef2 <waiting_buffer_scan_tap+0xe4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
    2ebe:	80 91 51 01 	lds	r24, 0x0151
    2ec2:	8f 70       	andi	r24, 0x0F	; 15
    2ec4:	80 61       	ori	r24, 0x10	; 16
    2ec6:	80 93 51 01 	sts	0x0151, r24
            waiting_buffer[i].tap.count = 1;
    2eca:	f9 01       	movw	r30, r18
    2ecc:	ee 0f       	add	r30, r30
    2ece:	ff 1f       	adc	r31, r31
    2ed0:	e2 0f       	add	r30, r18
    2ed2:	f3 1f       	adc	r31, r19
    2ed4:	ee 0f       	add	r30, r30
    2ed6:	ff 1f       	adc	r31, r31
    2ed8:	e7 5a       	subi	r30, 0xA7	; 167
    2eda:	fe 4f       	sbci	r31, 0xFE	; 254
    2edc:	80 81       	ld	r24, Z
    2ede:	8f 70       	andi	r24, 0x0F	; 15
    2ee0:	80 61       	ori	r24, 0x10	; 16
    2ee2:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2ee4:	8c e4       	ldi	r24, 0x4C	; 76
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2eec:	0e 94 d7 16 	call	0x2dae	; 0x2dae <debug_waiting_buffer>
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <waiting_buffer_scan_tap+0xee>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ef2:	6f 5f       	subi	r22, 0xFF	; 255
    2ef4:	67 70       	andi	r22, 0x07	; 7
    2ef6:	60 17       	cp	r22, r16
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <waiting_buffer_scan_tap+0xee>
    2efa:	a8 cf       	rjmp	.-176    	; 0x2e4c <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	08 95       	ret

00002f06 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	6b 97       	sbiw	r28, 0x1b	; 27
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	cd bf       	out	0x3d, r28	; 61
    2f24:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2f26:	dc 01       	movw	r26, r24
    2f28:	12 96       	adiw	r26, 0x02	; 2
    2f2a:	dc 90       	ld	r13, X
    2f2c:	12 97       	sbiw	r26, 0x02	; 2
    2f2e:	4c 91       	ld	r20, X
    2f30:	11 96       	adiw	r26, 0x01	; 1
    2f32:	5c 91       	ld	r21, X
    2f34:	11 97       	sbiw	r26, 0x01	; 1
    2f36:	13 96       	adiw	r26, 0x03	; 3
    2f38:	ed 90       	ld	r14, X+
    2f3a:	fc 90       	ld	r15, X
    2f3c:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2f3e:	20 91 4f 01 	lds	r18, 0x014F
    2f42:	30 91 50 01 	lds	r19, 0x0150
    2f46:	60 91 4d 01 	lds	r22, 0x014D
    2f4a:	70 91 4c 01 	lds	r23, 0x014C
    2f4e:	21 15       	cp	r18, r1
    2f50:	31 05       	cpc	r19, r1
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <process_tapping+0x50>
    2f54:	db c1       	rjmp	.+950    	; 0x330c <process_tapping+0x406>
    2f56:	6f 3f       	cpi	r22, 0xFF	; 255
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <process_tapping+0x56>
    2f5a:	03 c2       	rjmp	.+1030   	; 0x3362 <process_tapping+0x45c>
    2f5c:	7f 3f       	cpi	r23, 0xFF	; 255
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <process_tapping+0x5c>
    2f60:	00 c2       	rjmp	.+1024   	; 0x3362 <process_tapping+0x45c>
    2f62:	d4 c1       	rjmp	.+936    	; 0x330c <process_tapping+0x406>
        if (WITHIN_TAPPING_TERM(event)) {
    2f64:	e2 16       	cp	r14, r18
    2f66:	f3 06       	cpc	r15, r19
    2f68:	40 f0       	brcs	.+16     	; 0x2f7a <process_tapping+0x74>
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	82 1b       	sub	r24, r18
    2f6e:	93 0b       	sbc	r25, r19
    2f70:	88 3c       	cpi	r24, 0xC8	; 200
    2f72:	91 05       	cpc	r25, r1
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <process_tapping+0x72>
    2f76:	ee c0       	rjmp	.+476    	; 0x3154 <process_tapping+0x24e>
    2f78:	08 c0       	rjmp	.+16     	; 0x2f8a <process_tapping+0x84>
    2f7a:	20 95       	com	r18
    2f7c:	30 95       	com	r19
    2f7e:	2e 0d       	add	r18, r14
    2f80:	3f 1d       	adc	r19, r15
    2f82:	28 3c       	cpi	r18, 0xC8	; 200
    2f84:	31 05       	cpc	r19, r1
    2f86:	08 f0       	brcs	.+2      	; 0x2f8a <process_tapping+0x84>
    2f88:	e5 c0       	rjmp	.+458    	; 0x3154 <process_tapping+0x24e>
            if (tapping_key.tap.count == 0) {
    2f8a:	80 91 51 01 	lds	r24, 0x0151
    2f8e:	80 7f       	andi	r24, 0xF0	; 240
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <process_tapping+0x8e>
    2f92:	95 c0       	rjmp	.+298    	; 0x30be <process_tapping+0x1b8>
    2f94:	6f 3f       	cpi	r22, 0xFF	; 255
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <process_tapping+0x94>
    2f98:	ea c1       	rjmp	.+980    	; 0x336e <process_tapping+0x468>
    2f9a:	7f 3f       	cpi	r23, 0xFF	; 255
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <process_tapping+0x9a>
    2f9e:	e7 c1       	rjmp	.+974    	; 0x336e <process_tapping+0x468>
    2fa0:	15 c0       	rjmp	.+42     	; 0x2fcc <process_tapping+0xc6>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fa2:	74 17       	cp	r23, r20
    2fa4:	99 f4       	brne	.+38     	; 0x2fcc <process_tapping+0xc6>
    2fa6:	dd 20       	and	r13, r13
    2fa8:	89 f4       	brne	.+34     	; 0x2fcc <process_tapping+0xc6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2faa:	80 91 51 01 	lds	r24, 0x0151
    2fae:	8f 70       	andi	r24, 0x0F	; 15
    2fb0:	80 61       	ori	r24, 0x10	; 16
    2fb2:	80 93 51 01 	sts	0x0151, r24
                    debug_tapping_key();
    2fb6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <debug_tapping_key>
                    process_action(&tapping_key);
    2fba:	8c e4       	ldi	r24, 0x4C	; 76
    2fbc:	91 e0       	ldi	r25, 0x01	; 1
    2fbe:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2fc2:	80 91 51 01 	lds	r24, 0x0151
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	85 83       	std	Z+5, r24	; 0x05
    2fca:	bc c1       	rjmp	.+888    	; 0x3344 <process_tapping+0x43e>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2fcc:	fd 82       	std	Y+5, r15	; 0x05
    2fce:	ec 82       	std	Y+4, r14	; 0x04
    2fd0:	5a 83       	std	Y+2, r21	; 0x02
    2fd2:	49 83       	std	Y+1, r20	; 0x01
    2fd4:	db 82       	std	Y+3, r13	; 0x03
    2fd6:	de 01       	movw	r26, r28
    2fd8:	16 96       	adiw	r26, 0x06	; 6
    2fda:	fe 01       	movw	r30, r28
    2fdc:	31 96       	adiw	r30, 0x01	; 1
    2fde:	85 e0       	ldi	r24, 0x05	; 5
    2fe0:	01 90       	ld	r0, Z+
    2fe2:	0d 92       	st	X+, r0
    2fe4:	81 50       	subi	r24, 0x01	; 1
    2fe6:	e1 f7       	brne	.-8      	; 0x2fe0 <process_tapping+0xda>
    2fe8:	68 85       	ldd	r22, Y+8	; 0x08
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2fea:	de 01       	movw	r26, r28
    2fec:	1b 96       	adiw	r26, 0x0b	; 11
    2fee:	fe 01       	movw	r30, r28
    2ff0:	36 96       	adiw	r30, 0x06	; 6
    2ff2:	85 e0       	ldi	r24, 0x05	; 5
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	0d 92       	st	X+, r0
    2ff8:	81 50       	subi	r24, 0x01	; 1
    2ffa:	e1 f7       	brne	.-8      	; 0x2ff4 <process_tapping+0xee>
    2ffc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ffe:	3b 85       	ldd	r19, Y+11	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3000:	8e 85       	ldd	r24, Y+14	; 0x0e
    3002:	9f 85       	ldd	r25, Y+15	; 0x0f
    3004:	89 2b       	or	r24, r25
    3006:	09 f4       	brne	.+2      	; 0x300a <process_tapping+0x104>
    3008:	51 c0       	rjmp	.+162    	; 0x30ac <process_tapping+0x1a6>
    300a:	2f 3f       	cpi	r18, 0xFF	; 255
    300c:	09 f0       	breq	.+2      	; 0x3010 <process_tapping+0x10a>
    300e:	b3 c1       	rjmp	.+870    	; 0x3376 <process_tapping+0x470>
    3010:	3f 3f       	cpi	r19, 0xFF	; 255
    3012:	09 f0       	breq	.+2      	; 0x3016 <process_tapping+0x110>
    3014:	b0 c1       	rjmp	.+864    	; 0x3376 <process_tapping+0x470>
    3016:	4a c0       	rjmp	.+148    	; 0x30ac <process_tapping+0x1a6>
    3018:	fd 82       	std	Y+5, r15	; 0x05
    301a:	ec 82       	std	Y+4, r14	; 0x04
    301c:	5a 83       	std	Y+2, r21	; 0x02
    301e:	49 83       	std	Y+1, r20	; 0x01
    3020:	db 82       	std	Y+3, r13	; 0x03
    3022:	de 01       	movw	r26, r28
    3024:	1b 96       	adiw	r26, 0x0b	; 11
    3026:	fe 01       	movw	r30, r28
    3028:	31 96       	adiw	r30, 0x01	; 1
    302a:	85 e0       	ldi	r24, 0x05	; 5
    302c:	01 90       	ld	r0, Z+
    302e:	0d 92       	st	X+, r0
    3030:	81 50       	subi	r24, 0x01	; 1
    3032:	e1 f7       	brne	.-8      	; 0x302c <process_tapping+0x126>
    3034:	fc 84       	ldd	r15, Y+12	; 0x0c
    3036:	7b 85       	ldd	r23, Y+11	; 0x0b
    3038:	6d 85       	ldd	r22, Y+13	; 0x0d
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    303a:	80 91 53 01 	lds	r24, 0x0153
    303e:	90 91 52 01 	lds	r25, 0x0152
    3042:	1f c0       	rjmp	.+62     	; 0x3082 <process_tapping+0x17c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	f9 01       	movw	r30, r18
    304a:	ee 0f       	add	r30, r30
    304c:	ff 1f       	adc	r31, r31
    304e:	e2 0f       	add	r30, r18
    3050:	f3 1f       	adc	r31, r19
    3052:	df 01       	movw	r26, r30
    3054:	aa 0f       	add	r26, r26
    3056:	bb 1f       	adc	r27, r27
    3058:	ac 5a       	subi	r26, 0xAC	; 172
    305a:	be 4f       	sbci	r27, 0xFE	; 254
    305c:	11 96       	adiw	r26, 0x01	; 1
    305e:	8c 91       	ld	r24, X
    3060:	11 97       	sbiw	r26, 0x01	; 1
    3062:	f8 16       	cp	r15, r24
    3064:	51 f4       	brne	.+20     	; 0x307a <process_tapping+0x174>
    3066:	8c 91       	ld	r24, X
    3068:	78 17       	cp	r23, r24
    306a:	39 f4       	brne	.+14     	; 0x307a <process_tapping+0x174>
    306c:	ee 0f       	add	r30, r30
    306e:	ff 1f       	adc	r31, r31
    3070:	ea 5a       	subi	r30, 0xAA	; 170
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	80 81       	ld	r24, Z
    3076:	68 17       	cp	r22, r24
    3078:	c9 f4       	brne	.+50     	; 0x30ac <process_tapping+0x1a6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    307a:	2f 5f       	subi	r18, 0xFF	; 255
    307c:	3f 4f       	sbci	r19, 0xFF	; 255
    307e:	82 2f       	mov	r24, r18
    3080:	87 70       	andi	r24, 0x07	; 7
    3082:	89 17       	cp	r24, r25
    3084:	f9 f6       	brne	.-66     	; 0x3044 <process_tapping+0x13e>
    3086:	8d c1       	rjmp	.+794    	; 0x33a2 <process_tapping+0x49c>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3088:	9f 70       	andi	r25, 0x0F	; 15
    308a:	59 f0       	breq	.+22     	; 0x30a2 <process_tapping+0x19c>
    308c:	44 23       	and	r20, r20
    308e:	49 f4       	brne	.+18     	; 0x30a2 <process_tapping+0x19c>
    3090:	59 c1       	rjmp	.+690    	; 0x3344 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3092:	9f 70       	andi	r25, 0x0F	; 15
    3094:	31 f0       	breq	.+12     	; 0x30a2 <process_tapping+0x19c>
    3096:	d8 01       	movw	r26, r16
    3098:	15 96       	adiw	r26, 0x05	; 5
    309a:	8c 91       	ld	r24, X
    309c:	80 7f       	andi	r24, 0xF0	; 240
    309e:	09 f4       	brne	.+2      	; 0x30a2 <process_tapping+0x19c>
    30a0:	51 c1       	rjmp	.+674    	; 0x3344 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
    30a2:	40 5e       	subi	r20, 0xE0	; 224
    30a4:	48 30       	cpi	r20, 0x08	; 8
    30a6:	08 f4       	brcc	.+2      	; 0x30aa <process_tapping+0x1a4>
    30a8:	4d c1       	rjmp	.+666    	; 0x3344 <process_tapping+0x43e>
    30aa:	48 c1       	rjmp	.+656    	; 0x333c <process_tapping+0x436>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    30ac:	dd 20       	and	r13, r13
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <process_tapping+0x1ac>
    30b0:	49 c1       	rjmp	.+658    	; 0x3344 <process_tapping+0x43e>
                        tapping_key.tap.interrupted = true;
    30b2:	80 91 51 01 	lds	r24, 0x0151
    30b6:	81 60       	ori	r24, 0x01	; 1
    30b8:	80 93 51 01 	sts	0x0151, r24
    30bc:	43 c1       	rjmp	.+646    	; 0x3344 <process_tapping+0x43e>
    30be:	6f 3f       	cpi	r22, 0xFF	; 255
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <process_tapping+0x1be>
    30c2:	5d c1       	rjmp	.+698    	; 0x337e <process_tapping+0x478>
    30c4:	7f 3f       	cpi	r23, 0xFF	; 255
    30c6:	09 f0       	breq	.+2      	; 0x30ca <process_tapping+0x1c4>
    30c8:	5a c1       	rjmp	.+692    	; 0x337e <process_tapping+0x478>
    30ca:	14 c0       	rjmp	.+40     	; 0x30f4 <process_tapping+0x1ee>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30cc:	74 17       	cp	r23, r20
    30ce:	91 f4       	brne	.+36     	; 0x30f4 <process_tapping+0x1ee>
    30d0:	dd 20       	and	r13, r13
    30d2:	81 f4       	brne	.+32     	; 0x30f4 <process_tapping+0x1ee>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    30d4:	80 91 51 01 	lds	r24, 0x0151
    30d8:	f8 01       	movw	r30, r16
    30da:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    30dc:	c8 01       	movw	r24, r16
    30de:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>
                    tapping_key = *keyp;
    30e2:	ac e4       	ldi	r26, 0x4C	; 76
    30e4:	b1 e0       	ldi	r27, 0x01	; 1
    30e6:	f8 01       	movw	r30, r16
    30e8:	86 e0       	ldi	r24, 0x06	; 6
    30ea:	01 90       	ld	r0, Z+
    30ec:	0d 92       	st	X+, r0
    30ee:	81 50       	subi	r24, 0x01	; 1
    30f0:	e1 f7       	brne	.-8      	; 0x30ea <process_tapping+0x1e4>
    30f2:	20 c1       	rjmp	.+576    	; 0x3334 <process_tapping+0x42e>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    30f4:	5a 83       	std	Y+2, r21	; 0x02
    30f6:	49 83       	std	Y+1, r20	; 0x01
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	9a 81       	ldd	r25, Y+2	; 0x02
    30fc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <is_tap_key>
    3100:	88 23       	and	r24, r24
    3102:	09 f4       	brne	.+2      	; 0x3106 <process_tapping+0x200>
    3104:	1b c1       	rjmp	.+566    	; 0x333c <process_tapping+0x436>
    3106:	dd 20       	and	r13, r13
    3108:	09 f4       	brne	.+2      	; 0x310c <process_tapping+0x206>
    310a:	18 c1       	rjmp	.+560    	; 0x333c <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    310c:	30 91 51 01 	lds	r19, 0x0151
    3110:	83 2f       	mov	r24, r19
    3112:	82 95       	swap	r24
    3114:	8f 70       	andi	r24, 0x0F	; 15
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	02 97       	sbiw	r24, 0x02	; 2
    311a:	9c f0       	brlt	.+38     	; 0x3142 <process_tapping+0x23c>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    311c:	90 91 4d 01 	lds	r25, 0x014D
    3120:	20 91 4c 01 	lds	r18, 0x014C
    3124:	fe 01       	movw	r30, r28
    3126:	70 96       	adiw	r30, 0x10	; 16
    3128:	86 e0       	ldi	r24, 0x06	; 6
    312a:	df 01       	movw	r26, r30
    312c:	1d 92       	st	X+, r1
    312e:	8a 95       	dec	r24
    3130:	e9 f7       	brne	.-6      	; 0x312c <process_tapping+0x226>
    3132:	99 8b       	std	Y+17, r25	; 0x11
    3134:	28 8b       	std	Y+16, r18	; 0x10
    3136:	fc 8a       	std	Y+20, r15	; 0x14
    3138:	eb 8a       	std	Y+19, r14	; 0x13
    313a:	3d 8b       	std	Y+21, r19	; 0x15
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    313c:	cf 01       	movw	r24, r30
    313e:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    3142:	ac e4       	ldi	r26, 0x4C	; 76
    3144:	b1 e0       	ldi	r27, 0x01	; 1
    3146:	f8 01       	movw	r30, r16
    3148:	86 e0       	ldi	r24, 0x06	; 6
    314a:	01 90       	ld	r0, Z+
    314c:	0d 92       	st	X+, r0
    314e:	81 50       	subi	r24, 0x01	; 1
    3150:	e1 f7       	brne	.-8      	; 0x314a <process_tapping+0x244>
    3152:	ee c0       	rjmp	.+476    	; 0x3330 <process_tapping+0x42a>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3154:	80 91 51 01 	lds	r24, 0x0151
    3158:	80 7f       	andi	r24, 0xF0	; 240
    315a:	a9 f4       	brne	.+42     	; 0x3186 <process_tapping+0x280>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    315c:	7e 2d       	mov	r23, r14
    315e:	fd 82       	std	Y+5, r15	; 0x05
    3160:	ec 82       	std	Y+4, r14	; 0x04
    3162:	5a 83       	std	Y+2, r21	; 0x02
    3164:	49 83       	std	Y+1, r20	; 0x01
    3166:	db 82       	std	Y+3, r13	; 0x03
    3168:	6d 2d       	mov	r22, r13
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <debug_event>
                process_action(&tapping_key);
    3170:	0c e4       	ldi	r16, 0x4C	; 76
    3172:	11 e0       	ldi	r17, 0x01	; 1
    3174:	c8 01       	movw	r24, r16
    3176:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>
                tapping_key = (keyrecord_t){};
    317a:	86 e0       	ldi	r24, 0x06	; 6
    317c:	f8 01       	movw	r30, r16
    317e:	11 92       	st	Z+, r1
    3180:	8a 95       	dec	r24
    3182:	e9 f7       	brne	.-6      	; 0x317e <process_tapping+0x278>
    3184:	c0 c0       	rjmp	.+384    	; 0x3306 <process_tapping+0x400>
    3186:	6f 3f       	cpi	r22, 0xFF	; 255
    3188:	09 f0       	breq	.+2      	; 0x318c <process_tapping+0x286>
    318a:	fd c0       	rjmp	.+506    	; 0x3386 <process_tapping+0x480>
    318c:	7f 3f       	cpi	r23, 0xFF	; 255
    318e:	09 f0       	breq	.+2      	; 0x3192 <process_tapping+0x28c>
    3190:	fa c0       	rjmp	.+500    	; 0x3386 <process_tapping+0x480>
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <process_tapping+0x2b6>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3194:	74 17       	cp	r23, r20
    3196:	91 f4       	brne	.+36     	; 0x31bc <process_tapping+0x2b6>
    3198:	dd 20       	and	r13, r13
    319a:	81 f4       	brne	.+32     	; 0x31bc <process_tapping+0x2b6>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    319c:	80 91 51 01 	lds	r24, 0x0151
    31a0:	d8 01       	movw	r26, r16
    31a2:	15 96       	adiw	r26, 0x05	; 5
    31a4:	8c 93       	st	X, r24
                    process_action(keyp);
    31a6:	c8 01       	movw	r24, r16
    31a8:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>
                    tapping_key = (keyrecord_t){};
    31ac:	ec e4       	ldi	r30, 0x4C	; 76
    31ae:	f1 e0       	ldi	r31, 0x01	; 1
    31b0:	86 e0       	ldi	r24, 0x06	; 6
    31b2:	df 01       	movw	r26, r30
    31b4:	1d 92       	st	X+, r1
    31b6:	8a 95       	dec	r24
    31b8:	e9 f7       	brne	.-6      	; 0x31b4 <process_tapping+0x2ae>
    31ba:	be c0       	rjmp	.+380    	; 0x3338 <process_tapping+0x432>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    31bc:	5a 83       	std	Y+2, r21	; 0x02
    31be:	49 83       	std	Y+1, r20	; 0x01
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	9a 81       	ldd	r25, Y+2	; 0x02
    31c4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <is_tap_key>
    31c8:	88 23       	and	r24, r24
    31ca:	09 f4       	brne	.+2      	; 0x31ce <process_tapping+0x2c8>
    31cc:	b7 c0       	rjmp	.+366    	; 0x333c <process_tapping+0x436>
    31ce:	dd 20       	and	r13, r13
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <process_tapping+0x2ce>
    31d2:	b4 c0       	rjmp	.+360    	; 0x333c <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    31d4:	30 91 51 01 	lds	r19, 0x0151
    31d8:	83 2f       	mov	r24, r19
    31da:	82 95       	swap	r24
    31dc:	8f 70       	andi	r24, 0x0F	; 15
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	02 97       	sbiw	r24, 0x02	; 2
    31e2:	9c f0       	brlt	.+38     	; 0x320a <process_tapping+0x304>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    31e4:	90 91 4d 01 	lds	r25, 0x014D
    31e8:	20 91 4c 01 	lds	r18, 0x014C
    31ec:	fe 01       	movw	r30, r28
    31ee:	76 96       	adiw	r30, 0x16	; 22
    31f0:	86 e0       	ldi	r24, 0x06	; 6
    31f2:	df 01       	movw	r26, r30
    31f4:	1d 92       	st	X+, r1
    31f6:	8a 95       	dec	r24
    31f8:	e9 f7       	brne	.-6      	; 0x31f4 <process_tapping+0x2ee>
    31fa:	9f 8b       	std	Y+23, r25	; 0x17
    31fc:	2e 8b       	std	Y+22, r18	; 0x16
    31fe:	fa 8e       	std	Y+26, r15	; 0x1a
    3200:	e9 8e       	std	Y+25, r14	; 0x19
    3202:	3b 8f       	std	Y+27, r19	; 0x1b
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3204:	cf 01       	movw	r24, r30
    3206:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    320a:	ac e4       	ldi	r26, 0x4C	; 76
    320c:	b1 e0       	ldi	r27, 0x01	; 1
    320e:	f8 01       	movw	r30, r16
    3210:	86 e0       	ldi	r24, 0x06	; 6
    3212:	01 90       	ld	r0, Z+
    3214:	0d 92       	st	X+, r0
    3216:	81 50       	subi	r24, 0x01	; 1
    3218:	e1 f7       	brne	.-8      	; 0x3212 <process_tapping+0x30c>
    321a:	8a c0       	rjmp	.+276    	; 0x3330 <process_tapping+0x42a>
    321c:	6f 3f       	cpi	r22, 0xFF	; 255
    321e:	09 f0       	breq	.+2      	; 0x3222 <process_tapping+0x31c>
    3220:	b6 c0       	rjmp	.+364    	; 0x338e <process_tapping+0x488>
    3222:	7f 3f       	cpi	r23, 0xFF	; 255
    3224:	09 f0       	breq	.+2      	; 0x3228 <process_tapping+0x322>
    3226:	b3 c0       	rjmp	.+358    	; 0x338e <process_tapping+0x488>
    3228:	71 c0       	rjmp	.+226    	; 0x330c <process_tapping+0x406>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    322a:	e2 16       	cp	r14, r18
    322c:	f3 06       	cpc	r15, r19
    322e:	40 f0       	brcs	.+16     	; 0x3240 <process_tapping+0x33a>
    3230:	c7 01       	movw	r24, r14
    3232:	82 1b       	sub	r24, r18
    3234:	93 0b       	sbc	r25, r19
    3236:	88 3c       	cpi	r24, 0xC8	; 200
    3238:	91 05       	cpc	r25, r1
    323a:	08 f0       	brcs	.+2      	; 0x323e <process_tapping+0x338>
    323c:	53 c0       	rjmp	.+166    	; 0x32e4 <process_tapping+0x3de>
    323e:	08 c0       	rjmp	.+16     	; 0x3250 <process_tapping+0x34a>
    3240:	20 95       	com	r18
    3242:	30 95       	com	r19
    3244:	2e 0d       	add	r18, r14
    3246:	3f 1d       	adc	r19, r15
    3248:	28 3c       	cpi	r18, 0xC8	; 200
    324a:	31 05       	cpc	r19, r1
    324c:	08 f0       	brcs	.+2      	; 0x3250 <process_tapping+0x34a>
    324e:	4a c0       	rjmp	.+148    	; 0x32e4 <process_tapping+0x3de>
            if (event.pressed) {
    3250:	dd 20       	and	r13, r13
    3252:	09 f4       	brne	.+2      	; 0x3256 <process_tapping+0x350>
    3254:	73 c0       	rjmp	.+230    	; 0x333c <process_tapping+0x436>
    3256:	6f 3f       	cpi	r22, 0xFF	; 255
    3258:	09 f0       	breq	.+2      	; 0x325c <process_tapping+0x356>
    325a:	9f c0       	rjmp	.+318    	; 0x339a <process_tapping+0x494>
    325c:	7f 3f       	cpi	r23, 0xFF	; 255
    325e:	09 f0       	breq	.+2      	; 0x3262 <process_tapping+0x35c>
    3260:	9c c0       	rjmp	.+312    	; 0x339a <process_tapping+0x494>
    3262:	29 c0       	rjmp	.+82     	; 0x32b6 <process_tapping+0x3b0>
                if (IS_TAPPING_KEY(event.key)) {
    3264:	74 17       	cp	r23, r20
    3266:	39 f5       	brne	.+78     	; 0x32b6 <process_tapping+0x3b0>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3268:	90 91 51 01 	lds	r25, 0x0151
    326c:	90 fd       	sbrc	r25, 0
    326e:	1a c0       	rjmp	.+52     	; 0x32a4 <process_tapping+0x39e>
    3270:	89 2f       	mov	r24, r25
    3272:	82 95       	swap	r24
    3274:	8f 70       	andi	r24, 0x0F	; 15
    3276:	b1 f0       	breq	.+44     	; 0x32a4 <process_tapping+0x39e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3278:	f8 01       	movw	r30, r16
    327a:	95 83       	std	Z+5, r25	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    327c:	8f 30       	cpi	r24, 0x0F	; 15
    327e:	31 f0       	breq	.+12     	; 0x328c <process_tapping+0x386>
    3280:	8f 5f       	subi	r24, 0xFF	; 255
    3282:	82 95       	swap	r24
    3284:	80 7f       	andi	r24, 0xF0	; 240
    3286:	9f 70       	andi	r25, 0x0F	; 15
    3288:	98 2b       	or	r25, r24
    328a:	95 83       	std	Z+5, r25	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    328c:	c8 01       	movw	r24, r16
    328e:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>
                        tapping_key = *keyp;
    3292:	ac e4       	ldi	r26, 0x4C	; 76
    3294:	b1 e0       	ldi	r27, 0x01	; 1
    3296:	f8 01       	movw	r30, r16
    3298:	86 e0       	ldi	r24, 0x06	; 6
    329a:	01 90       	ld	r0, Z+
    329c:	0d 92       	st	X+, r0
    329e:	81 50       	subi	r24, 0x01	; 1
    32a0:	e1 f7       	brne	.-8      	; 0x329a <process_tapping+0x394>
    32a2:	48 c0       	rjmp	.+144    	; 0x3334 <process_tapping+0x42e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    32a4:	ac e4       	ldi	r26, 0x4C	; 76
    32a6:	b1 e0       	ldi	r27, 0x01	; 1
    32a8:	f8 01       	movw	r30, r16
    32aa:	86 e0       	ldi	r24, 0x06	; 6
    32ac:	01 90       	ld	r0, Z+
    32ae:	0d 92       	st	X+, r0
    32b0:	81 50       	subi	r24, 0x01	; 1
    32b2:	e1 f7       	brne	.-8      	; 0x32ac <process_tapping+0x3a6>
    32b4:	41 c0       	rjmp	.+130    	; 0x3338 <process_tapping+0x432>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    32b6:	5a 83       	std	Y+2, r21	; 0x02
    32b8:	49 83       	std	Y+1, r20	; 0x01
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	9a 81       	ldd	r25, Y+2	; 0x02
    32be:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <is_tap_key>
    32c2:	88 23       	and	r24, r24
    32c4:	49 f0       	breq	.+18     	; 0x32d8 <process_tapping+0x3d2>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    32c6:	ac e4       	ldi	r26, 0x4C	; 76
    32c8:	b1 e0       	ldi	r27, 0x01	; 1
    32ca:	f8 01       	movw	r30, r16
    32cc:	86 e0       	ldi	r24, 0x06	; 6
    32ce:	01 90       	ld	r0, Z+
    32d0:	0d 92       	st	X+, r0
    32d2:	81 50       	subi	r24, 0x01	; 1
    32d4:	e1 f7       	brne	.-8      	; 0x32ce <process_tapping+0x3c8>
    32d6:	2c c0       	rjmp	.+88     	; 0x3330 <process_tapping+0x42a>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    32d8:	80 91 51 01 	lds	r24, 0x0151
    32dc:	81 60       	ori	r24, 0x01	; 1
    32de:	80 93 51 01 	sts	0x0151, r24
    32e2:	2c c0       	rjmp	.+88     	; 0x333c <process_tapping+0x436>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    32e4:	7e 2d       	mov	r23, r14
    32e6:	fd 82       	std	Y+5, r15	; 0x05
    32e8:	ec 82       	std	Y+4, r14	; 0x04
    32ea:	5a 83       	std	Y+2, r21	; 0x02
    32ec:	49 83       	std	Y+1, r20	; 0x01
    32ee:	db 82       	std	Y+3, r13	; 0x03
    32f0:	6d 2d       	mov	r22, r13
    32f2:	8d 81       	ldd	r24, Y+5	; 0x05
    32f4:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <debug_event>
            tapping_key = (keyrecord_t){};
    32f8:	ec e4       	ldi	r30, 0x4C	; 76
    32fa:	f1 e0       	ldi	r31, 0x01	; 1
    32fc:	86 e0       	ldi	r24, 0x06	; 6
    32fe:	df 01       	movw	r26, r30
    3300:	1d 92       	st	X+, r1
    3302:	8a 95       	dec	r24
    3304:	e9 f7       	brne	.-6      	; 0x3300 <process_tapping+0x3fa>
            debug_tapping_key();
    3306:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <debug_tapping_key>
    330a:	1c c0       	rjmp	.+56     	; 0x3344 <process_tapping+0x43e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    330c:	dd 20       	and	r13, r13
    330e:	b1 f0       	breq	.+44     	; 0x333c <process_tapping+0x436>
    3310:	5a 83       	std	Y+2, r21	; 0x02
    3312:	49 83       	std	Y+1, r20	; 0x01
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <is_tap_key>
    331c:	88 23       	and	r24, r24
    331e:	71 f0       	breq	.+28     	; 0x333c <process_tapping+0x436>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    3320:	ac e4       	ldi	r26, 0x4C	; 76
    3322:	b1 e0       	ldi	r27, 0x01	; 1
    3324:	f8 01       	movw	r30, r16
    3326:	86 e0       	ldi	r24, 0x06	; 6
    3328:	01 90       	ld	r0, Z+
    332a:	0d 92       	st	X+, r0
    332c:	81 50       	subi	r24, 0x01	; 1
    332e:	e1 f7       	brne	.-8      	; 0x3328 <process_tapping+0x422>
            waiting_buffer_scan_tap();
    3330:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <waiting_buffer_scan_tap>
            debug_tapping_key();
    3334:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <debug_tapping_key>
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	05 c0       	rjmp	.+10     	; 0x3346 <process_tapping+0x440>
            return true;
        } else {
            process_action(keyp);
    333c:	c8 01       	movw	r24, r16
    333e:	0e 94 6f 14 	call	0x28de	; 0x28de <process_action>
    3342:	fa cf       	rjmp	.-12     	; 0x3338 <process_tapping+0x432>
            return true;
    3344:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    3346:	6b 96       	adiw	r28, 0x1b	; 27
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	1f 91       	pop	r17
    3358:	0f 91       	pop	r16
    335a:	ff 90       	pop	r15
    335c:	ef 90       	pop	r14
    335e:	df 90       	pop	r13
    3360:	08 95       	ret
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3362:	80 91 4e 01 	lds	r24, 0x014E
    3366:	88 23       	and	r24, r24
    3368:	09 f4       	brne	.+2      	; 0x336c <process_tapping+0x466>
    336a:	58 cf       	rjmp	.-336    	; 0x321c <process_tapping+0x316>
    336c:	fb cd       	rjmp	.-1034   	; 0x2f64 <process_tapping+0x5e>
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    336e:	65 17       	cp	r22, r21
    3370:	09 f0       	breq	.+2      	; 0x3374 <process_tapping+0x46e>
    3372:	2c ce       	rjmp	.-936    	; 0x2fcc <process_tapping+0xc6>
    3374:	16 ce       	rjmp	.-980    	; 0x2fa2 <process_tapping+0x9c>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3376:	61 30       	cpi	r22, 0x01	; 1
    3378:	09 f4       	brne	.+2      	; 0x337c <process_tapping+0x476>
    337a:	98 ce       	rjmp	.-720    	; 0x30ac <process_tapping+0x1a6>
    337c:	4d ce       	rjmp	.-870    	; 0x3018 <process_tapping+0x112>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    337e:	65 17       	cp	r22, r21
    3380:	09 f0       	breq	.+2      	; 0x3384 <process_tapping+0x47e>
    3382:	b8 ce       	rjmp	.-656    	; 0x30f4 <process_tapping+0x1ee>
    3384:	a3 ce       	rjmp	.-698    	; 0x30cc <process_tapping+0x1c6>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3386:	65 17       	cp	r22, r21
    3388:	09 f0       	breq	.+2      	; 0x338c <process_tapping+0x486>
    338a:	18 cf       	rjmp	.-464    	; 0x31bc <process_tapping+0x2b6>
    338c:	03 cf       	rjmp	.-506    	; 0x3194 <process_tapping+0x28e>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
    338e:	80 91 4e 01 	lds	r24, 0x014E
    3392:	88 23       	and	r24, r24
    3394:	09 f0       	breq	.+2      	; 0x3398 <process_tapping+0x492>
    3396:	ba cf       	rjmp	.-140    	; 0x330c <process_tapping+0x406>
    3398:	48 cf       	rjmp	.-368    	; 0x322a <process_tapping+0x324>
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
    339a:	65 17       	cp	r22, r21
    339c:	09 f0       	breq	.+2      	; 0x33a0 <process_tapping+0x49a>
    339e:	8b cf       	rjmp	.-234    	; 0x32b6 <process_tapping+0x3b0>
    33a0:	61 cf       	rjmp	.-318    	; 0x3264 <process_tapping+0x35e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    33a2:	5a 83       	std	Y+2, r21	; 0x02
    33a4:	49 83       	std	Y+1, r20	; 0x01
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	0e 94 3b 1b 	call	0x3676	; 0x3676 <layer_switch_get_action>
    33ae:	48 2f       	mov	r20, r24
                    switch (action.kind.id) {
    33b0:	89 2f       	mov	r24, r25
    33b2:	82 95       	swap	r24
    33b4:	8f 70       	andi	r24, 0x0F	; 15
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	31 05       	cpc	r19, r1
    33be:	0c f4       	brge	.+2      	; 0x33c2 <process_tapping+0x4bc>
    33c0:	63 ce       	rjmp	.-826    	; 0x3088 <process_tapping+0x182>
    33c2:	24 30       	cpi	r18, 0x04	; 4
    33c4:	31 05       	cpc	r19, r1
    33c6:	0c f0       	brlt	.+2      	; 0x33ca <process_tapping+0x4c4>
    33c8:	b9 cf       	rjmp	.-142    	; 0x333c <process_tapping+0x436>
    33ca:	63 ce       	rjmp	.-826    	; 0x3092 <process_tapping+0x18c>

000033cc <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	df 93       	push	r29
    33d2:	cf 93       	push	r28
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	2c 97       	sbiw	r28, 0x0c	; 12
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	4f 83       	std	Y+7, r20	; 0x07
    33e6:	58 87       	std	Y+8, r21	; 0x08
    33e8:	69 87       	std	Y+9, r22	; 0x09
    33ea:	7a 87       	std	Y+10, r23	; 0x0a
    33ec:	8b 87       	std	Y+11, r24	; 0x0b
    33ee:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    33f0:	8e 01       	movw	r16, r28
    33f2:	09 5f       	subi	r16, 0xF9	; 249
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	c8 01       	movw	r24, r16
    33f8:	0e 94 83 17 	call	0x2f06	; 0x2f06 <process_tapping>
    33fc:	88 23       	and	r24, r24
    33fe:	d9 f0       	breq	.+54     	; 0x3436 <action_tapping_process+0x6a>
        if (!IS_NOEVENT(record.event)) {
    3400:	28 85       	ldd	r18, Y+8	; 0x08
    3402:	3f 81       	ldd	r19, Y+7	; 0x07
    3404:	8a 85       	ldd	r24, Y+10	; 0x0a
    3406:	9b 85       	ldd	r25, Y+11	; 0x0b
    3408:	89 2b       	or	r24, r25
    340a:	09 f4       	brne	.+2      	; 0x340e <action_tapping_process+0x42>
    340c:	6b c0       	rjmp	.+214    	; 0x34e4 <action_tapping_process+0x118>
    340e:	2f 3f       	cpi	r18, 0xFF	; 255
    3410:	49 f4       	brne	.+18     	; 0x3424 <action_tapping_process+0x58>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	3f 3f       	cpi	r19, 0xFF	; 255
    3418:	11 f4       	brne	.+4      	; 0x341e <action_tapping_process+0x52>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	88 23       	and	r24, r24
    3420:	09 f0       	breq	.+2      	; 0x3424 <action_tapping_process+0x58>
    3422:	60 c0       	rjmp	.+192    	; 0x34e4 <action_tapping_process+0x118>
            debug("processed: "); debug_record(record); debug("\n");
    3424:	4f 81       	ldd	r20, Y+7	; 0x07
    3426:	58 85       	ldd	r21, Y+8	; 0x08
    3428:	69 85       	ldd	r22, Y+9	; 0x09
    342a:	7a 85       	ldd	r23, Y+10	; 0x0a
    342c:	8b 85       	ldd	r24, Y+11	; 0x0b
    342e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3430:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <debug_record>
    3434:	57 c0       	rjmp	.+174    	; 0x34e4 <action_tapping_process+0x118>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
    3436:	de 01       	movw	r26, r28
    3438:	11 96       	adiw	r26, 0x01	; 1
    343a:	f8 01       	movw	r30, r16
    343c:	86 e0       	ldi	r24, 0x06	; 6
    343e:	01 90       	ld	r0, Z+
    3440:	0d 92       	st	X+, r0
    3442:	81 50       	subi	r24, 0x01	; 1
    3444:	e1 f7       	brne	.-8      	; 0x343e <action_tapping_process+0x72>
    3446:	f9 81       	ldd	r31, Y+1	; 0x01
    3448:	ea 81       	ldd	r30, Y+2	; 0x02
    344a:	4c 81       	ldd	r20, Y+4	; 0x04
    344c:	5d 81       	ldd	r21, Y+5	; 0x05
    344e:	41 15       	cp	r20, r1
    3450:	51 05       	cpc	r21, r1
    3452:	09 f4       	brne	.+2      	; 0x3456 <action_tapping_process+0x8a>
    3454:	47 c0       	rjmp	.+142    	; 0x34e4 <action_tapping_process+0x118>
    3456:	ef 3f       	cpi	r30, 0xFF	; 255
    3458:	09 f0       	breq	.+2      	; 0x345c <action_tapping_process+0x90>
    345a:	4c c0       	rjmp	.+152    	; 0x34f4 <action_tapping_process+0x128>
    345c:	ff 3f       	cpi	r31, 0xFF	; 255
    345e:	09 f0       	breq	.+2      	; 0x3462 <action_tapping_process+0x96>
    3460:	49 c0       	rjmp	.+146    	; 0x34f4 <action_tapping_process+0x128>
    3462:	40 c0       	rjmp	.+128    	; 0x34e4 <action_tapping_process+0x118>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3464:	f9 83       	std	Y+1, r31	; 0x01
    3466:	ea 83       	std	Y+2, r30	; 0x02
    3468:	5d 83       	std	Y+5, r21	; 0x05
    346a:	4c 83       	std	Y+4, r20	; 0x04
    346c:	f9 01       	movw	r30, r18
    346e:	ee 0f       	add	r30, r30
    3470:	ff 1f       	adc	r31, r31
    3472:	e2 0f       	add	r30, r18
    3474:	f3 1f       	adc	r31, r19
    3476:	ee 0f       	add	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	ec 5a       	subi	r30, 0xAC	; 172
    347c:	fe 4f       	sbci	r31, 0xFE	; 254
    347e:	de 01       	movw	r26, r28
    3480:	11 96       	adiw	r26, 0x01	; 1
    3482:	86 e0       	ldi	r24, 0x06	; 6
    3484:	0d 90       	ld	r0, X+
    3486:	01 92       	st	Z+, r0
    3488:	81 50       	subi	r24, 0x01	; 1
    348a:	e1 f7       	brne	.-8      	; 0x3484 <action_tapping_process+0xb8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    348c:	60 93 52 01 	sts	0x0152, r22

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3490:	0e 94 d7 16 	call	0x2dae	; 0x2dae <debug_waiting_buffer>
    3494:	27 c0       	rjmp	.+78     	; 0x34e4 <action_tapping_process+0x118>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3496:	91 9f       	mul	r25, r17
    3498:	c0 01       	movw	r24, r0
    349a:	11 24       	eor	r1, r1
    349c:	8c 5a       	subi	r24, 0xAC	; 172
    349e:	9e 4f       	sbci	r25, 0xFE	; 254
    34a0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <process_tapping>
    34a4:	88 23       	and	r24, r24
    34a6:	09 f4       	brne	.+2      	; 0x34aa <action_tapping_process+0xde>
    34a8:	45 c0       	rjmp	.+138    	; 0x3534 <action_tapping_process+0x168>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    34aa:	80 91 53 01 	lds	r24, 0x0153
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	fc 01       	movw	r30, r24
    34b2:	ee 0f       	add	r30, r30
    34b4:	ff 1f       	adc	r31, r31
    34b6:	e8 0f       	add	r30, r24
    34b8:	f9 1f       	adc	r31, r25
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ec 5a       	subi	r30, 0xAC	; 172
    34c0:	fe 4f       	sbci	r31, 0xFE	; 254
    34c2:	40 81       	ld	r20, Z
    34c4:	51 81       	ldd	r21, Z+1	; 0x01
    34c6:	62 81       	ldd	r22, Z+2	; 0x02
    34c8:	73 81       	ldd	r23, Z+3	; 0x03
    34ca:	84 81       	ldd	r24, Z+4	; 0x04
    34cc:	95 81       	ldd	r25, Z+5	; 0x05
    34ce:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    34d2:	80 91 53 01 	lds	r24, 0x0153
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	87 70       	andi	r24, 0x07	; 7
    34dc:	90 70       	andi	r25, 0x00	; 0
    34de:	80 93 53 01 	sts	0x0153, r24
    34e2:	01 c0       	rjmp	.+2      	; 0x34e6 <action_tapping_process+0x11a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34e4:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    34e6:	90 91 53 01 	lds	r25, 0x0153
    34ea:	80 91 52 01 	lds	r24, 0x0152
    34ee:	98 17       	cp	r25, r24
    34f0:	91 f6       	brne	.-92     	; 0x3496 <action_tapping_process+0xca>
    34f2:	20 c0       	rjmp	.+64     	; 0x3534 <action_tapping_process+0x168>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    34f4:	80 91 52 01 	lds	r24, 0x0152
    34f8:	28 2f       	mov	r18, r24
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	2f 5f       	subi	r18, 0xFF	; 255
    34fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3500:	b9 01       	movw	r22, r18
    3502:	67 70       	andi	r22, 0x07	; 7
    3504:	70 70       	andi	r23, 0x00	; 0
    3506:	21 50       	subi	r18, 0x01	; 1
    3508:	30 40       	sbci	r19, 0x00	; 0
    350a:	80 91 53 01 	lds	r24, 0x0153
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	68 17       	cp	r22, r24
    3512:	79 07       	cpc	r23, r25
    3514:	09 f0       	breq	.+2      	; 0x3518 <action_tapping_process+0x14c>
    3516:	a6 cf       	rjmp	.-180    	; 0x3464 <action_tapping_process+0x98>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3518:	0e 94 32 13 	call	0x2664	; 0x2664 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    351c:	10 92 52 01 	sts	0x0152, r1
    waiting_buffer_tail = 0;
    3520:	10 92 53 01 	sts	0x0153, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3524:	ec e4       	ldi	r30, 0x4C	; 76
    3526:	f1 e0       	ldi	r31, 0x01	; 1
    3528:	86 e0       	ldi	r24, 0x06	; 6
    352a:	df 01       	movw	r26, r30
    352c:	1d 92       	st	X+, r1
    352e:	8a 95       	dec	r24
    3530:	e9 f7       	brne	.-6      	; 0x352c <action_tapping_process+0x160>
    3532:	d8 cf       	rjmp	.-80     	; 0x34e4 <action_tapping_process+0x118>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3534:	2c 96       	adiw	r28, 0x0c	; 12
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	08 95       	ret

0000354a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    354a:	cf 92       	push	r12
    354c:	df 92       	push	r13
    354e:	ef 92       	push	r14
    3550:	ff 92       	push	r15
    3552:	0f 93       	push	r16
    3554:	1f 93       	push	r17
    3556:	cf 93       	push	r28
    3558:	df 93       	push	r29
    355a:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	09 f4       	brne	.+2      	; 0x3562 <action_macro_play+0x18>
    3560:	7f c0       	rjmp	.+254    	; 0x3660 <action_macro_play+0x116>
    3562:	ee 24       	eor	r14, r14
    3564:	ff 24       	eor	r15, r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3566:	80 ea       	ldi	r24, 0xA0	; 160
    3568:	c8 2e       	mov	r12, r24
    356a:	8f e0       	ldi	r24, 0x0F	; 15
    356c:	d8 2e       	mov	r13, r24
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    356e:	01 e0       	ldi	r16, 0x01	; 1
    3570:	10 e0       	ldi	r17, 0x00	; 0

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3572:	fe 01       	movw	r30, r28
    3574:	21 96       	adiw	r28, 0x01	; 1
    3576:	94 91       	lpm	r25, Z+
    3578:	95 37       	cpi	r25, 0x75	; 117
    357a:	09 f4       	brne	.+2      	; 0x357e <action_macro_play+0x34>
    357c:	50 c0       	rjmp	.+160    	; 0x361e <action_macro_play+0xd4>
    357e:	96 37       	cpi	r25, 0x76	; 118
    3580:	60 f4       	brcc	.+24     	; 0x359a <action_macro_play+0x50>
    3582:	94 37       	cpi	r25, 0x74	; 116
    3584:	08 f0       	brcs	.+2      	; 0x3588 <action_macro_play+0x3e>
    3586:	40 c0       	rjmp	.+128    	; 0x3608 <action_macro_play+0xbe>
    3588:	94 30       	cpi	r25, 0x04	; 4
    358a:	08 f0       	brcs	.+2      	; 0x358e <action_macro_play+0x44>
    358c:	57 c0       	rjmp	.+174    	; 0x363c <action_macro_play+0xf2>
    358e:	91 30       	cpi	r25, 0x01	; 1
    3590:	b1 f0       	breq	.+44     	; 0x35be <action_macro_play+0x74>
    3592:	92 30       	cpi	r25, 0x02	; 2
    3594:	09 f0       	breq	.+2      	; 0x3598 <action_macro_play+0x4e>
    3596:	64 c0       	rjmp	.+200    	; 0x3660 <action_macro_play+0x116>
    3598:	23 c0       	rjmp	.+70     	; 0x35e0 <action_macro_play+0x96>
    359a:	98 37       	cpi	r25, 0x78	; 120
    359c:	09 f4       	brne	.+2      	; 0x35a0 <action_macro_play+0x56>
    359e:	4b c0       	rjmp	.+150    	; 0x3636 <action_macro_play+0xec>
    35a0:	99 37       	cpi	r25, 0x79	; 121
    35a2:	38 f4       	brcc	.+14     	; 0x35b2 <action_macro_play+0x68>
    35a4:	96 37       	cpi	r25, 0x76	; 118
    35a6:	09 f4       	brne	.+2      	; 0x35aa <action_macro_play+0x60>
    35a8:	3e c0       	rjmp	.+124    	; 0x3626 <action_macro_play+0xdc>
    35aa:	97 37       	cpi	r25, 0x77	; 119
    35ac:	09 f0       	breq	.+2      	; 0x35b0 <action_macro_play+0x66>
    35ae:	58 c0       	rjmp	.+176    	; 0x3660 <action_macro_play+0x116>
    35b0:	3e c0       	rjmp	.+124    	; 0x362e <action_macro_play+0xe4>
    35b2:	89 2f       	mov	r24, r25
    35b4:	84 58       	subi	r24, 0x84	; 132
    35b6:	80 37       	cpi	r24, 0x70	; 112
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <action_macro_play+0x72>
    35ba:	52 c0       	rjmp	.+164    	; 0x3660 <action_macro_play+0x116>
    35bc:	43 c0       	rjmp	.+134    	; 0x3644 <action_macro_play+0xfa>
            case KEY_DOWN:
                MACRO_READ();
    35be:	fe 01       	movw	r30, r28
    35c0:	21 96       	adiw	r28, 0x01	; 1
    35c2:	94 91       	lpm	r25, Z+
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    35c4:	89 2f       	mov	r24, r25
    35c6:	80 5e       	subi	r24, 0xE0	; 224
    35c8:	88 30       	cpi	r24, 0x08	; 8
    35ca:	08 f0       	brcs	.+2      	; 0x35ce <action_macro_play+0x84>
    35cc:	37 c0       	rjmp	.+110    	; 0x363c <action_macro_play+0xf2>
                    add_weak_mods(MOD_BIT(macro));
    35ce:	97 70       	andi	r25, 0x07	; 7
    35d0:	80 2f       	mov	r24, r16
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <action_macro_play+0x8c>
    35d4:	88 0f       	add	r24, r24
    35d6:	9a 95       	dec	r25
    35d8:	ea f7       	brpl	.-6      	; 0x35d4 <action_macro_play+0x8a>
    35da:	0e 94 96 1c 	call	0x392c	; 0x392c <add_weak_mods>
    35de:	0f c0       	rjmp	.+30     	; 0x35fe <action_macro_play+0xb4>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    35e0:	fe 01       	movw	r30, r28
    35e2:	21 96       	adiw	r28, 0x01	; 1
    35e4:	94 91       	lpm	r25, Z+
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    35e6:	89 2f       	mov	r24, r25
    35e8:	80 5e       	subi	r24, 0xE0	; 224
    35ea:	88 30       	cpi	r24, 0x08	; 8
    35ec:	58 f4       	brcc	.+22     	; 0x3604 <action_macro_play+0xba>
                    del_weak_mods(MOD_BIT(macro));
    35ee:	97 70       	andi	r25, 0x07	; 7
    35f0:	80 2f       	mov	r24, r16
    35f2:	01 c0       	rjmp	.+2      	; 0x35f6 <action_macro_play+0xac>
    35f4:	88 0f       	add	r24, r24
    35f6:	9a 95       	dec	r25
    35f8:	ea f7       	brpl	.-6      	; 0x35f4 <action_macro_play+0xaa>
    35fa:	0e 94 9c 1c 	call	0x3938	; 0x3938 <del_weak_mods>
                    send_keyboard_report();
    35fe:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <send_keyboard_report>
    3602:	24 c0       	rjmp	.+72     	; 0x364c <action_macro_play+0x102>
                } else {
                    unregister_code(macro);
    3604:	89 2f       	mov	r24, r25
    3606:	20 c0       	rjmp	.+64     	; 0x3648 <action_macro_play+0xfe>
                }
                break;
            case WAIT:
                MACRO_READ();
    3608:	fe 01       	movw	r30, r28
    360a:	24 91       	lpm	r18, Z+
    360c:	04 c0       	rjmp	.+8      	; 0x3616 <action_macro_play+0xcc>
    360e:	c6 01       	movw	r24, r12
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <action_macro_play+0xc6>
    3614:	21 50       	subi	r18, 0x01	; 1
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3616:	22 23       	and	r18, r18
    3618:	d1 f7       	brne	.-12     	; 0x360e <action_macro_play+0xc4>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    361a:	21 96       	adiw	r28, 0x01	; 1
    361c:	17 c0       	rjmp	.+46     	; 0x364c <action_macro_play+0x102>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    361e:	fe 01       	movw	r30, r28
    3620:	21 96       	adiw	r28, 0x01	; 1
    3622:	e4 90       	lpm	r14, Z+
    3624:	13 c0       	rjmp	.+38     	; 0x364c <action_macro_play+0x102>
                dprintf("INTERVAL(%u)\n", interval);
                break;
            case MOD_STORE:
                mod_storage = get_mods();
    3626:	0e 94 80 1c 	call	0x3900	; 0x3900 <get_mods>
    362a:	f8 2e       	mov	r15, r24
    362c:	0f c0       	rjmp	.+30     	; 0x364c <action_macro_play+0x102>
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    362e:	8f 2d       	mov	r24, r15
    3630:	0e 94 90 1c 	call	0x3920	; 0x3920 <set_mods>
    3634:	e4 cf       	rjmp	.-56     	; 0x35fe <action_macro_play+0xb4>
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3636:	0e 94 93 1c 	call	0x3926	; 0x3926 <clear_mods>
    363a:	e1 cf       	rjmp	.-62     	; 0x35fe <action_macro_play+0xb4>
                send_keyboard_report();
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    363c:	89 2f       	mov	r24, r25
    363e:	0e 94 98 13 	call	0x2730	; 0x2730 <register_code>
    3642:	04 c0       	rjmp	.+8      	; 0x364c <action_macro_play+0x102>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3644:	89 2f       	mov	r24, r25
    3646:	8f 77       	andi	r24, 0x7F	; 127
    3648:	0e 94 45 13 	call	0x268a	; 0x268a <unregister_code>
    364c:	2e 2d       	mov	r18, r14
    364e:	04 c0       	rjmp	.+8      	; 0x3658 <action_macro_play+0x10e>
    3650:	c6 01       	movw	r24, r12
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <action_macro_play+0x108>
    3656:	21 50       	subi	r18, 0x01	; 1
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3658:	22 23       	and	r18, r18
    365a:	09 f4       	brne	.+2      	; 0x365e <action_macro_play+0x114>
    365c:	8a cf       	rjmp	.-236    	; 0x3572 <action_macro_play+0x28>
    365e:	f8 cf       	rjmp	.-16     	; 0x3650 <action_macro_play+0x106>
    }
}
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	df 90       	pop	r13
    366e:	cf 90       	pop	r12
    3670:	08 95       	ret

00003672 <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    3672:	08 95       	ret

00003674 <layer_debug>:
}

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    3674:	08 95       	ret

00003676 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	6c 01       	movw	r12, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3688:	e0 90 84 01 	lds	r14, 0x0184
    368c:	f0 90 85 01 	lds	r15, 0x0185
    3690:	00 91 86 01 	lds	r16, 0x0186
    3694:	10 91 87 01 	lds	r17, 0x0187
    3698:	80 91 88 01 	lds	r24, 0x0188
    369c:	90 91 89 01 	lds	r25, 0x0189
    36a0:	a0 91 8a 01 	lds	r26, 0x018A
    36a4:	b0 91 8b 01 	lds	r27, 0x018B
    36a8:	e8 2a       	or	r14, r24
    36aa:	f9 2a       	or	r15, r25
    36ac:	0a 2b       	or	r16, r26
    36ae:	1b 2b       	or	r17, r27
    36b0:	cf e1       	ldi	r28, 0x1F	; 31
    36b2:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    36b4:	d8 01       	movw	r26, r16
    36b6:	c7 01       	movw	r24, r14
    36b8:	0c 2e       	mov	r0, r28
    36ba:	04 c0       	rjmp	.+8      	; 0x36c4 <layer_switch_get_action+0x4e>
    36bc:	b6 95       	lsr	r27
    36be:	a7 95       	ror	r26
    36c0:	97 95       	ror	r25
    36c2:	87 95       	ror	r24
    36c4:	0a 94       	dec	r0
    36c6:	d2 f7       	brpl	.-12     	; 0x36bc <layer_switch_get_action+0x46>
    36c8:	81 70       	andi	r24, 0x01	; 1
    36ca:	90 70       	andi	r25, 0x00	; 0
    36cc:	89 2b       	or	r24, r25
    36ce:	41 f0       	breq	.+16     	; 0x36e0 <layer_switch_get_action+0x6a>
            action = action_for_key(i, key);
    36d0:	8c 2f       	mov	r24, r28
    36d2:	b6 01       	movw	r22, r12
    36d4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <action_for_key>
    36d8:	9c 01       	movw	r18, r24
            if (action.code != ACTION_TRANSPARENT) {
    36da:	81 30       	cpi	r24, 0x01	; 1
    36dc:	91 05       	cpc	r25, r1
    36de:	51 f4       	brne	.+20     	; 0x36f4 <layer_switch_get_action+0x7e>
                return action;
    36e0:	21 97       	sbiw	r28, 0x01	; 1
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    36e2:	8f ef       	ldi	r24, 0xFF	; 255
    36e4:	cf 3f       	cpi	r28, 0xFF	; 255
    36e6:	d8 07       	cpc	r29, r24
    36e8:	29 f7       	brne	.-54     	; 0x36b4 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	b6 01       	movw	r22, r12
    36ee:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <action_for_key>
    36f2:	9c 01       	movw	r18, r24
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    36f4:	82 2f       	mov	r24, r18
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	ff 90       	pop	r15
    3700:	ef 90       	pop	r14
    3702:	df 90       	pop	r13
    3704:	cf 90       	pop	r12
    3706:	08 95       	ret

00003708 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3708:	60 93 88 01 	sts	0x0188, r22
    370c:	70 93 89 01 	sts	0x0189, r23
    3710:	80 93 8a 01 	sts	0x018A, r24
    3714:	90 93 8b 01 	sts	0x018B, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3718:	0e 94 1f 13 	call	0x263e	; 0x263e <clear_keyboard_but_mods>
}
    371c:	08 95       	ret

0000371e <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    371e:	9b 01       	movw	r18, r22
    3720:	ac 01       	movw	r20, r24
    layer_state_set(layer_state ^ state);
    3722:	60 91 88 01 	lds	r22, 0x0188
    3726:	70 91 89 01 	lds	r23, 0x0189
    372a:	80 91 8a 01 	lds	r24, 0x018A
    372e:	90 91 8b 01 	lds	r25, 0x018B
    3732:	62 27       	eor	r22, r18
    3734:	73 27       	eor	r23, r19
    3736:	84 27       	eor	r24, r20
    3738:	95 27       	eor	r25, r21
    373a:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    373e:	08 95       	ret

00003740 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3740:	9b 01       	movw	r18, r22
    3742:	ac 01       	movw	r20, r24
    layer_state_set(layer_state & state);
    3744:	60 91 88 01 	lds	r22, 0x0188
    3748:	70 91 89 01 	lds	r23, 0x0189
    374c:	80 91 8a 01 	lds	r24, 0x018A
    3750:	90 91 8b 01 	lds	r25, 0x018B
    3754:	62 23       	and	r22, r18
    3756:	73 23       	and	r23, r19
    3758:	84 23       	and	r24, r20
    375a:	95 23       	and	r25, r21
    375c:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    3760:	08 95       	ret

00003762 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3762:	9b 01       	movw	r18, r22
    3764:	ac 01       	movw	r20, r24
    layer_state_set(layer_state | state);
    3766:	60 91 88 01 	lds	r22, 0x0188
    376a:	70 91 89 01 	lds	r23, 0x0189
    376e:	80 91 8a 01 	lds	r24, 0x018A
    3772:	90 91 8b 01 	lds	r25, 0x018B
    3776:	62 2b       	or	r22, r18
    3778:	73 2b       	or	r23, r19
    377a:	84 2b       	or	r24, r20
    377c:	95 2b       	or	r25, r21
    377e:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    3782:	08 95       	ret

00003784 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3784:	21 e0       	ldi	r18, 0x01	; 1
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	04 c0       	rjmp	.+8      	; 0x3796 <layer_invert+0x12>
    378e:	22 0f       	add	r18, r18
    3790:	33 1f       	adc	r19, r19
    3792:	44 1f       	adc	r20, r20
    3794:	55 1f       	adc	r21, r21
    3796:	8a 95       	dec	r24
    3798:	d2 f7       	brpl	.-12     	; 0x378e <layer_invert+0xa>
    379a:	80 91 88 01 	lds	r24, 0x0188
    379e:	90 91 89 01 	lds	r25, 0x0189
    37a2:	a0 91 8a 01 	lds	r26, 0x018A
    37a6:	b0 91 8b 01 	lds	r27, 0x018B
    37aa:	28 27       	eor	r18, r24
    37ac:	39 27       	eor	r19, r25
    37ae:	4a 27       	eor	r20, r26
    37b0:	5b 27       	eor	r21, r27
    37b2:	ca 01       	movw	r24, r20
    37b4:	b9 01       	movw	r22, r18
    37b6:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    37ba:	08 95       	ret

000037bc <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    37bc:	21 e0       	ldi	r18, 0x01	; 1
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	04 c0       	rjmp	.+8      	; 0x37ce <layer_off+0x12>
    37c6:	22 0f       	add	r18, r18
    37c8:	33 1f       	adc	r19, r19
    37ca:	44 1f       	adc	r20, r20
    37cc:	55 1f       	adc	r21, r21
    37ce:	8a 95       	dec	r24
    37d0:	d2 f7       	brpl	.-12     	; 0x37c6 <layer_off+0xa>
    37d2:	20 95       	com	r18
    37d4:	30 95       	com	r19
    37d6:	40 95       	com	r20
    37d8:	50 95       	com	r21
    37da:	80 91 88 01 	lds	r24, 0x0188
    37de:	90 91 89 01 	lds	r25, 0x0189
    37e2:	a0 91 8a 01 	lds	r26, 0x018A
    37e6:	b0 91 8b 01 	lds	r27, 0x018B
    37ea:	28 23       	and	r18, r24
    37ec:	39 23       	and	r19, r25
    37ee:	4a 23       	and	r20, r26
    37f0:	5b 23       	and	r21, r27
    37f2:	ca 01       	movw	r24, r20
    37f4:	b9 01       	movw	r22, r18
    37f6:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    37fa:	08 95       	ret

000037fc <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    37fc:	21 e0       	ldi	r18, 0x01	; 1
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	04 c0       	rjmp	.+8      	; 0x380e <layer_on+0x12>
    3806:	22 0f       	add	r18, r18
    3808:	33 1f       	adc	r19, r19
    380a:	44 1f       	adc	r20, r20
    380c:	55 1f       	adc	r21, r21
    380e:	8a 95       	dec	r24
    3810:	d2 f7       	brpl	.-12     	; 0x3806 <layer_on+0xa>
    3812:	80 91 88 01 	lds	r24, 0x0188
    3816:	90 91 89 01 	lds	r25, 0x0189
    381a:	a0 91 8a 01 	lds	r26, 0x018A
    381e:	b0 91 8b 01 	lds	r27, 0x018B
    3822:	28 2b       	or	r18, r24
    3824:	39 2b       	or	r19, r25
    3826:	4a 2b       	or	r20, r26
    3828:	5b 2b       	or	r21, r27
    382a:	ca 01       	movw	r24, r20
    382c:	b9 01       	movw	r22, r18
    382e:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    3832:	08 95       	ret

00003834 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3834:	21 e0       	ldi	r18, 0x01	; 1
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e0       	ldi	r20, 0x00	; 0
    383a:	50 e0       	ldi	r21, 0x00	; 0
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <layer_move+0x12>
    383e:	22 0f       	add	r18, r18
    3840:	33 1f       	adc	r19, r19
    3842:	44 1f       	adc	r20, r20
    3844:	55 1f       	adc	r21, r21
    3846:	8a 95       	dec	r24
    3848:	d2 f7       	brpl	.-12     	; 0x383e <layer_move+0xa>
    384a:	ca 01       	movw	r24, r20
    384c:	b9 01       	movw	r22, r18
    384e:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    3852:	08 95       	ret

00003854 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3854:	60 e0       	ldi	r22, 0x00	; 0
    3856:	70 e0       	ldi	r23, 0x00	; 0
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	0e 94 84 1b 	call	0x3708	; 0x3708 <layer_state_set>
}
    3860:	08 95       	ret

00003862 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3862:	60 93 84 01 	sts	0x0184, r22
    3866:	70 93 85 01 	sts	0x0185, r23
    386a:	80 93 86 01 	sts	0x0186, r24
    386e:	90 93 87 01 	sts	0x0187, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3872:	0e 94 1f 13 	call	0x263e	; 0x263e <clear_keyboard_but_mods>
}
    3876:	08 95       	ret

00003878 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3878:	9b 01       	movw	r18, r22
    387a:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state ^ state);
    387c:	60 91 84 01 	lds	r22, 0x0184
    3880:	70 91 85 01 	lds	r23, 0x0185
    3884:	80 91 86 01 	lds	r24, 0x0186
    3888:	90 91 87 01 	lds	r25, 0x0187
    388c:	62 27       	eor	r22, r18
    388e:	73 27       	eor	r23, r19
    3890:	84 27       	eor	r24, r20
    3892:	95 27       	eor	r25, r21
    3894:	0e 94 31 1c 	call	0x3862	; 0x3862 <default_layer_state_set>
}
    3898:	08 95       	ret

0000389a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    389a:	9b 01       	movw	r18, r22
    389c:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state & state);
    389e:	60 91 84 01 	lds	r22, 0x0184
    38a2:	70 91 85 01 	lds	r23, 0x0185
    38a6:	80 91 86 01 	lds	r24, 0x0186
    38aa:	90 91 87 01 	lds	r25, 0x0187
    38ae:	62 23       	and	r22, r18
    38b0:	73 23       	and	r23, r19
    38b2:	84 23       	and	r24, r20
    38b4:	95 23       	and	r25, r21
    38b6:	0e 94 31 1c 	call	0x3862	; 0x3862 <default_layer_state_set>
}
    38ba:	08 95       	ret

000038bc <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    38bc:	9b 01       	movw	r18, r22
    38be:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state | state);
    38c0:	60 91 84 01 	lds	r22, 0x0184
    38c4:	70 91 85 01 	lds	r23, 0x0185
    38c8:	80 91 86 01 	lds	r24, 0x0186
    38cc:	90 91 87 01 	lds	r25, 0x0187
    38d0:	62 2b       	or	r22, r18
    38d2:	73 2b       	or	r23, r19
    38d4:	84 2b       	or	r24, r20
    38d6:	95 2b       	or	r25, r21
    38d8:	0e 94 31 1c 	call	0x3862	; 0x3862 <default_layer_state_set>
}
    38dc:	08 95       	ret

000038de <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    38de:	0e 94 31 1c 	call	0x3862	; 0x3862 <default_layer_state_set>
}
    38e2:	08 95       	ret

000038e4 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    38e8:	e0 91 0d 01 	lds	r30, 0x010D
    38ec:	f0 91 0e 01 	lds	r31, 0x010E
    38f0:	e8 0f       	add	r30, r24
    38f2:	f9 1f       	adc	r31, r25
    38f4:	10 82       	st	Z, r1
    38f6:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38f8:	80 31       	cpi	r24, 0x10	; 16
    38fa:	91 05       	cpc	r25, r1
    38fc:	a9 f7       	brne	.-22     	; 0x38e8 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    38fe:	08 95       	ret

00003900 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3900:	80 91 9c 01 	lds	r24, 0x019C
    3904:	08 95       	ret

00003906 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3906:	90 91 9c 01 	lds	r25, 0x019C
    390a:	98 2b       	or	r25, r24
    390c:	90 93 9c 01 	sts	0x019C, r25
    3910:	08 95       	ret

00003912 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3912:	80 95       	com	r24
    3914:	90 91 9c 01 	lds	r25, 0x019C
    3918:	98 23       	and	r25, r24
    391a:	90 93 9c 01 	sts	0x019C, r25
    391e:	08 95       	ret

00003920 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3920:	80 93 9c 01 	sts	0x019C, r24
    3924:	08 95       	ret

00003926 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3926:	10 92 9c 01 	sts	0x019C, r1
    392a:	08 95       	ret

0000392c <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    392c:	90 91 9e 01 	lds	r25, 0x019E
    3930:	98 2b       	or	r25, r24
    3932:	90 93 9e 01 	sts	0x019E, r25
    3936:	08 95       	ret

00003938 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3938:	80 95       	com	r24
    393a:	90 91 9e 01 	lds	r25, 0x019E
    393e:	98 23       	and	r25, r24
    3940:	90 93 9e 01 	sts	0x019E, r25
    3944:	08 95       	ret

00003946 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3946:	10 92 9e 01 	sts	0x019E, r1
    394a:	08 95       	ret

0000394c <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    394c:	80 93 9d 01 	sts	0x019D, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3950:	08 95       	ret

00003952 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3952:	10 92 9d 01 	sts	0x019D, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3956:	08 95       	ret

00003958 <has_anykey>:

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    3958:	e0 91 0d 01 	lds	r30, 0x010D
    395c:	f0 91 0e 01 	lds	r31, 0x010E
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	91 e0       	ldi	r25, 0x01	; 1
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3964:	81 81       	ldd	r24, Z+1	; 0x01
    3966:	81 11       	cpse	r24, r1
            cnt++;
    3968:	2f 5f       	subi	r18, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    396a:	9f 5f       	subi	r25, 0xFF	; 255
    396c:	31 96       	adiw	r30, 0x01	; 1
    396e:	90 31       	cpi	r25, 0x10	; 16
    3970:	c9 f7       	brne	.-14     	; 0x3964 <has_anykey+0xc>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3972:	82 2f       	mov	r24, r18
    3974:	08 95       	ret

00003976 <del_key>:
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
{
    3976:	48 2f       	mov	r20, r24
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3978:	80 91 01 01 	lds	r24, 0x0101
    397c:	88 23       	and	r24, r24
    397e:	b9 f1       	breq	.+110    	; 0x39ee <del_key+0x78>
    3980:	80 91 0c 01 	lds	r24, 0x010C
    3984:	88 23       	and	r24, r24
    3986:	99 f1       	breq	.+102    	; 0x39ee <del_key+0x78>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3988:	84 2f       	mov	r24, r20
    398a:	86 95       	lsr	r24
    398c:	86 95       	lsr	r24
    398e:	86 95       	lsr	r24
    3990:	8f 30       	cpi	r24, 0x0F	; 15
    3992:	98 f4       	brcc	.+38     	; 0x39ba <del_key+0x44>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3994:	e0 91 0d 01 	lds	r30, 0x010D
    3998:	f0 91 0e 01 	lds	r31, 0x010E
    399c:	e8 0f       	add	r30, r24
    399e:	f1 1d       	adc	r31, r1
    39a0:	47 70       	andi	r20, 0x07	; 7
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	02 c0       	rjmp	.+4      	; 0x39ac <del_key+0x36>
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	4a 95       	dec	r20
    39ae:	e2 f7       	brpl	.-8      	; 0x39a8 <del_key+0x32>
    39b0:	80 95       	com	r24
    39b2:	21 81       	ldd	r18, Z+1	; 0x01
    39b4:	82 23       	and	r24, r18
    39b6:	81 83       	std	Z+1, r24	; 0x01
    39b8:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    39ba:	80 91 9f 01 	lds	r24, 0x019F
    39be:	80 ff       	sbrs	r24, 0
    39c0:	27 c0       	rjmp	.+78     	; 0x3a10 <del_key+0x9a>
    39c2:	00 d0       	rcall	.+0      	; 0x39c4 <del_key+0x4e>
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <del_key+0x50>
    39c6:	ed b7       	in	r30, 0x3d	; 61
    39c8:	fe b7       	in	r31, 0x3e	; 62
    39ca:	31 96       	adiw	r30, 0x01	; 1
    39cc:	88 e7       	ldi	r24, 0x78	; 120
    39ce:	94 e0       	ldi	r25, 0x04	; 4
    39d0:	ad b7       	in	r26, 0x3d	; 61
    39d2:	be b7       	in	r27, 0x3e	; 62
    39d4:	12 96       	adiw	r26, 0x02	; 2
    39d6:	9c 93       	st	X, r25
    39d8:	8e 93       	st	-X, r24
    39da:	11 97       	sbiw	r26, 0x01	; 1
    39dc:	42 83       	std	Z+2, r20	; 0x02
    39de:	13 82       	std	Z+3, r1	; 0x03
    39e0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	08 95       	ret
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    39f2:	e0 91 0d 01 	lds	r30, 0x010D
    39f6:	f0 91 0e 01 	lds	r31, 0x010E
    39fa:	e2 0f       	add	r30, r18
    39fc:	f3 1f       	adc	r31, r19
    39fe:	82 81       	ldd	r24, Z+2	; 0x02
    3a00:	84 17       	cp	r24, r20
    3a02:	09 f4       	brne	.+2      	; 0x3a06 <del_key+0x90>
            keyboard_report->keys[i] = 0;
    3a04:	12 82       	std	Z+2, r1	; 0x02
    3a06:	2f 5f       	subi	r18, 0xFF	; 255
    3a08:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3a0a:	2e 30       	cpi	r18, 0x0E	; 14
    3a0c:	31 05       	cpc	r19, r1
    3a0e:	89 f7       	brne	.-30     	; 0x39f2 <del_key+0x7c>
    3a10:	08 95       	ret

00003a12 <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    3a12:	38 2f       	mov	r19, r24
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3a14:	80 91 01 01 	lds	r24, 0x0101
    3a18:	88 23       	and	r24, r24
    3a1a:	b1 f1       	breq	.+108    	; 0x3a88 <add_key+0x76>
    3a1c:	80 91 0c 01 	lds	r24, 0x010C
    3a20:	88 23       	and	r24, r24
    3a22:	91 f1       	breq	.+100    	; 0x3a88 <add_key+0x76>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3a24:	83 2f       	mov	r24, r19
    3a26:	86 95       	lsr	r24
    3a28:	86 95       	lsr	r24
    3a2a:	86 95       	lsr	r24
    3a2c:	8f 30       	cpi	r24, 0x0F	; 15
    3a2e:	90 f4       	brcc	.+36     	; 0x3a54 <add_key+0x42>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3a30:	e0 91 0d 01 	lds	r30, 0x010D
    3a34:	f0 91 0e 01 	lds	r31, 0x010E
    3a38:	e8 0f       	add	r30, r24
    3a3a:	f1 1d       	adc	r31, r1
    3a3c:	37 70       	andi	r19, 0x07	; 7
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <add_key+0x36>
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	3a 95       	dec	r19
    3a4a:	e2 f7       	brpl	.-8      	; 0x3a44 <add_key+0x32>
    3a4c:	21 81       	ldd	r18, Z+1	; 0x01
    3a4e:	28 2b       	or	r18, r24
    3a50:	21 83       	std	Z+1, r18	; 0x01
    3a52:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3a54:	80 91 9f 01 	lds	r24, 0x019F
    3a58:	80 ff       	sbrs	r24, 0
    3a5a:	32 c0       	rjmp	.+100    	; 0x3ac0 <add_key+0xae>
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <add_key+0x4c>
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <add_key+0x4e>
    3a60:	ed b7       	in	r30, 0x3d	; 61
    3a62:	fe b7       	in	r31, 0x3e	; 62
    3a64:	31 96       	adiw	r30, 0x01	; 1
    3a66:	86 e9       	ldi	r24, 0x96	; 150
    3a68:	94 e0       	ldi	r25, 0x04	; 4
    3a6a:	ad b7       	in	r26, 0x3d	; 61
    3a6c:	be b7       	in	r27, 0x3e	; 62
    3a6e:	12 96       	adiw	r26, 0x02	; 2
    3a70:	9c 93       	st	X, r25
    3a72:	8e 93       	st	-X, r24
    3a74:	11 97       	sbiw	r26, 0x01	; 1
    3a76:	32 83       	std	Z+2, r19	; 0x02
    3a78:	13 82       	std	Z+3, r1	; 0x03
    3a7a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3a88:	a0 91 0d 01 	lds	r26, 0x010D
    3a8c:	b0 91 0e 01 	lds	r27, 0x010E
    3a90:	fd 01       	movw	r30, r26
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	8f ef       	ldi	r24, 0xFF	; 255
    3a96:	92 81       	ldd	r25, Z+2	; 0x02
    3a98:	93 17       	cp	r25, r19
    3a9a:	91 f0       	breq	.+36     	; 0x3ac0 <add_key+0xae>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a9e:	19 f4       	brne	.+6      	; 0x3aa6 <add_key+0x94>
    3aa0:	99 23       	and	r25, r25
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <add_key+0x94>
    3aa4:	82 2f       	mov	r24, r18
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3aa6:	2f 5f       	subi	r18, 0xFF	; 255
    3aa8:	31 96       	adiw	r30, 0x01	; 1
    3aaa:	2e 30       	cpi	r18, 0x0E	; 14
    3aac:	a1 f7       	brne	.-24     	; 0x3a96 <add_key+0x84>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3aae:	8f 3f       	cpi	r24, 0xFF	; 255
    3ab0:	39 f0       	breq	.+14     	; 0x3ac0 <add_key+0xae>
            keyboard_report->keys[empty] = code;
    3ab2:	99 27       	eor	r25, r25
    3ab4:	87 fd       	sbrc	r24, 7
    3ab6:	90 95       	com	r25
    3ab8:	a8 0f       	add	r26, r24
    3aba:	b9 1f       	adc	r27, r25
    3abc:	12 96       	adiw	r26, 0x02	; 2
    3abe:	3c 93       	st	X, r19
    3ac0:	08 95       	ret

00003ac2 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3ac2:	e0 91 0d 01 	lds	r30, 0x010D
    3ac6:	f0 91 0e 01 	lds	r31, 0x010E
    3aca:	80 91 9c 01 	lds	r24, 0x019C
    3ace:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3ad0:	e0 91 0d 01 	lds	r30, 0x010D
    3ad4:	f0 91 0e 01 	lds	r31, 0x010E
    3ad8:	80 81       	ld	r24, Z
    3ada:	90 91 9e 01 	lds	r25, 0x019E
    3ade:	89 2b       	or	r24, r25
    3ae0:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3ae2:	90 91 9d 01 	lds	r25, 0x019D
    3ae6:	99 23       	and	r25, r25
    3ae8:	69 f0       	breq	.+26     	; 0x3b04 <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3aea:	e0 91 0d 01 	lds	r30, 0x010D
    3aee:	f0 91 0e 01 	lds	r31, 0x010E
    3af2:	80 81       	ld	r24, Z
    3af4:	89 2b       	or	r24, r25
    3af6:	80 83       	st	Z, r24
        if (has_anykey()) {
    3af8:	0e 94 ac 1c 	call	0x3958	; 0x3958 <has_anykey>
    3afc:	88 23       	and	r24, r24
    3afe:	11 f0       	breq	.+4      	; 0x3b04 <send_keyboard_report+0x42>
            clear_oneshot_mods();
    3b00:	0e 94 a9 1c 	call	0x3952	; 0x3952 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3b04:	80 91 0d 01 	lds	r24, 0x010D
    3b08:	90 91 0e 01 	lds	r25, 0x010E
    3b0c:	0e 94 97 11 	call	0x232e	; 0x232e <host_keyboard_send>
}
    3b10:	08 95       	ret

00003b12 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3b12:	90 93 17 01 	sts	0x0117, r25
    3b16:	80 93 16 01 	sts	0x0116, r24
}
    3b1a:	08 95       	ret

00003b1c <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3b1c:	28 2f       	mov	r18, r24
    3b1e:	22 95       	swap	r18
    3b20:	2f 70       	andi	r18, 0x0F	; 15
    3b22:	82 95       	swap	r24
    3b24:	80 7f       	andi	r24, 0xF0	; 240
    3b26:	28 2b       	or	r18, r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	c9 01       	movw	r24, r18
    3b2c:	8c 7c       	andi	r24, 0xCC	; 204
    3b2e:	90 70       	andi	r25, 0x00	; 0
    3b30:	95 95       	asr	r25
    3b32:	87 95       	ror	r24
    3b34:	95 95       	asr	r25
    3b36:	87 95       	ror	r24
    3b38:	23 73       	andi	r18, 0x33	; 51
    3b3a:	30 70       	andi	r19, 0x00	; 0
    3b3c:	22 0f       	add	r18, r18
    3b3e:	33 1f       	adc	r19, r19
    3b40:	22 0f       	add	r18, r18
    3b42:	33 1f       	adc	r19, r19
    3b44:	82 2b       	or	r24, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3b46:	28 2f       	mov	r18, r24
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	c9 01       	movw	r24, r18
    3b4c:	8a 7a       	andi	r24, 0xAA	; 170
    3b4e:	90 70       	andi	r25, 0x00	; 0
    3b50:	95 95       	asr	r25
    3b52:	87 95       	ror	r24
    3b54:	25 75       	andi	r18, 0x55	; 85
    3b56:	30 70       	andi	r19, 0x00	; 0
    3b58:	22 0f       	add	r18, r18
    3b5a:	33 1f       	adc	r19, r19
    return bits;
}
    3b5c:	82 2b       	or	r24, r18
    3b5e:	08 95       	ret

00003b60 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
    3b64:	19 2f       	mov	r17, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3b66:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <bitrev>
    3b6a:	08 2f       	mov	r16, r24
    3b6c:	81 2f       	mov	r24, r17
    3b6e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <bitrev>
    3b72:	50 2f       	mov	r21, r16
    3b74:	40 e0       	ldi	r20, 0x00	; 0
    3b76:	28 2f       	mov	r18, r24
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	24 2b       	or	r18, r20
    3b7c:	35 2b       	or	r19, r21
    return bits;
}
    3b7e:	c9 01       	movw	r24, r18
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	08 95       	ret

00003b86 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3b86:	80 91 b4 01 	lds	r24, 0x01B4
    3b8a:	84 30       	cpi	r24, 0x04	; 4
    3b8c:	09 f1       	breq	.+66     	; 0x3bd0 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3b8e:	10 92 a0 01 	sts	0x01A0, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3b92:	20 e4       	ldi	r18, 0x40	; 64
    3b94:	88 e1       	ldi	r24, 0x18	; 24
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0f b6       	in	r0, 0x3f	; 63
    3b9a:	f8 94       	cli
    3b9c:	a8 95       	wdr
    3b9e:	80 93 60 00 	sts	0x0060, r24
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3ba8:	83 b7       	in	r24, 0x33	; 51
    3baa:	81 7f       	andi	r24, 0xF1	; 241
    3bac:	84 60       	ori	r24, 0x04	; 4
    3bae:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3bb0:	83 b7       	in	r24, 0x33	; 51
    3bb2:	81 60       	ori	r24, 0x01	; 1
    3bb4:	83 bf       	out	0x33, r24	; 51
    sei();
    3bb6:	78 94       	sei
    sleep_cpu();
    3bb8:	88 95       	sleep
    sleep_disable();
    3bba:	83 b7       	in	r24, 0x33	; 51
    3bbc:	8e 7f       	andi	r24, 0xFE	; 254
    3bbe:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3bc0:	88 e1       	ldi	r24, 0x18	; 24
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	80 93 60 00 	sts	0x0060, r24
    3bca:	10 92 60 00 	sts	0x0060, r1
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	08 95       	ret

00003bd2 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3bd2:	08 95       	ret

00003bd4 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3bd4:	08 95       	ret

00003bd6 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3bd6:	1f 92       	push	r1
    3bd8:	0f 92       	push	r0
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	0f 92       	push	r0
    3bde:	11 24       	eor	r1, r1
    3be0:	8f 93       	push	r24
    3be2:	9f 93       	push	r25
    3be4:	af 93       	push	r26
    3be6:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3be8:	80 91 a0 01 	lds	r24, 0x01A0
    3bec:	88 23       	and	r24, r24
    3bee:	99 f4       	brne	.+38     	; 0x3c16 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3bf0:	80 91 a1 01 	lds	r24, 0x01A1
    3bf4:	90 91 a2 01 	lds	r25, 0x01A2
    3bf8:	a0 91 a3 01 	lds	r26, 0x01A3
    3bfc:	b0 91 a4 01 	lds	r27, 0x01A4
    3c00:	41 96       	adiw	r24, 0x11	; 17
    3c02:	a1 1d       	adc	r26, r1
    3c04:	b1 1d       	adc	r27, r1
    3c06:	80 93 a1 01 	sts	0x01A1, r24
    3c0a:	90 93 a2 01 	sts	0x01A2, r25
    3c0e:	a0 93 a3 01 	sts	0x01A3, r26
    3c12:	b0 93 a4 01 	sts	0x01A4, r27
            break;
        default:
            ;
    }
}
    3c16:	bf 91       	pop	r27
    3c18:	af 91       	pop	r26
    3c1a:	9f 91       	pop	r25
    3c1c:	8f 91       	pop	r24
    3c1e:	0f 90       	pop	r0
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	0f 90       	pop	r0
    3c24:	1f 90       	pop	r1
    3c26:	18 95       	reti

00003c28 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3c28:	0e 94 32 13 	call	0x2664	; 0x2664 <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    3c2c:	08 95       	ret

00003c2e <suspend_wakeup_condition>:

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    3c2e:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <matrix_power_up>
    matrix_scan();
    3c32:	0e 94 7d 07 	call	0xefa	; 0xefa <matrix_scan>
    matrix_power_down();
    3c36:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	0e 94 42 07 	call	0xe84	; 0xe84 <matrix_get_row>
    3c40:	89 2b       	or	r24, r25
    3c42:	81 f4       	brne	.+32     	; 0x3c64 <suspend_wakeup_condition+0x36>
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	0e 94 42 07 	call	0xe84	; 0xe84 <matrix_get_row>
    3c4a:	89 2b       	or	r24, r25
    3c4c:	59 f4       	brne	.+22     	; 0x3c64 <suspend_wakeup_condition+0x36>
    3c4e:	82 e0       	ldi	r24, 0x02	; 2
    3c50:	0e 94 42 07 	call	0xe84	; 0xe84 <matrix_get_row>
    3c54:	89 2b       	or	r24, r25
    3c56:	31 f4       	brne	.+12     	; 0x3c64 <suspend_wakeup_condition+0x36>
    3c58:	83 e0       	ldi	r24, 0x03	; 3
    3c5a:	0e 94 42 07 	call	0xe84	; 0xe84 <matrix_get_row>
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	89 2b       	or	r24, r25
    3c62:	09 f0       	breq	.+2      	; 0x3c66 <suspend_wakeup_condition+0x38>
    3c64:	21 e0       	ldi	r18, 0x01	; 1
    }
    return false;
}
    3c66:	82 2f       	mov	r24, r18
    3c68:	08 95       	ret

00003c6a <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3c6a:	82 e0       	ldi	r24, 0x02	; 2
    3c6c:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3c6e:	93 e0       	ldi	r25, 0x03	; 3
    3c70:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3c72:	9a ef       	ldi	r25, 0xFA	; 250
    3c74:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3c76:	80 93 6e 00 	sts	0x006E, r24
}
    3c7a:	08 95       	ret

00003c7c <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3c7c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3c7e:	f8 94       	cli
    t = timer_count;
    3c80:	20 91 a1 01 	lds	r18, 0x01A1
    3c84:	30 91 a2 01 	lds	r19, 0x01A2
    3c88:	40 91 a3 01 	lds	r20, 0x01A3
    3c8c:	50 91 a4 01 	lds	r21, 0x01A4
    SREG = sreg;
    3c90:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    3c92:	c9 01       	movw	r24, r18
    3c94:	08 95       	ret

00003c96 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3c96:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3c98:	f8 94       	cli
    t = timer_count;
    3c9a:	20 91 a1 01 	lds	r18, 0x01A1
    3c9e:	30 91 a2 01 	lds	r19, 0x01A2
    3ca2:	40 91 a3 01 	lds	r20, 0x01A3
    3ca6:	50 91 a4 01 	lds	r21, 0x01A4
    SREG = sreg;
    3caa:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    3cac:	b9 01       	movw	r22, r18
    3cae:	ca 01       	movw	r24, r20
    3cb0:	08 95       	ret

00003cb2 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3cb2:	ef 92       	push	r14
    3cb4:	ff 92       	push	r15
    3cb6:	0f 93       	push	r16
    3cb8:	1f 93       	push	r17
    3cba:	bc 01       	movw	r22, r24
    uint32_t t;

    uint8_t sreg = SREG;
    3cbc:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3cbe:	f8 94       	cli
    t = timer_count;
    3cc0:	e0 90 a1 01 	lds	r14, 0x01A1
    3cc4:	f0 90 a2 01 	lds	r15, 0x01A2
    3cc8:	00 91 a3 01 	lds	r16, 0x01A3
    3ccc:	10 91 a4 01 	lds	r17, 0x01A4
    SREG = sreg;
    3cd0:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3cd2:	a8 01       	movw	r20, r16
    3cd4:	97 01       	movw	r18, r14
    3cd6:	40 70       	andi	r20, 0x00	; 0
    3cd8:	50 70       	andi	r21, 0x00	; 0
    3cda:	cb 01       	movw	r24, r22
    3cdc:	a0 e0       	ldi	r26, 0x00	; 0
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	28 17       	cp	r18, r24
    3ce2:	39 07       	cpc	r19, r25
    3ce4:	4a 07       	cpc	r20, r26
    3ce6:	5b 07       	cpc	r21, r27
    3ce8:	20 f0       	brcs	.+8      	; 0x3cf2 <timer_elapsed+0x40>
    3cea:	97 01       	movw	r18, r14
    3cec:	26 1b       	sub	r18, r22
    3cee:	37 0b       	sbc	r19, r23
    3cf0:	05 c0       	rjmp	.+10     	; 0x3cfc <timer_elapsed+0x4a>
    3cf2:	9b 01       	movw	r18, r22
    3cf4:	20 95       	com	r18
    3cf6:	30 95       	com	r19
    3cf8:	2e 0d       	add	r18, r14
    3cfa:	3f 1d       	adc	r19, r15
}
    3cfc:	c9 01       	movw	r24, r18
    3cfe:	1f 91       	pop	r17
    3d00:	0f 91       	pop	r16
    3d02:	ff 90       	pop	r15
    3d04:	ef 90       	pop	r14
    3d06:	08 95       	ret

00003d08 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3d08:	1f 92       	push	r1
    3d0a:	0f 92       	push	r0
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	0f 92       	push	r0
    3d10:	11 24       	eor	r1, r1
    3d12:	8f 93       	push	r24
    3d14:	9f 93       	push	r25
    3d16:	af 93       	push	r26
    3d18:	bf 93       	push	r27
    timer_count++;
    3d1a:	80 91 a1 01 	lds	r24, 0x01A1
    3d1e:	90 91 a2 01 	lds	r25, 0x01A2
    3d22:	a0 91 a3 01 	lds	r26, 0x01A3
    3d26:	b0 91 a4 01 	lds	r27, 0x01A4
    3d2a:	01 96       	adiw	r24, 0x01	; 1
    3d2c:	a1 1d       	adc	r26, r1
    3d2e:	b1 1d       	adc	r27, r1
    3d30:	80 93 a1 01 	sts	0x01A1, r24
    3d34:	90 93 a2 01 	sts	0x01A2, r25
    3d38:	a0 93 a3 01 	sts	0x01A3, r26
    3d3c:	b0 93 a4 01 	sts	0x01A4, r27
}
    3d40:	bf 91       	pop	r27
    3d42:	af 91       	pop	r26
    3d44:	9f 91       	pop	r25
    3d46:	8f 91       	pop	r24
    3d48:	0f 90       	pop	r0
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	0f 90       	pop	r0
    3d4e:	1f 90       	pop	r1
    3d50:	18 95       	reti

00003d52 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3d52:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <USB_Disable>
    cli();
    3d56:	f8 94       	cli
    3d58:	80 e2       	ldi	r24, 0x20	; 32
    3d5a:	9e e4       	ldi	r25, 0x4E	; 78
    3d5c:	20 e9       	ldi	r18, 0x90	; 144
    3d5e:	31 e0       	ldi	r19, 0x01	; 1
    3d60:	f9 01       	movw	r30, r18
    3d62:	31 97       	sbiw	r30, 0x01	; 1
    3d64:	f1 f7       	brne	.-4      	; 0x3d62 <bootloader_jump+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d68:	d9 f7       	brne	.-10     	; 0x3d60 <bootloader_jump+0xe>
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3d6a:	87 e0       	ldi	r24, 0x07	; 7
    3d6c:	90 eb       	ldi	r25, 0xB0	; 176
    3d6e:	a7 e0       	ldi	r26, 0x07	; 7
    3d70:	b0 eb       	ldi	r27, 0xB0	; 176
    3d72:	80 93 be 01 	sts	0x01BE, r24
    3d76:	90 93 bf 01 	sts	0x01BF, r25
    3d7a:	a0 93 c0 01 	sts	0x01C0, r26
    3d7e:	b0 93 c1 01 	sts	0x01C1, r27
    wdt_enable(WDTO_250MS);
    3d82:	2c e0       	ldi	r18, 0x0C	; 12
    3d84:	88 e1       	ldi	r24, 0x18	; 24
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	a8 95       	wdr
    3d8e:	80 93 60 00 	sts	0x0060, r24
    3d92:	0f be       	out	0x3f, r0	; 63
    3d94:	20 93 60 00 	sts	0x0060, r18
    3d98:	ff cf       	rjmp	.-2      	; 0x3d98 <bootloader_jump+0x46>

00003d9a <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	08 95       	ret

00003da0 <action_function>:
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    (void)record;
    (void)id;
    (void)opt;
}
    3da0:	08 95       	ret

00003da2 <keycode_to_action>:



/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    3da2:	cf 93       	push	r28
    3da4:	df 93       	push	r29
    3da6:	28 2f       	mov	r18, r24
    action_t action = {};
    3da8:	c0 e0       	ldi	r28, 0x00	; 0
    3daa:	d0 e0       	ldi	r29, 0x00	; 0
    switch (keycode) {
    3dac:	8f 3a       	cpi	r24, 0xAF	; 175
    3dae:	50 f4       	brcc	.+20     	; 0x3dc4 <keycode_to_action+0x22>
    3db0:	88 3a       	cpi	r24, 0xA8	; 168
    3db2:	28 f5       	brcc	.+74     	; 0x3dfe <keycode_to_action+0x5c>
    3db4:	85 3a       	cpi	r24, 0xA5	; 165
    3db6:	b0 f4       	brcc	.+44     	; 0x3de4 <keycode_to_action+0x42>
    3db8:	84 30       	cpi	r24, 0x04	; 4
    3dba:	80 f4       	brcc	.+32     	; 0x3ddc <keycode_to_action+0x3a>
    3dbc:	81 30       	cpi	r24, 0x01	; 1
    3dbe:	09 f0       	breq	.+2      	; 0x3dc2 <keycode_to_action+0x20>
    3dc0:	55 c0       	rjmp	.+170    	; 0x3e6c <keycode_to_action+0xca>
    3dc2:	43 c0       	rjmp	.+134    	; 0x3e4a <keycode_to_action+0xa8>
    3dc4:	88 3e       	cpi	r24, 0xE8	; 232
    3dc6:	30 f4       	brcc	.+12     	; 0x3dd4 <keycode_to_action+0x32>
    3dc8:	80 3e       	cpi	r24, 0xE0	; 224
    3dca:	40 f4       	brcc	.+16     	; 0x3ddc <keycode_to_action+0x3a>
    3dcc:	8f 3b       	cpi	r24, 0xBF	; 191
    3dce:	09 f0       	breq	.+2      	; 0x3dd2 <keycode_to_action+0x30>
    3dd0:	4d c0       	rjmp	.+154    	; 0x3e6c <keycode_to_action+0xca>
    3dd2:	3e c0       	rjmp	.+124    	; 0x3e50 <keycode_to_action+0xae>
    3dd4:	80 3f       	cpi	r24, 0xF0	; 240
    3dd6:	08 f4       	brcc	.+2      	; 0x3dda <keycode_to_action+0x38>
    3dd8:	49 c0       	rjmp	.+146    	; 0x3e6c <keycode_to_action+0xca>
    3dda:	33 c0       	rjmp	.+102    	; 0x3e42 <keycode_to_action+0xa0>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3ddc:	82 2f       	mov	r24, r18
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	9c 01       	movw	r18, r24
    3de2:	2d c0       	rjmp	.+90     	; 0x3e3e <keycode_to_action+0x9c>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3de4:	85 3a       	cpi	r24, 0xA5	; 165
    3de6:	19 f4       	brne	.+6      	; 0x3dee <keycode_to_action+0x4c>
    3de8:	21 e8       	ldi	r18, 0x81	; 129
    3dea:	30 e4       	ldi	r19, 0x40	; 64
    3dec:	28 c0       	rjmp	.+80     	; 0x3e3e <keycode_to_action+0x9c>
    3dee:	86 3a       	cpi	r24, 0xA6	; 166
    3df0:	19 f0       	breq	.+6      	; 0x3df8 <keycode_to_action+0x56>
    3df2:	23 e8       	ldi	r18, 0x83	; 131
    3df4:	30 e4       	ldi	r19, 0x40	; 64
    3df6:	23 c0       	rjmp	.+70     	; 0x3e3e <keycode_to_action+0x9c>
    3df8:	22 e8       	ldi	r18, 0x82	; 130
    3dfa:	30 e4       	ldi	r19, 0x40	; 64
    3dfc:	20 c0       	rjmp	.+64     	; 0x3e3e <keycode_to_action+0x9c>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3dfe:	88 3a       	cpi	r24, 0xA8	; 168
    3e00:	19 f4       	brne	.+6      	; 0x3e08 <keycode_to_action+0x66>
    3e02:	22 ee       	ldi	r18, 0xE2	; 226
    3e04:	34 e4       	ldi	r19, 0x44	; 68
    3e06:	1b c0       	rjmp	.+54     	; 0x3e3e <keycode_to_action+0x9c>
    3e08:	89 3a       	cpi	r24, 0xA9	; 169
    3e0a:	19 f4       	brne	.+6      	; 0x3e12 <keycode_to_action+0x70>
    3e0c:	29 ee       	ldi	r18, 0xE9	; 233
    3e0e:	34 e4       	ldi	r19, 0x44	; 68
    3e10:	16 c0       	rjmp	.+44     	; 0x3e3e <keycode_to_action+0x9c>
    3e12:	8a 3a       	cpi	r24, 0xAA	; 170
    3e14:	19 f4       	brne	.+6      	; 0x3e1c <keycode_to_action+0x7a>
    3e16:	2a ee       	ldi	r18, 0xEA	; 234
    3e18:	34 e4       	ldi	r19, 0x44	; 68
    3e1a:	11 c0       	rjmp	.+34     	; 0x3e3e <keycode_to_action+0x9c>
    3e1c:	8b 3a       	cpi	r24, 0xAB	; 171
    3e1e:	19 f4       	brne	.+6      	; 0x3e26 <keycode_to_action+0x84>
    3e20:	25 eb       	ldi	r18, 0xB5	; 181
    3e22:	34 e4       	ldi	r19, 0x44	; 68
    3e24:	0c c0       	rjmp	.+24     	; 0x3e3e <keycode_to_action+0x9c>
    3e26:	8c 3a       	cpi	r24, 0xAC	; 172
    3e28:	19 f4       	brne	.+6      	; 0x3e30 <keycode_to_action+0x8e>
    3e2a:	26 eb       	ldi	r18, 0xB6	; 182
    3e2c:	34 e4       	ldi	r19, 0x44	; 68
    3e2e:	07 c0       	rjmp	.+14     	; 0x3e3e <keycode_to_action+0x9c>
    3e30:	8d 3a       	cpi	r24, 0xAD	; 173
    3e32:	19 f0       	breq	.+6      	; 0x3e3a <keycode_to_action+0x98>
    3e34:	24 eb       	ldi	r18, 0xB4	; 180
    3e36:	34 e4       	ldi	r19, 0x44	; 68
    3e38:	02 c0       	rjmp	.+4      	; 0x3e3e <keycode_to_action+0x9c>
    3e3a:	23 eb       	ldi	r18, 0xB3	; 179
    3e3c:	34 e4       	ldi	r19, 0x44	; 68
    3e3e:	e9 01       	movw	r28, r18
    3e40:	17 c0       	rjmp	.+46     	; 0x3e70 <keycode_to_action+0xce>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3e42:	c8 2f       	mov	r28, r24
    3e44:	d0 e0       	ldi	r29, 0x00	; 0
    3e46:	d0 65       	ori	r29, 0x50	; 80
    3e48:	13 c0       	rjmp	.+38     	; 0x3e70 <keycode_to_action+0xce>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3e4a:	c1 e0       	ldi	r28, 0x01	; 1
    3e4c:	d0 e0       	ldi	r29, 0x00	; 0
    3e4e:	10 c0       	rjmp	.+32     	; 0x3e70 <keycode_to_action+0xce>
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3e50:	0e 94 32 13 	call	0x2664	; 0x2664 <clear_keyboard>
    3e54:	84 ef       	ldi	r24, 0xF4	; 244
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	20 e9       	ldi	r18, 0x90	; 144
    3e5a:	31 e0       	ldi	r19, 0x01	; 1
    3e5c:	f9 01       	movw	r30, r18
    3e5e:	31 97       	sbiw	r30, 0x01	; 1
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <keycode_to_action+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e62:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e64:	d9 f7       	brne	.-10     	; 0x3e5c <keycode_to_action+0xba>
            wait_ms(50);
            bootloader_jump(); // not return
    3e66:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <bootloader_jump>
    3e6a:	02 c0       	rjmp	.+4      	; 0x3e70 <keycode_to_action+0xce>
            break;
        default:
            action.code = ACTION_NO;
    3e6c:	c0 e0       	ldi	r28, 0x00	; 0
    3e6e:	d0 e0       	ldi	r29, 0x00	; 0
            break;
    }
    return action;
}
    3e70:	ce 01       	movw	r24, r28
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	08 95       	ret

00003e78 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3e78:	0e 94 27 07 	call	0xe4e	; 0xe4e <keymap_key_to_keycode>
    switch (keycode) {
    3e7c:	80 3e       	cpi	r24, 0xE0	; 224
    3e7e:	b0 f4       	brcc	.+44     	; 0x3eac <action_for_key+0x34>
    3e80:	80 3c       	cpi	r24, 0xC0	; 192
    3e82:	20 f5       	brcc	.+72     	; 0x3ecc <action_for_key+0x54>
    3e84:	81 33       	cpi	r24, 0x31	; 49
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <action_for_key+0x12>
    3e88:	60 c0       	rjmp	.+192    	; 0x3f4a <action_for_key+0xd2>
    3e8a:	82 33       	cpi	r24, 0x32	; 50
    3e8c:	38 f4       	brcc	.+14     	; 0x3e9c <action_for_key+0x24>
    3e8e:	89 32       	cpi	r24, 0x29	; 41
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <action_for_key+0x1c>
    3e92:	53 c0       	rjmp	.+166    	; 0x3f3a <action_for_key+0xc2>
    3e94:	8a 32       	cpi	r24, 0x2A	; 42
    3e96:	09 f0       	breq	.+2      	; 0x3e9a <action_for_key+0x22>
    3e98:	67 c0       	rjmp	.+206    	; 0x3f68 <action_for_key+0xf0>
    3e9a:	5c c0       	rjmp	.+184    	; 0x3f54 <action_for_key+0xdc>
    3e9c:	89 33       	cpi	r24, 0x39	; 57
    3e9e:	c9 f0       	breq	.+50     	; 0x3ed2 <action_for_key+0x5a>
    3ea0:	82 38       	cpi	r24, 0x82	; 130
    3ea2:	b9 f0       	breq	.+46     	; 0x3ed2 <action_for_key+0x5a>
    3ea4:	85 33       	cpi	r24, 0x35	; 53
    3ea6:	09 f0       	breq	.+2      	; 0x3eaa <action_for_key+0x32>
    3ea8:	5f c0       	rjmp	.+190    	; 0x3f68 <action_for_key+0xf0>
    3eaa:	42 c0       	rjmp	.+132    	; 0x3f30 <action_for_key+0xb8>
    3eac:	83 3e       	cpi	r24, 0xE3	; 227
    3eae:	29 f1       	breq	.+74     	; 0x3efa <action_for_key+0x82>
    3eb0:	84 3e       	cpi	r24, 0xE4	; 228
    3eb2:	30 f4       	brcc	.+12     	; 0x3ec0 <action_for_key+0x48>
    3eb4:	80 3e       	cpi	r24, 0xE0	; 224
    3eb6:	a1 f0       	breq	.+40     	; 0x3ee0 <action_for_key+0x68>
    3eb8:	82 3e       	cpi	r24, 0xE2	; 226
    3eba:	09 f0       	breq	.+2      	; 0x3ebe <action_for_key+0x46>
    3ebc:	55 c0       	rjmp	.+170    	; 0x3f68 <action_for_key+0xf0>
    3ebe:	18 c0       	rjmp	.+48     	; 0x3ef0 <action_for_key+0x78>
    3ec0:	86 3e       	cpi	r24, 0xE6	; 230
    3ec2:	29 f1       	breq	.+74     	; 0x3f0e <action_for_key+0x96>
    3ec4:	87 3e       	cpi	r24, 0xE7	; 231
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <action_for_key+0x52>
    3ec8:	4f c0       	rjmp	.+158    	; 0x3f68 <action_for_key+0xf0>
    3eca:	26 c0       	rjmp	.+76     	; 0x3f18 <action_for_key+0xa0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3ecc:	0e 94 38 07 	call	0xe70	; 0xe70 <keymap_fn_to_action>
    3ed0:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3ed2:	90 91 bd 01 	lds	r25, 0x01BD
    3ed6:	90 fd       	sbrc	r25, 0
    3ed8:	09 c0       	rjmp	.+18     	; 0x3eec <action_for_key+0x74>
    3eda:	91 fd       	sbrc	r25, 1
    3edc:	07 c0       	rjmp	.+14     	; 0x3eec <action_for_key+0x74>
    3ede:	41 c0       	rjmp	.+130    	; 0x3f62 <action_for_key+0xea>
                return keycode_to_action(KC_LCTL);
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3ee0:	80 91 bd 01 	lds	r24, 0x01BD
    3ee4:	80 ff       	sbrs	r24, 0
    3ee6:	02 c0       	rjmp	.+4      	; 0x3eec <action_for_key+0x74>
                return keycode_to_action(KC_CAPSLOCK);
    3ee8:	89 e3       	ldi	r24, 0x39	; 57
    3eea:	3b c0       	rjmp	.+118    	; 0x3f62 <action_for_key+0xea>
            }
            return keycode_to_action(KC_LCTL);
    3eec:	80 ee       	ldi	r24, 0xE0	; 224
    3eee:	39 c0       	rjmp	.+114    	; 0x3f62 <action_for_key+0xea>
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3ef0:	80 91 bd 01 	lds	r24, 0x01BD
    3ef4:	82 fd       	sbrc	r24, 2
    3ef6:	07 c0       	rjmp	.+14     	; 0x3f06 <action_for_key+0x8e>
    3ef8:	04 c0       	rjmp	.+8      	; 0x3f02 <action_for_key+0x8a>
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3efa:	80 91 bd 01 	lds	r24, 0x01BD
    3efe:	82 ff       	sbrs	r24, 2
    3f00:	02 c0       	rjmp	.+4      	; 0x3f06 <action_for_key+0x8e>
                return keycode_to_action(KC_LALT);
    3f02:	82 ee       	ldi	r24, 0xE2	; 226
    3f04:	2e c0       	rjmp	.+92     	; 0x3f62 <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    3f06:	84 fd       	sbrc	r24, 4
    3f08:	0f c0       	rjmp	.+30     	; 0x3f28 <action_for_key+0xb0>
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
    3f0a:	83 ee       	ldi	r24, 0xE3	; 227
    3f0c:	2a c0       	rjmp	.+84     	; 0x3f62 <action_for_key+0xea>
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3f0e:	80 91 bd 01 	lds	r24, 0x01BD
    3f12:	83 fd       	sbrc	r24, 3
    3f14:	07 c0       	rjmp	.+14     	; 0x3f24 <action_for_key+0xac>
    3f16:	04 c0       	rjmp	.+8      	; 0x3f20 <action_for_key+0xa8>
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3f18:	80 91 bd 01 	lds	r24, 0x01BD
    3f1c:	83 ff       	sbrs	r24, 3
    3f1e:	02 c0       	rjmp	.+4      	; 0x3f24 <action_for_key+0xac>
                return keycode_to_action(KC_RALT);
    3f20:	86 ee       	ldi	r24, 0xE6	; 230
    3f22:	1f c0       	rjmp	.+62     	; 0x3f62 <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    3f24:	84 ff       	sbrs	r24, 4
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <action_for_key+0xb4>
                return keycode_to_action(ACTION_NO);
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	1b c0       	rjmp	.+54     	; 0x3f62 <action_for_key+0xea>
            }
            return keycode_to_action(KC_RGUI);
    3f2c:	87 ee       	ldi	r24, 0xE7	; 231
    3f2e:	19 c0       	rjmp	.+50     	; 0x3f62 <action_for_key+0xea>
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3f30:	80 91 bd 01 	lds	r24, 0x01BD
    3f34:	85 ff       	sbrs	r24, 5
    3f36:	05 c0       	rjmp	.+10     	; 0x3f42 <action_for_key+0xca>
    3f38:	06 c0       	rjmp	.+12     	; 0x3f46 <action_for_key+0xce>
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3f3a:	80 91 bd 01 	lds	r24, 0x01BD
    3f3e:	85 ff       	sbrs	r24, 5
    3f40:	02 c0       	rjmp	.+4      	; 0x3f46 <action_for_key+0xce>
                return keycode_to_action(KC_GRAVE);
    3f42:	85 e3       	ldi	r24, 0x35	; 53
    3f44:	0e c0       	rjmp	.+28     	; 0x3f62 <action_for_key+0xea>
            }
            return keycode_to_action(KC_ESC);
    3f46:	89 e2       	ldi	r24, 0x29	; 41
    3f48:	0c c0       	rjmp	.+24     	; 0x3f62 <action_for_key+0xea>
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3f4a:	80 91 bd 01 	lds	r24, 0x01BD
    3f4e:	86 ff       	sbrs	r24, 6
    3f50:	05 c0       	rjmp	.+10     	; 0x3f5c <action_for_key+0xe4>
    3f52:	06 c0       	rjmp	.+12     	; 0x3f60 <action_for_key+0xe8>
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3f54:	80 91 bd 01 	lds	r24, 0x01BD
    3f58:	86 ff       	sbrs	r24, 6
    3f5a:	02 c0       	rjmp	.+4      	; 0x3f60 <action_for_key+0xe8>
                return keycode_to_action(KC_BSLASH);
    3f5c:	81 e3       	ldi	r24, 0x31	; 49
    3f5e:	01 c0       	rjmp	.+2      	; 0x3f62 <action_for_key+0xea>
            }
            return keycode_to_action(KC_BSPACE);
    3f60:	8a e2       	ldi	r24, 0x2A	; 42
    3f62:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <keycode_to_action>
    3f66:	08 95       	ret
#endif
        default:
            return keycode_to_action(keycode);
    3f68:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <keycode_to_action>
    }
}
    3f6c:	08 95       	ret

00003f6e <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3f6e:	af 92       	push	r10
    3f70:	bf 92       	push	r11
    3f72:	cf 92       	push	r12
    3f74:	df 92       	push	r13
    3f76:	ef 92       	push	r14
    3f78:	ff 92       	push	r15
    3f7a:	1f 93       	push	r17
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	7c 01       	movw	r14, r24
    3f82:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	a8 2e       	mov	r10, r24
    3f88:	b1 2c       	mov	r11, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3f8a:	81 2f       	mov	r24, r17
    3f8c:	0e 94 42 07 	call	0xe84	; 0xe84 <matrix_get_row>
    3f90:	6c 01       	movw	r12, r24
    3f92:	c0 e0       	ldi	r28, 0x00	; 0
    3f94:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3f96:	c5 01       	movw	r24, r10
    3f98:	0c 2e       	mov	r0, r28
    3f9a:	02 c0       	rjmp	.+4      	; 0x3fa0 <scan_key+0x32>
    3f9c:	88 0f       	add	r24, r24
    3f9e:	99 1f       	adc	r25, r25
    3fa0:	0a 94       	dec	r0
    3fa2:	e2 f7       	brpl	.-8      	; 0x3f9c <scan_key+0x2e>
    3fa4:	8c 21       	and	r24, r12
    3fa6:	9d 21       	and	r25, r13
    3fa8:	89 2b       	or	r24, r25
    3faa:	d9 f0       	breq	.+54     	; 0x3fe2 <scan_key+0x74>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	6c 2f       	mov	r22, r28
    3fb0:	71 2f       	mov	r23, r17
    3fb2:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <action_for_key>
    3fb6:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3fb8:	8e 15       	cp	r24, r14
    3fba:	9f 05       	cpc	r25, r15
    3fbc:	d9 f0       	breq	.+54     	; 0x3ff4 <scan_key+0x86>
    3fbe:	83 2f       	mov	r24, r19
    3fc0:	80 7f       	andi	r24, 0xF0	; 240
    3fc2:	51 f0       	breq	.+20     	; 0x3fd8 <scan_key+0x6a>
    3fc4:	80 31       	cpi	r24, 0x10	; 16
    3fc6:	41 f0       	breq	.+16     	; 0x3fd8 <scan_key+0x6a>
    3fc8:	80 32       	cpi	r24, 0x20	; 32
    3fca:	31 f0       	breq	.+12     	; 0x3fd8 <scan_key+0x6a>
    3fcc:	80 33       	cpi	r24, 0x30	; 48
    3fce:	21 f0       	breq	.+8      	; 0x3fd8 <scan_key+0x6a>
    3fd0:	80 3a       	cpi	r24, 0xA0	; 160
    3fd2:	11 f0       	breq	.+4      	; 0x3fd8 <scan_key+0x6a>
    3fd4:	80 3b       	cpi	r24, 0xB0	; 176
    3fd6:	29 f4       	brne	.+10     	; 0x3fe2 <scan_key+0x74>
    3fd8:	82 2f       	mov	r24, r18
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	8e 15       	cp	r24, r14
    3fde:	9f 05       	cpc	r25, r15
    3fe0:	49 f0       	breq	.+18     	; 0x3ff4 <scan_key+0x86>
    3fe2:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3fe4:	cc 30       	cpi	r28, 0x0C	; 12
    3fe6:	d1 05       	cpc	r29, r1
    3fe8:	b1 f6       	brne	.-84     	; 0x3f96 <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fea:	1f 5f       	subi	r17, 0xFF	; 255
    3fec:	14 30       	cpi	r17, 0x04	; 4
    3fee:	69 f6       	brne	.-102    	; 0x3f8a <scan_key+0x1c>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	01 c0       	rjmp	.+2      	; 0x3ff6 <scan_key+0x88>
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    3ff6:	df 91       	pop	r29
    3ff8:	cf 91       	pop	r28
    3ffa:	1f 91       	pop	r17
    3ffc:	ff 90       	pop	r15
    3ffe:	ef 90       	pop	r14
    4000:	df 90       	pop	r13
    4002:	cf 90       	pop	r12
    4004:	bf 90       	pop	r11
    4006:	af 90       	pop	r10
    4008:	08 95       	ret

0000400a <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    4010:	8c e2       	ldi	r24, 0x2C	; 44
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <scan_key>
    4018:	88 23       	and	r24, r24
    401a:	19 f0       	breq	.+6      	; 0x4022 <bootmagic_scan_key+0x18>

    return scan_key(code);
    401c:	ce 01       	movw	r24, r28
    401e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <scan_key>
}
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	08 95       	ret

00004028 <bootmagic>:
#include "bootmagic.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    /* check signature */
    if (!eeconfig_is_enabled()) {
    402e:	0e 94 a1 21 	call	0x4342	; 0x4342 <eeconfig_is_enabled>
    4032:	88 23       	and	r24, r24
    4034:	11 f4       	brne	.+4      	; 0x403a <bootmagic+0x12>
        eeconfig_init();
    4036:	0e 94 ac 21 	call	0x4358	; 0x4358 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    403a:	8b eb       	ldi	r24, 0xBB	; 187
    403c:	94 e0       	ldi	r25, 0x04	; 4
    403e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4042:	14 e6       	ldi	r17, 0x64	; 100
    4044:	c0 e4       	ldi	r28, 0x40	; 64
    4046:	dc e9       	ldi	r29, 0x9C	; 156
    4048:	05 c0       	rjmp	.+10     	; 0x4054 <bootmagic+0x2c>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    404a:	0e 94 7d 07 	call	0xefa	; 0xefa <matrix_scan>
    404e:	ce 01       	movw	r24, r28
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	f1 f7       	brne	.-4      	; 0x4050 <bootmagic+0x28>
    4054:	11 50       	subi	r17, 0x01	; 1
    4056:	c8 f7       	brcc	.-14     	; 0x404a <bootmagic+0x22>
    print("done.\n");
    4058:	84 eb       	ldi	r24, 0xB4	; 180
    405a:	94 e0       	ldi	r25, 0x04	; 4
    405c:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    4060:	89 e2       	ldi	r24, 0x29	; 41
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    4068:	88 23       	and	r24, r24
    406a:	09 f0       	breq	.+2      	; 0x406e <bootmagic+0x46>
    406c:	45 c1       	rjmp	.+650    	; 0x42f8 <bootmagic+0x2d0>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    406e:	8a e2       	ldi	r24, 0x2A	; 42
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    4076:	88 23       	and	r24, r24
    4078:	11 f0       	breq	.+4      	; 0x407e <bootmagic+0x56>
        eeconfig_init();
    407a:	0e 94 ac 21 	call	0x4358	; 0x4358 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    407e:	85 e0       	ldi	r24, 0x05	; 5
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    4086:	88 23       	and	r24, r24
    4088:	11 f0       	breq	.+4      	; 0x408e <bootmagic+0x66>
        bootloader_jump();
    408a:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    408e:	0e 94 9c 21 	call	0x4338	; 0x4338 <eeconfig_read_debug>
    4092:	80 93 9f 01 	sts	0x019F, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4096:	87 e0       	ldi	r24, 0x07	; 7
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    409e:	88 23       	and	r24, r24
    40a0:	d1 f1       	breq	.+116    	; 0x4116 <bootmagic+0xee>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    40a2:	8b e1       	ldi	r24, 0x1B	; 27
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    40aa:	88 23       	and	r24, r24
    40ac:	49 f0       	breq	.+18     	; 0x40c0 <bootmagic+0x98>
            debug_config.matrix = !debug_config.matrix;
    40ae:	90 91 9f 01 	lds	r25, 0x019F
    40b2:	89 2f       	mov	r24, r25
    40b4:	86 95       	lsr	r24
    40b6:	80 95       	com	r24
    40b8:	81 70       	andi	r24, 0x01	; 1
    40ba:	88 0f       	add	r24, r24
    40bc:	9d 7f       	andi	r25, 0xFD	; 253
    40be:	28 c0       	rjmp	.+80     	; 0x4110 <bootmagic+0xe8>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    40c0:	8e e0       	ldi	r24, 0x0E	; 14
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    40c8:	88 23       	and	r24, r24
    40ca:	59 f0       	breq	.+22     	; 0x40e2 <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    40cc:	90 91 9f 01 	lds	r25, 0x019F
    40d0:	89 2f       	mov	r24, r25
    40d2:	86 95       	lsr	r24
    40d4:	86 95       	lsr	r24
    40d6:	80 95       	com	r24
    40d8:	81 70       	andi	r24, 0x01	; 1
    40da:	88 0f       	add	r24, r24
    40dc:	88 0f       	add	r24, r24
    40de:	9b 7f       	andi	r25, 0xFB	; 251
    40e0:	17 c0       	rjmp	.+46     	; 0x4110 <bootmagic+0xe8>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    40e2:	80 e1       	ldi	r24, 0x10	; 16
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    40ea:	90 91 9f 01 	lds	r25, 0x019F
    40ee:	88 23       	and	r24, r24
    40f0:	59 f0       	breq	.+22     	; 0x4108 <bootmagic+0xe0>
            debug_config.mouse = !debug_config.mouse;
    40f2:	89 2f       	mov	r24, r25
    40f4:	86 95       	lsr	r24
    40f6:	86 95       	lsr	r24
    40f8:	86 95       	lsr	r24
    40fa:	80 95       	com	r24
    40fc:	81 70       	andi	r24, 0x01	; 1
    40fe:	88 0f       	add	r24, r24
    4100:	88 0f       	add	r24, r24
    4102:	88 0f       	add	r24, r24
    4104:	97 7f       	andi	r25, 0xF7	; 247
    4106:	04 c0       	rjmp	.+8      	; 0x4110 <bootmagic+0xe8>
        } else {
            debug_config.enable = !debug_config.enable;
    4108:	89 2f       	mov	r24, r25
    410a:	80 95       	com	r24
    410c:	81 70       	andi	r24, 0x01	; 1
    410e:	9e 7f       	andi	r25, 0xFE	; 254
    4110:	98 2b       	or	r25, r24
    4112:	90 93 9f 01 	sts	0x019F, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4116:	80 91 9f 01 	lds	r24, 0x019F
    411a:	0e 94 8c 21 	call	0x4318	; 0x4318 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    411e:	0e 94 92 21 	call	0x4324	; 0x4324 <eeconfig_read_keymap>
    4122:	80 93 bd 01 	sts	0x01BD, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4126:	80 ee       	ldi	r24, 0xE0	; 224
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    412e:	88 23       	and	r24, r24
    4130:	49 f0       	breq	.+18     	; 0x4144 <bootmagic+0x11c>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4132:	80 91 bd 01 	lds	r24, 0x01BD
    4136:	98 2f       	mov	r25, r24
    4138:	90 95       	com	r25
    413a:	91 70       	andi	r25, 0x01	; 1
    413c:	8e 7f       	andi	r24, 0xFE	; 254
    413e:	89 2b       	or	r24, r25
    4140:	80 93 bd 01 	sts	0x01BD, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4144:	89 e3       	ldi	r24, 0x39	; 57
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    414c:	88 23       	and	r24, r24
    414e:	59 f0       	breq	.+22     	; 0x4166 <bootmagic+0x13e>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4150:	90 91 bd 01 	lds	r25, 0x01BD
    4154:	89 2f       	mov	r24, r25
    4156:	86 95       	lsr	r24
    4158:	80 95       	com	r24
    415a:	81 70       	andi	r24, 0x01	; 1
    415c:	88 0f       	add	r24, r24
    415e:	9d 7f       	andi	r25, 0xFD	; 253
    4160:	98 2b       	or	r25, r24
    4162:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4166:	82 ee       	ldi	r24, 0xE2	; 226
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    416e:	88 23       	and	r24, r24
    4170:	69 f0       	breq	.+26     	; 0x418c <bootmagic+0x164>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4172:	90 91 bd 01 	lds	r25, 0x01BD
    4176:	89 2f       	mov	r24, r25
    4178:	86 95       	lsr	r24
    417a:	86 95       	lsr	r24
    417c:	80 95       	com	r24
    417e:	81 70       	andi	r24, 0x01	; 1
    4180:	88 0f       	add	r24, r24
    4182:	88 0f       	add	r24, r24
    4184:	9b 7f       	andi	r25, 0xFB	; 251
    4186:	98 2b       	or	r25, r24
    4188:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    418c:	86 ee       	ldi	r24, 0xE6	; 230
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    4194:	88 23       	and	r24, r24
    4196:	79 f0       	breq	.+30     	; 0x41b6 <bootmagic+0x18e>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4198:	90 91 bd 01 	lds	r25, 0x01BD
    419c:	89 2f       	mov	r24, r25
    419e:	86 95       	lsr	r24
    41a0:	86 95       	lsr	r24
    41a2:	86 95       	lsr	r24
    41a4:	80 95       	com	r24
    41a6:	81 70       	andi	r24, 0x01	; 1
    41a8:	88 0f       	add	r24, r24
    41aa:	88 0f       	add	r24, r24
    41ac:	88 0f       	add	r24, r24
    41ae:	97 7f       	andi	r25, 0xF7	; 247
    41b0:	98 2b       	or	r25, r24
    41b2:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    41b6:	83 ee       	ldi	r24, 0xE3	; 227
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    41be:	88 23       	and	r24, r24
    41c0:	69 f0       	breq	.+26     	; 0x41dc <bootmagic+0x1b4>
        keymap_config.no_gui = !keymap_config.no_gui;
    41c2:	90 91 bd 01 	lds	r25, 0x01BD
    41c6:	89 2f       	mov	r24, r25
    41c8:	82 95       	swap	r24
    41ca:	8f 70       	andi	r24, 0x0F	; 15
    41cc:	80 95       	com	r24
    41ce:	81 70       	andi	r24, 0x01	; 1
    41d0:	82 95       	swap	r24
    41d2:	80 7f       	andi	r24, 0xF0	; 240
    41d4:	9f 7e       	andi	r25, 0xEF	; 239
    41d6:	98 2b       	or	r25, r24
    41d8:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    41dc:	85 e3       	ldi	r24, 0x35	; 53
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    41e4:	88 23       	and	r24, r24
    41e6:	79 f0       	breq	.+30     	; 0x4206 <bootmagic+0x1de>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    41e8:	90 91 bd 01 	lds	r25, 0x01BD
    41ec:	89 2f       	mov	r24, r25
    41ee:	82 95       	swap	r24
    41f0:	86 95       	lsr	r24
    41f2:	87 70       	andi	r24, 0x07	; 7
    41f4:	80 95       	com	r24
    41f6:	81 70       	andi	r24, 0x01	; 1
    41f8:	82 95       	swap	r24
    41fa:	88 0f       	add	r24, r24
    41fc:	80 7e       	andi	r24, 0xE0	; 224
    41fe:	9f 7d       	andi	r25, 0xDF	; 223
    4200:	98 2b       	or	r25, r24
    4202:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4206:	81 e3       	ldi	r24, 0x31	; 49
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    420e:	88 23       	and	r24, r24
    4210:	89 f0       	breq	.+34     	; 0x4234 <bootmagic+0x20c>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4212:	90 91 bd 01 	lds	r25, 0x01BD
    4216:	89 2f       	mov	r24, r25
    4218:	82 95       	swap	r24
    421a:	86 95       	lsr	r24
    421c:	86 95       	lsr	r24
    421e:	83 70       	andi	r24, 0x03	; 3
    4220:	80 95       	com	r24
    4222:	81 70       	andi	r24, 0x01	; 1
    4224:	82 95       	swap	r24
    4226:	88 0f       	add	r24, r24
    4228:	88 0f       	add	r24, r24
    422a:	80 7c       	andi	r24, 0xC0	; 192
    422c:	9f 7b       	andi	r25, 0xBF	; 191
    422e:	98 2b       	or	r25, r24
    4230:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4234:	81 e1       	ldi	r24, 0x11	; 17
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    423c:	88 23       	and	r24, r24
    423e:	79 f0       	breq	.+30     	; 0x425e <bootmagic+0x236>
        keymap_config.nkro = !keymap_config.nkro;
    4240:	80 91 bd 01 	lds	r24, 0x01BD
    4244:	98 2f       	mov	r25, r24
    4246:	99 1f       	adc	r25, r25
    4248:	99 27       	eor	r25, r25
    424a:	99 1f       	adc	r25, r25
    424c:	21 e0       	ldi	r18, 0x01	; 1
    424e:	92 27       	eor	r25, r18
    4250:	97 95       	ror	r25
    4252:	99 27       	eor	r25, r25
    4254:	97 95       	ror	r25
    4256:	8f 77       	andi	r24, 0x7F	; 127
    4258:	89 2b       	or	r24, r25
    425a:	80 93 bd 01 	sts	0x01BD, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    425e:	80 91 bd 01 	lds	r24, 0x01BD
    4262:	0e 94 80 21 	call	0x4300	; 0x4300 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4266:	80 91 bd 01 	lds	r24, 0x01BD
    426a:	88 1f       	adc	r24, r24
    426c:	88 27       	eor	r24, r24
    426e:	88 1f       	adc	r24, r24
    4270:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4274:	87 e2       	ldi	r24, 0x27	; 39
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    427c:	18 2f       	mov	r17, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    427e:	8e e1       	ldi	r24, 0x1E	; 30
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    4286:	81 11       	cpse	r24, r1
    4288:	12 60       	ori	r17, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    428a:	8f e1       	ldi	r24, 0x1F	; 31
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    4292:	81 11       	cpse	r24, r1
    4294:	14 60       	ori	r17, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4296:	80 e2       	ldi	r24, 0x20	; 32
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    429e:	81 11       	cpse	r24, r1
    42a0:	18 60       	ori	r17, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    42a2:	81 e2       	ldi	r24, 0x21	; 33
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    42aa:	81 11       	cpse	r24, r1
    42ac:	10 61       	ori	r17, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    42ae:	82 e2       	ldi	r24, 0x22	; 34
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    42b6:	81 11       	cpse	r24, r1
    42b8:	10 62       	ori	r17, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    42ba:	83 e2       	ldi	r24, 0x23	; 35
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    42c2:	81 11       	cpse	r24, r1
    42c4:	10 64       	ori	r17, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    42c6:	84 e2       	ldi	r24, 0x24	; 36
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	0e 94 05 20 	call	0x400a	; 0x400a <bootmagic_scan_key>
    42ce:	81 11       	cpse	r24, r1
    42d0:	10 68       	ori	r17, 0x80	; 128
    if (default_layer) {
    42d2:	11 23       	and	r17, r17
    42d4:	41 f0       	breq	.+16     	; 0x42e6 <bootmagic+0x2be>
        eeconfig_write_default_layer(default_layer);
    42d6:	81 2f       	mov	r24, r17
    42d8:	0e 94 86 21 	call	0x430c	; 0x430c <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    42dc:	61 2f       	mov	r22, r17
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	07 c0       	rjmp	.+14     	; 0x42f4 <bootmagic+0x2cc>
    } else {
        default_layer = eeconfig_read_default_layer();
    42e6:	0e 94 97 21 	call	0x432e	; 0x432e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	a0 e0       	ldi	r26, 0x00	; 0
    42ee:	b0 e0       	ldi	r27, 0x00	; 0
    42f0:	bc 01       	movw	r22, r24
    42f2:	cd 01       	movw	r24, r26
    42f4:	0e 94 6f 1c 	call	0x38de	; 0x38de <default_layer_set>
    }
}
    42f8:	df 91       	pop	r29
    42fa:	cf 91       	pop	r28
    42fc:	1f 91       	pop	r17
    42fe:	08 95       	ret

00004300 <eeconfig_write_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4300:	68 2f       	mov	r22, r24
    4302:	84 e0       	ldi	r24, 0x04	; 4
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
    430a:	08 95       	ret

0000430c <eeconfig_write_default_layer>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    430c:	68 2f       	mov	r22, r24
    430e:	83 e0       	ldi	r24, 0x03	; 3
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
    4316:	08 95       	ret

00004318 <eeconfig_write_debug>:
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4318:	68 2f       	mov	r22, r24
    431a:	82 e0       	ldi	r24, 0x02	; 2
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
    4322:	08 95       	ret

00004324 <eeconfig_read_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4324:	84 e0       	ldi	r24, 0x04	; 4
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <__eerd_byte_m32u4>
    432c:	08 95       	ret

0000432e <eeconfig_read_default_layer>:
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    432e:	83 e0       	ldi	r24, 0x03	; 3
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <__eerd_byte_m32u4>
    4336:	08 95       	ret

00004338 <eeconfig_read_debug>:
bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <__eerd_byte_m32u4>
    4340:	08 95       	ret

00004342 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__eerd_word_m32u4>
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	8d 5e       	subi	r24, 0xED	; 237
    434e:	9e 4f       	sbci	r25, 0xFE	; 254
    4350:	09 f4       	brne	.+2      	; 0x4354 <eeconfig_is_enabled+0x12>
    4352:	21 e0       	ldi	r18, 0x01	; 1
}
    4354:	82 2f       	mov	r24, r18
    4356:	08 95       	ret

00004358 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	6d ee       	ldi	r22, 0xED	; 237
    435e:	7e ef       	ldi	r23, 0xFE	; 254
    4360:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4364:	82 e0       	ldi	r24, 0x02	; 2
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    436e:	83 e0       	ldi	r24, 0x03	; 3
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	60 e0       	ldi	r22, 0x00	; 0
    4374:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4378:	84 e0       	ldi	r24, 0x04	; 4
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4382:	85 e0       	ldi	r24, 0x05	; 5
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    438c:	08 95       	ret

0000438e <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    438e:	80 91 ab 01 	lds	r24, 0x01AB
    4392:	80 ff       	sbrs	r24, 0
    4394:	0b c0       	rjmp	.+22     	; 0x43ac <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4396:	90 91 11 01 	lds	r25, 0x0111
    439a:	85 e0       	ldi	r24, 0x05	; 5
    439c:	98 9f       	mul	r25, r24
    439e:	c0 01       	movw	r24, r0
    43a0:	11 24       	eor	r1, r1
    43a2:	95 95       	asr	r25
    43a4:	87 95       	ror	r24
    43a6:	95 95       	asr	r25
    43a8:	87 95       	ror	r24
    43aa:	30 c0       	rjmp	.+96     	; 0x440c <move_unit+0x7e>
    } else if (mousekey_accel & (1<<1)) {
    43ac:	81 ff       	sbrs	r24, 1
    43ae:	09 c0       	rjmp	.+18     	; 0x43c2 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    43b0:	90 91 11 01 	lds	r25, 0x0111
    43b4:	85 e0       	ldi	r24, 0x05	; 5
    43b6:	98 9f       	mul	r25, r24
    43b8:	c0 01       	movw	r24, r0
    43ba:	11 24       	eor	r1, r1
    43bc:	95 95       	asr	r25
    43be:	87 95       	ror	r24
    43c0:	25 c0       	rjmp	.+74     	; 0x440c <move_unit+0x7e>
    } else if (mousekey_accel & (1<<2)) {
    43c2:	82 ff       	sbrs	r24, 2
    43c4:	03 c0       	rjmp	.+6      	; 0x43cc <move_unit+0x3e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    43c6:	90 91 11 01 	lds	r25, 0x0111
    43ca:	0d c0       	rjmp	.+26     	; 0x43e6 <move_unit+0x58>
    } else if (mousekey_repeat == 0) {
    43cc:	80 91 aa 01 	lds	r24, 0x01AA
    43d0:	88 23       	and	r24, r24
    43d2:	19 f4       	brne	.+6      	; 0x43da <move_unit+0x4c>
    43d4:	85 e0       	ldi	r24, 0x05	; 5
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	08 95       	ret
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    43da:	60 91 12 01 	lds	r22, 0x0112
    43de:	90 91 11 01 	lds	r25, 0x0111
    43e2:	86 17       	cp	r24, r22
    43e4:	28 f0       	brcs	.+10     	; 0x43f0 <move_unit+0x62>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    43e6:	85 e0       	ldi	r24, 0x05	; 5
    43e8:	98 9f       	mul	r25, r24
    43ea:	c0 01       	movw	r24, r0
    43ec:	11 24       	eor	r1, r1
    43ee:	0e c0       	rjmp	.+28     	; 0x440c <move_unit+0x7e>
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    43f0:	89 9f       	mul	r24, r25
    43f2:	90 01       	movw	r18, r0
    43f4:	11 24       	eor	r1, r1
    43f6:	c9 01       	movw	r24, r18
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	82 0f       	add	r24, r18
    4402:	93 1f       	adc	r25, r19
    4404:	70 e0       	ldi	r23, 0x00	; 0
    4406:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__divmodhi4>
    440a:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    440c:	80 38       	cpi	r24, 0x80	; 128
    440e:	91 05       	cpc	r25, r1
    4410:	10 f0       	brcs	.+4      	; 0x4416 <move_unit+0x88>
    4412:	8f e7       	ldi	r24, 0x7F	; 127
    4414:	08 95       	ret
    4416:	00 97       	sbiw	r24, 0x00	; 0
    4418:	09 f4       	brne	.+2      	; 0x441c <move_unit+0x8e>
    441a:	81 e0       	ldi	r24, 0x01	; 1
}
    441c:	08 95       	ret

0000441e <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    441e:	80 91 ab 01 	lds	r24, 0x01AB
    4422:	80 ff       	sbrs	r24, 0
    4424:	05 c0       	rjmp	.+10     	; 0x4430 <wheel_unit+0x12>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4426:	80 91 13 01 	lds	r24, 0x0113
    442a:	86 95       	lsr	r24
    442c:	86 95       	lsr	r24
    442e:	18 c0       	rjmp	.+48     	; 0x4460 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<1)) {
    4430:	81 ff       	sbrs	r24, 1
    4432:	04 c0       	rjmp	.+8      	; 0x443c <wheel_unit+0x1e>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4434:	80 91 13 01 	lds	r24, 0x0113
    4438:	86 95       	lsr	r24
    443a:	12 c0       	rjmp	.+36     	; 0x4460 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<2)) {
    443c:	82 ff       	sbrs	r24, 2
    443e:	03 c0       	rjmp	.+6      	; 0x4446 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4440:	80 91 13 01 	lds	r24, 0x0113
    4444:	0d c0       	rjmp	.+26     	; 0x4460 <wheel_unit+0x42>
    } else if (mousekey_repeat == 0) {
    4446:	20 91 aa 01 	lds	r18, 0x01AA
    444a:	22 23       	and	r18, r18
    444c:	19 f4       	brne	.+6      	; 0x4454 <wheel_unit+0x36>
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	08 95       	ret
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4454:	60 91 14 01 	lds	r22, 0x0114
    4458:	80 91 13 01 	lds	r24, 0x0113
    445c:	26 17       	cp	r18, r22
    445e:	10 f0       	brcs	.+4      	; 0x4464 <wheel_unit+0x46>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	07 c0       	rjmp	.+14     	; 0x4472 <wheel_unit+0x54>
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4464:	28 9f       	mul	r18, r24
    4466:	c0 01       	movw	r24, r0
    4468:	11 24       	eor	r1, r1
    446a:	70 e0       	ldi	r23, 0x00	; 0
    446c:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__divmodhi4>
    4470:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4472:	80 38       	cpi	r24, 0x80	; 128
    4474:	91 05       	cpc	r25, r1
    4476:	10 f0       	brcs	.+4      	; 0x447c <wheel_unit+0x5e>
    4478:	8f e7       	ldi	r24, 0x7F	; 127
    447a:	08 95       	ret
    447c:	00 97       	sbiw	r24, 0x00	; 0
    447e:	09 f4       	brne	.+2      	; 0x4482 <wheel_unit+0x64>
    4480:	81 e0       	ldi	r24, 0x01	; 1
}
    4482:	08 95       	ret

00004484 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4484:	80 3f       	cpi	r24, 0xF0	; 240
    4486:	21 f4       	brne	.+8      	; 0x4490 <mousekey_on+0xc>
    4488:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    448c:	81 95       	neg	r24
    448e:	04 c0       	rjmp	.+8      	; 0x4498 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4490:	81 3f       	cpi	r24, 0xF1	; 241
    4492:	29 f4       	brne	.+10     	; 0x449e <mousekey_on+0x1a>
    4494:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    4498:	80 93 a7 01 	sts	0x01A7, r24
    449c:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    449e:	82 3f       	cpi	r24, 0xF2	; 242
    44a0:	21 f4       	brne	.+8      	; 0x44aa <mousekey_on+0x26>
    44a2:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    44a6:	81 95       	neg	r24
    44a8:	04 c0       	rjmp	.+8      	; 0x44b2 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    44aa:	83 3f       	cpi	r24, 0xF3	; 243
    44ac:	29 f4       	brne	.+10     	; 0x44b8 <mousekey_on+0x34>
    44ae:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    44b2:	80 93 a6 01 	sts	0x01A6, r24
    44b6:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    44b8:	89 3f       	cpi	r24, 0xF9	; 249
    44ba:	19 f4       	brne	.+6      	; 0x44c2 <mousekey_on+0x3e>
    44bc:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    44c0:	05 c0       	rjmp	.+10     	; 0x44cc <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    44c2:	8a 3f       	cpi	r24, 0xFA	; 250
    44c4:	31 f4       	brne	.+12     	; 0x44d2 <mousekey_on+0x4e>
    44c6:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    44ca:	81 95       	neg	r24
    44cc:	80 93 a8 01 	sts	0x01A8, r24
    44d0:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    44d2:	8b 3f       	cpi	r24, 0xFB	; 251
    44d4:	21 f4       	brne	.+8      	; 0x44de <mousekey_on+0x5a>
    44d6:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    44da:	81 95       	neg	r24
    44dc:	04 c0       	rjmp	.+8      	; 0x44e6 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    44de:	8c 3f       	cpi	r24, 0xFC	; 252
    44e0:	29 f4       	brne	.+10     	; 0x44ec <mousekey_on+0x68>
    44e2:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    44e6:	80 93 a9 01 	sts	0x01A9, r24
    44ea:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    44ec:	84 3f       	cpi	r24, 0xF4	; 244
    44ee:	21 f4       	brne	.+8      	; 0x44f8 <mousekey_on+0x74>
    44f0:	80 91 a5 01 	lds	r24, 0x01A5
    44f4:	81 60       	ori	r24, 0x01	; 1
    44f6:	17 c0       	rjmp	.+46     	; 0x4526 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    44f8:	85 3f       	cpi	r24, 0xF5	; 245
    44fa:	21 f4       	brne	.+8      	; 0x4504 <mousekey_on+0x80>
    44fc:	80 91 a5 01 	lds	r24, 0x01A5
    4500:	82 60       	ori	r24, 0x02	; 2
    4502:	11 c0       	rjmp	.+34     	; 0x4526 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4504:	86 3f       	cpi	r24, 0xF6	; 246
    4506:	21 f4       	brne	.+8      	; 0x4510 <mousekey_on+0x8c>
    4508:	80 91 a5 01 	lds	r24, 0x01A5
    450c:	84 60       	ori	r24, 0x04	; 4
    450e:	0b c0       	rjmp	.+22     	; 0x4526 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4510:	87 3f       	cpi	r24, 0xF7	; 247
    4512:	21 f4       	brne	.+8      	; 0x451c <mousekey_on+0x98>
    4514:	80 91 a5 01 	lds	r24, 0x01A5
    4518:	88 60       	ori	r24, 0x08	; 8
    451a:	05 c0       	rjmp	.+10     	; 0x4526 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    451c:	88 3f       	cpi	r24, 0xF8	; 248
    451e:	31 f4       	brne	.+12     	; 0x452c <mousekey_on+0xa8>
    4520:	80 91 a5 01 	lds	r24, 0x01A5
    4524:	80 61       	ori	r24, 0x10	; 16
    4526:	80 93 a5 01 	sts	0x01A5, r24
    452a:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    452c:	8d 3f       	cpi	r24, 0xFD	; 253
    452e:	21 f4       	brne	.+8      	; 0x4538 <mousekey_on+0xb4>
    4530:	80 91 ab 01 	lds	r24, 0x01AB
    4534:	81 60       	ori	r24, 0x01	; 1
    4536:	05 c0       	rjmp	.+10     	; 0x4542 <mousekey_on+0xbe>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4538:	8e 3f       	cpi	r24, 0xFE	; 254
    453a:	31 f4       	brne	.+12     	; 0x4548 <mousekey_on+0xc4>
    453c:	80 91 ab 01 	lds	r24, 0x01AB
    4540:	82 60       	ori	r24, 0x02	; 2
    4542:	80 93 ab 01 	sts	0x01AB, r24
    4546:	08 95       	ret
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4548:	8f 3f       	cpi	r24, 0xFF	; 255
    454a:	29 f4       	brne	.+10     	; 0x4556 <mousekey_on+0xd2>
    454c:	80 91 ab 01 	lds	r24, 0x01AB
    4550:	84 60       	ori	r24, 0x04	; 4
    4552:	80 93 ab 01 	sts	0x01AB, r24
    4556:	08 95       	ret

00004558 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4558:	80 3f       	cpi	r24, 0xF0	; 240
    455a:	29 f4       	brne	.+10     	; 0x4566 <mousekey_off+0xe>
    455c:	80 91 a7 01 	lds	r24, 0x01A7
    4560:	87 ff       	sbrs	r24, 7
    4562:	6f c0       	rjmp	.+222    	; 0x4642 <mousekey_off+0xea>
    4564:	07 c0       	rjmp	.+14     	; 0x4574 <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4566:	81 3f       	cpi	r24, 0xF1	; 241
    4568:	41 f4       	brne	.+16     	; 0x457a <mousekey_off+0x22>
    456a:	80 91 a7 01 	lds	r24, 0x01A7
    456e:	18 16       	cp	r1, r24
    4570:	0c f0       	brlt	.+2      	; 0x4574 <mousekey_off+0x1c>
    4572:	67 c0       	rjmp	.+206    	; 0x4642 <mousekey_off+0xea>
    4574:	10 92 a7 01 	sts	0x01A7, r1
    4578:	64 c0       	rjmp	.+200    	; 0x4642 <mousekey_off+0xea>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    457a:	82 3f       	cpi	r24, 0xF2	; 242
    457c:	29 f4       	brne	.+10     	; 0x4588 <mousekey_off+0x30>
    457e:	80 91 a6 01 	lds	r24, 0x01A6
    4582:	87 ff       	sbrs	r24, 7
    4584:	5e c0       	rjmp	.+188    	; 0x4642 <mousekey_off+0xea>
    4586:	07 c0       	rjmp	.+14     	; 0x4596 <mousekey_off+0x3e>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4588:	83 3f       	cpi	r24, 0xF3	; 243
    458a:	41 f4       	brne	.+16     	; 0x459c <mousekey_off+0x44>
    458c:	80 91 a6 01 	lds	r24, 0x01A6
    4590:	18 16       	cp	r1, r24
    4592:	0c f0       	brlt	.+2      	; 0x4596 <mousekey_off+0x3e>
    4594:	56 c0       	rjmp	.+172    	; 0x4642 <mousekey_off+0xea>
    4596:	10 92 a6 01 	sts	0x01A6, r1
    459a:	53 c0       	rjmp	.+166    	; 0x4642 <mousekey_off+0xea>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    459c:	89 3f       	cpi	r24, 0xF9	; 249
    459e:	29 f4       	brne	.+10     	; 0x45aa <mousekey_off+0x52>
    45a0:	80 91 a8 01 	lds	r24, 0x01A8
    45a4:	18 16       	cp	r1, r24
    45a6:	3c f0       	brlt	.+14     	; 0x45b6 <mousekey_off+0x5e>
    45a8:	4c c0       	rjmp	.+152    	; 0x4642 <mousekey_off+0xea>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    45aa:	8a 3f       	cpi	r24, 0xFA	; 250
    45ac:	39 f4       	brne	.+14     	; 0x45bc <mousekey_off+0x64>
    45ae:	80 91 a8 01 	lds	r24, 0x01A8
    45b2:	87 ff       	sbrs	r24, 7
    45b4:	46 c0       	rjmp	.+140    	; 0x4642 <mousekey_off+0xea>
    45b6:	10 92 a8 01 	sts	0x01A8, r1
    45ba:	43 c0       	rjmp	.+134    	; 0x4642 <mousekey_off+0xea>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    45bc:	8b 3f       	cpi	r24, 0xFB	; 251
    45be:	29 f4       	brne	.+10     	; 0x45ca <mousekey_off+0x72>
    45c0:	80 91 a9 01 	lds	r24, 0x01A9
    45c4:	87 ff       	sbrs	r24, 7
    45c6:	3d c0       	rjmp	.+122    	; 0x4642 <mousekey_off+0xea>
    45c8:	06 c0       	rjmp	.+12     	; 0x45d6 <mousekey_off+0x7e>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    45ca:	8c 3f       	cpi	r24, 0xFC	; 252
    45cc:	39 f4       	brne	.+14     	; 0x45dc <mousekey_off+0x84>
    45ce:	80 91 a9 01 	lds	r24, 0x01A9
    45d2:	18 16       	cp	r1, r24
    45d4:	b4 f5       	brge	.+108    	; 0x4642 <mousekey_off+0xea>
    45d6:	10 92 a9 01 	sts	0x01A9, r1
    45da:	33 c0       	rjmp	.+102    	; 0x4642 <mousekey_off+0xea>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    45dc:	84 3f       	cpi	r24, 0xF4	; 244
    45de:	21 f4       	brne	.+8      	; 0x45e8 <mousekey_off+0x90>
    45e0:	80 91 a5 01 	lds	r24, 0x01A5
    45e4:	8e 7f       	andi	r24, 0xFE	; 254
    45e6:	05 c0       	rjmp	.+10     	; 0x45f2 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    45e8:	85 3f       	cpi	r24, 0xF5	; 245
    45ea:	31 f4       	brne	.+12     	; 0x45f8 <mousekey_off+0xa0>
    45ec:	80 91 a5 01 	lds	r24, 0x01A5
    45f0:	8d 7f       	andi	r24, 0xFD	; 253
    45f2:	80 93 a5 01 	sts	0x01A5, r24
    45f6:	25 c0       	rjmp	.+74     	; 0x4642 <mousekey_off+0xea>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    45f8:	86 3f       	cpi	r24, 0xF6	; 246
    45fa:	21 f4       	brne	.+8      	; 0x4604 <mousekey_off+0xac>
    45fc:	80 91 a5 01 	lds	r24, 0x01A5
    4600:	8b 7f       	andi	r24, 0xFB	; 251
    4602:	f7 cf       	rjmp	.-18     	; 0x45f2 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4604:	87 3f       	cpi	r24, 0xF7	; 247
    4606:	21 f4       	brne	.+8      	; 0x4610 <mousekey_off+0xb8>
    4608:	80 91 a5 01 	lds	r24, 0x01A5
    460c:	87 7f       	andi	r24, 0xF7	; 247
    460e:	f1 cf       	rjmp	.-30     	; 0x45f2 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4610:	88 3f       	cpi	r24, 0xF8	; 248
    4612:	21 f4       	brne	.+8      	; 0x461c <mousekey_off+0xc4>
    4614:	80 91 a5 01 	lds	r24, 0x01A5
    4618:	8f 7e       	andi	r24, 0xEF	; 239
    461a:	eb cf       	rjmp	.-42     	; 0x45f2 <mousekey_off+0x9a>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    461c:	8d 3f       	cpi	r24, 0xFD	; 253
    461e:	21 f4       	brne	.+8      	; 0x4628 <mousekey_off+0xd0>
    4620:	80 91 ab 01 	lds	r24, 0x01AB
    4624:	8e 7f       	andi	r24, 0xFE	; 254
    4626:	0b c0       	rjmp	.+22     	; 0x463e <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4628:	8e 3f       	cpi	r24, 0xFE	; 254
    462a:	21 f4       	brne	.+8      	; 0x4634 <mousekey_off+0xdc>
    462c:	80 91 ab 01 	lds	r24, 0x01AB
    4630:	8d 7f       	andi	r24, 0xFD	; 253
    4632:	05 c0       	rjmp	.+10     	; 0x463e <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4634:	8f 3f       	cpi	r24, 0xFF	; 255
    4636:	29 f4       	brne	.+10     	; 0x4642 <mousekey_off+0xea>
    4638:	80 91 ab 01 	lds	r24, 0x01AB
    463c:	8b 7f       	andi	r24, 0xFB	; 251
    463e:	80 93 ab 01 	sts	0x01AB, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4642:	80 91 a6 01 	lds	r24, 0x01A6
    4646:	88 23       	and	r24, r24
    4648:	71 f4       	brne	.+28     	; 0x4666 <mousekey_off+0x10e>
    464a:	80 91 a7 01 	lds	r24, 0x01A7
    464e:	88 23       	and	r24, r24
    4650:	51 f4       	brne	.+20     	; 0x4666 <mousekey_off+0x10e>
    4652:	80 91 a8 01 	lds	r24, 0x01A8
    4656:	88 23       	and	r24, r24
    4658:	31 f4       	brne	.+12     	; 0x4666 <mousekey_off+0x10e>
    465a:	80 91 a9 01 	lds	r24, 0x01A9
    465e:	88 23       	and	r24, r24
    4660:	11 f4       	brne	.+4      	; 0x4666 <mousekey_off+0x10e>
        mousekey_repeat = 0;
    4662:	10 92 aa 01 	sts	0x01AA, r1
    4666:	08 95       	ret

00004668 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4668:	e5 ea       	ldi	r30, 0xA5	; 165
    466a:	f1 e0       	ldi	r31, 0x01	; 1
    466c:	85 e0       	ldi	r24, 0x05	; 5
    466e:	df 01       	movw	r26, r30
    4670:	1d 92       	st	X+, r1
    4672:	8a 95       	dec	r24
    4674:	e9 f7       	brne	.-6      	; 0x4670 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4676:	10 92 aa 01 	sts	0x01AA, r1
    mousekey_accel = 0;
    467a:	10 92 ab 01 	sts	0x01AB, r1
}
    467e:	08 95       	ret

00004680 <mousekey_send>:

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4680:	80 91 9f 01 	lds	r24, 0x019F
    4684:	83 ff       	sbrs	r24, 3
    4686:	c1 c0       	rjmp	.+386    	; 0x480a <mousekey_send+0x18a>
    print("mousekey [btn|x y v h](rep/acl): [");
    4688:	87 ef       	ldi	r24, 0xF7	; 247
    468a:	94 e0       	ldi	r25, 0x04	; 4
    468c:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    phex(mouse_report.buttons); print("|");
    4690:	00 d0       	rcall	.+0      	; 0x4692 <mousekey_send+0x12>
    4692:	00 d0       	rcall	.+0      	; 0x4694 <mousekey_send+0x14>
    4694:	ed b7       	in	r30, 0x3d	; 61
    4696:	fe b7       	in	r31, 0x3e	; 62
    4698:	31 96       	adiw	r30, 0x01	; 1
    469a:	82 ef       	ldi	r24, 0xF2	; 242
    469c:	94 e0       	ldi	r25, 0x04	; 4
    469e:	ad b7       	in	r26, 0x3d	; 61
    46a0:	be b7       	in	r27, 0x3e	; 62
    46a2:	12 96       	adiw	r26, 0x02	; 2
    46a4:	9c 93       	st	X, r25
    46a6:	8e 93       	st	-X, r24
    46a8:	11 97       	sbiw	r26, 0x01	; 1
    46aa:	80 91 a5 01 	lds	r24, 0x01A5
    46ae:	82 83       	std	Z+2, r24	; 0x02
    46b0:	13 82       	std	Z+3, r1	; 0x03
    46b2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	0f 90       	pop	r0
    46bc:	0f 90       	pop	r0
    46be:	80 ef       	ldi	r24, 0xF0	; 240
    46c0:	94 e0       	ldi	r25, 0x04	; 4
    46c2:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print_decs(mouse_report.x); print(" ");
    46c6:	00 d0       	rcall	.+0      	; 0x46c8 <mousekey_send+0x48>
    46c8:	00 d0       	rcall	.+0      	; 0x46ca <mousekey_send+0x4a>
    46ca:	8d ee       	ldi	r24, 0xED	; 237
    46cc:	94 e0       	ldi	r25, 0x04	; 4
    46ce:	ed b7       	in	r30, 0x3d	; 61
    46d0:	fe b7       	in	r31, 0x3e	; 62
    46d2:	92 83       	std	Z+2, r25	; 0x02
    46d4:	81 83       	std	Z+1, r24	; 0x01
    46d6:	80 91 a6 01 	lds	r24, 0x01A6
    46da:	99 27       	eor	r25, r25
    46dc:	87 fd       	sbrc	r24, 7
    46de:	90 95       	com	r25
    46e0:	94 83       	std	Z+4, r25	; 0x04
    46e2:	83 83       	std	Z+3, r24	; 0x03
    46e4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    46e8:	0f 90       	pop	r0
    46ea:	0f 90       	pop	r0
    46ec:	0f 90       	pop	r0
    46ee:	0f 90       	pop	r0
    46f0:	8b ee       	ldi	r24, 0xEB	; 235
    46f2:	94 e0       	ldi	r25, 0x04	; 4
    46f4:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print_decs(mouse_report.y); print(" ");
    46f8:	00 d0       	rcall	.+0      	; 0x46fa <mousekey_send+0x7a>
    46fa:	00 d0       	rcall	.+0      	; 0x46fc <mousekey_send+0x7c>
    46fc:	88 ee       	ldi	r24, 0xE8	; 232
    46fe:	94 e0       	ldi	r25, 0x04	; 4
    4700:	ad b7       	in	r26, 0x3d	; 61
    4702:	be b7       	in	r27, 0x3e	; 62
    4704:	12 96       	adiw	r26, 0x02	; 2
    4706:	9c 93       	st	X, r25
    4708:	8e 93       	st	-X, r24
    470a:	11 97       	sbiw	r26, 0x01	; 1
    470c:	80 91 a7 01 	lds	r24, 0x01A7
    4710:	99 27       	eor	r25, r25
    4712:	87 fd       	sbrc	r24, 7
    4714:	90 95       	com	r25
    4716:	14 96       	adiw	r26, 0x04	; 4
    4718:	9c 93       	st	X, r25
    471a:	8e 93       	st	-X, r24
    471c:	13 97       	sbiw	r26, 0x03	; 3
    471e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4722:	0f 90       	pop	r0
    4724:	0f 90       	pop	r0
    4726:	0f 90       	pop	r0
    4728:	0f 90       	pop	r0
    472a:	86 ee       	ldi	r24, 0xE6	; 230
    472c:	94 e0       	ldi	r25, 0x04	; 4
    472e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print_decs(mouse_report.v); print(" ");
    4732:	00 d0       	rcall	.+0      	; 0x4734 <mousekey_send+0xb4>
    4734:	00 d0       	rcall	.+0      	; 0x4736 <mousekey_send+0xb6>
    4736:	83 ee       	ldi	r24, 0xE3	; 227
    4738:	94 e0       	ldi	r25, 0x04	; 4
    473a:	ed b7       	in	r30, 0x3d	; 61
    473c:	fe b7       	in	r31, 0x3e	; 62
    473e:	92 83       	std	Z+2, r25	; 0x02
    4740:	81 83       	std	Z+1, r24	; 0x01
    4742:	80 91 a8 01 	lds	r24, 0x01A8
    4746:	99 27       	eor	r25, r25
    4748:	87 fd       	sbrc	r24, 7
    474a:	90 95       	com	r25
    474c:	94 83       	std	Z+4, r25	; 0x04
    474e:	83 83       	std	Z+3, r24	; 0x03
    4750:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4754:	0f 90       	pop	r0
    4756:	0f 90       	pop	r0
    4758:	0f 90       	pop	r0
    475a:	0f 90       	pop	r0
    475c:	81 ee       	ldi	r24, 0xE1	; 225
    475e:	94 e0       	ldi	r25, 0x04	; 4
    4760:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print_decs(mouse_report.h); print("](");
    4764:	00 d0       	rcall	.+0      	; 0x4766 <mousekey_send+0xe6>
    4766:	00 d0       	rcall	.+0      	; 0x4768 <mousekey_send+0xe8>
    4768:	8e ed       	ldi	r24, 0xDE	; 222
    476a:	94 e0       	ldi	r25, 0x04	; 4
    476c:	ad b7       	in	r26, 0x3d	; 61
    476e:	be b7       	in	r27, 0x3e	; 62
    4770:	12 96       	adiw	r26, 0x02	; 2
    4772:	9c 93       	st	X, r25
    4774:	8e 93       	st	-X, r24
    4776:	11 97       	sbiw	r26, 0x01	; 1
    4778:	80 91 a9 01 	lds	r24, 0x01A9
    477c:	99 27       	eor	r25, r25
    477e:	87 fd       	sbrc	r24, 7
    4780:	90 95       	com	r25
    4782:	14 96       	adiw	r26, 0x04	; 4
    4784:	9c 93       	st	X, r25
    4786:	8e 93       	st	-X, r24
    4788:	13 97       	sbiw	r26, 0x03	; 3
    478a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    478e:	0f 90       	pop	r0
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	8b ed       	ldi	r24, 0xDB	; 219
    4798:	94 e0       	ldi	r25, 0x04	; 4
    479a:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print_dec(mousekey_repeat); print("/");
    479e:	00 d0       	rcall	.+0      	; 0x47a0 <mousekey_send+0x120>
    47a0:	00 d0       	rcall	.+0      	; 0x47a2 <mousekey_send+0x122>
    47a2:	ed b7       	in	r30, 0x3d	; 61
    47a4:	fe b7       	in	r31, 0x3e	; 62
    47a6:	31 96       	adiw	r30, 0x01	; 1
    47a8:	88 ed       	ldi	r24, 0xD8	; 216
    47aa:	94 e0       	ldi	r25, 0x04	; 4
    47ac:	ad b7       	in	r26, 0x3d	; 61
    47ae:	be b7       	in	r27, 0x3e	; 62
    47b0:	12 96       	adiw	r26, 0x02	; 2
    47b2:	9c 93       	st	X, r25
    47b4:	8e 93       	st	-X, r24
    47b6:	11 97       	sbiw	r26, 0x01	; 1
    47b8:	80 91 aa 01 	lds	r24, 0x01AA
    47bc:	82 83       	std	Z+2, r24	; 0x02
    47be:	13 82       	std	Z+3, r1	; 0x03
    47c0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    47c4:	0f 90       	pop	r0
    47c6:	0f 90       	pop	r0
    47c8:	0f 90       	pop	r0
    47ca:	0f 90       	pop	r0
    47cc:	86 ed       	ldi	r24, 0xD6	; 214
    47ce:	94 e0       	ldi	r25, 0x04	; 4
    47d0:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print_dec(mousekey_accel); print(")\n");
    47d4:	00 d0       	rcall	.+0      	; 0x47d6 <mousekey_send+0x156>
    47d6:	00 d0       	rcall	.+0      	; 0x47d8 <mousekey_send+0x158>
    47d8:	ed b7       	in	r30, 0x3d	; 61
    47da:	fe b7       	in	r31, 0x3e	; 62
    47dc:	31 96       	adiw	r30, 0x01	; 1
    47de:	83 ed       	ldi	r24, 0xD3	; 211
    47e0:	94 e0       	ldi	r25, 0x04	; 4
    47e2:	ad b7       	in	r26, 0x3d	; 61
    47e4:	be b7       	in	r27, 0x3e	; 62
    47e6:	12 96       	adiw	r26, 0x02	; 2
    47e8:	9c 93       	st	X, r25
    47ea:	8e 93       	st	-X, r24
    47ec:	11 97       	sbiw	r26, 0x01	; 1
    47ee:	80 91 ab 01 	lds	r24, 0x01AB
    47f2:	82 83       	std	Z+2, r24	; 0x02
    47f4:	13 82       	std	Z+3, r1	; 0x03
    47f6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    47fa:	0f 90       	pop	r0
    47fc:	0f 90       	pop	r0
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	80 ed       	ldi	r24, 0xD0	; 208
    4804:	94 e0       	ldi	r25, 0x04	; 4
    4806:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    480a:	85 ea       	ldi	r24, 0xA5	; 165
    480c:	91 e0       	ldi	r25, 0x01	; 1
    480e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <host_mouse_send>
    last_timer = timer_read();
    4812:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <timer_read>
    4816:	90 93 ad 01 	sts	0x01AD, r25
    481a:	80 93 ac 01 	sts	0x01AC, r24
}
    481e:	08 95       	ret

00004820 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4820:	1f 93       	push	r17
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4822:	80 91 ac 01 	lds	r24, 0x01AC
    4826:	90 91 ad 01 	lds	r25, 0x01AD
    482a:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <timer_elapsed>
    482e:	ac 01       	movw	r20, r24
    4830:	20 91 aa 01 	lds	r18, 0x01AA
    4834:	22 23       	and	r18, r18
    4836:	21 f0       	breq	.+8      	; 0x4840 <mousekey_task+0x20>
    4838:	80 91 10 01 	lds	r24, 0x0110
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	06 c0       	rjmp	.+12     	; 0x484c <mousekey_task+0x2c>
    4840:	90 91 0f 01 	lds	r25, 0x010F
    4844:	8a e0       	ldi	r24, 0x0A	; 10
    4846:	98 9f       	mul	r25, r24
    4848:	c0 01       	movw	r24, r0
    484a:	11 24       	eor	r1, r1
    484c:	48 17       	cp	r20, r24
    484e:	59 07       	cpc	r21, r25
    4850:	08 f4       	brcc	.+2      	; 0x4854 <mousekey_task+0x34>
    4852:	85 c0       	rjmp	.+266    	; 0x495e <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4854:	90 91 a6 01 	lds	r25, 0x01A6
    4858:	99 23       	and	r25, r25
    485a:	69 f4       	brne	.+26     	; 0x4876 <mousekey_task+0x56>
    485c:	80 91 a7 01 	lds	r24, 0x01A7
    4860:	88 23       	and	r24, r24
    4862:	49 f4       	brne	.+18     	; 0x4876 <mousekey_task+0x56>
    4864:	80 91 a8 01 	lds	r24, 0x01A8
    4868:	88 23       	and	r24, r24
    486a:	29 f4       	brne	.+10     	; 0x4876 <mousekey_task+0x56>
    486c:	80 91 a9 01 	lds	r24, 0x01A9
    4870:	88 23       	and	r24, r24
    4872:	09 f4       	brne	.+2      	; 0x4876 <mousekey_task+0x56>
    4874:	74 c0       	rjmp	.+232    	; 0x495e <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4876:	2f 3f       	cpi	r18, 0xFF	; 255
    4878:	19 f0       	breq	.+6      	; 0x4880 <mousekey_task+0x60>
        mousekey_repeat++;
    487a:	2f 5f       	subi	r18, 0xFF	; 255
    487c:	20 93 aa 01 	sts	0x01AA, r18


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4880:	19 16       	cp	r1, r25
    4882:	24 f4       	brge	.+8      	; 0x488c <mousekey_task+0x6c>
    4884:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    4888:	80 93 a6 01 	sts	0x01A6, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    488c:	80 91 a6 01 	lds	r24, 0x01A6
    4890:	87 ff       	sbrs	r24, 7
    4892:	05 c0       	rjmp	.+10     	; 0x489e <mousekey_task+0x7e>
    4894:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    4898:	81 95       	neg	r24
    489a:	80 93 a6 01 	sts	0x01A6, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    489e:	80 91 a7 01 	lds	r24, 0x01A7
    48a2:	18 16       	cp	r1, r24
    48a4:	24 f4       	brge	.+8      	; 0x48ae <mousekey_task+0x8e>
    48a6:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    48aa:	80 93 a7 01 	sts	0x01A7, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    48ae:	80 91 a7 01 	lds	r24, 0x01A7
    48b2:	87 ff       	sbrs	r24, 7
    48b4:	05 c0       	rjmp	.+10     	; 0x48c0 <mousekey_task+0xa0>
    48b6:	0e 94 c7 21 	call	0x438e	; 0x438e <move_unit>
    48ba:	81 95       	neg	r24
    48bc:	80 93 a7 01 	sts	0x01A7, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    48c0:	60 91 a6 01 	lds	r22, 0x01A6
    48c4:	66 23       	and	r22, r22
    48c6:	39 f1       	breq	.+78     	; 0x4916 <mousekey_task+0xf6>
    48c8:	10 91 a7 01 	lds	r17, 0x01A7
    48cc:	11 23       	and	r17, r17
    48ce:	19 f1       	breq	.+70     	; 0x4916 <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    48d0:	77 27       	eor	r23, r23
    48d2:	67 fd       	sbrc	r22, 7
    48d4:	70 95       	com	r23
    48d6:	87 2f       	mov	r24, r23
    48d8:	97 2f       	mov	r25, r23
    48da:	0e 94 01 2c 	call	0x5802	; 0x5802 <__floatsisf>
    48de:	23 e3       	ldi	r18, 0x33	; 51
    48e0:	33 e3       	ldi	r19, 0x33	; 51
    48e2:	43 e3       	ldi	r20, 0x33	; 51
    48e4:	5f e3       	ldi	r21, 0x3F	; 63
    48e6:	0e 94 65 2c 	call	0x58ca	; 0x58ca <__mulsf3>
    48ea:	0e 94 ce 2b 	call	0x579c	; 0x579c <__fixsfsi>
    48ee:	60 93 a6 01 	sts	0x01A6, r22
        mouse_report.y *= 0.7;
    48f2:	61 2f       	mov	r22, r17
    48f4:	77 27       	eor	r23, r23
    48f6:	67 fd       	sbrc	r22, 7
    48f8:	70 95       	com	r23
    48fa:	87 2f       	mov	r24, r23
    48fc:	97 2f       	mov	r25, r23
    48fe:	0e 94 01 2c 	call	0x5802	; 0x5802 <__floatsisf>
    4902:	23 e3       	ldi	r18, 0x33	; 51
    4904:	33 e3       	ldi	r19, 0x33	; 51
    4906:	43 e3       	ldi	r20, 0x33	; 51
    4908:	5f e3       	ldi	r21, 0x3F	; 63
    490a:	0e 94 65 2c 	call	0x58ca	; 0x58ca <__mulsf3>
    490e:	0e 94 ce 2b 	call	0x579c	; 0x579c <__fixsfsi>
    4912:	60 93 a7 01 	sts	0x01A7, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4916:	80 91 a8 01 	lds	r24, 0x01A8
    491a:	18 16       	cp	r1, r24
    491c:	24 f4       	brge	.+8      	; 0x4926 <mousekey_task+0x106>
    491e:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    4922:	80 93 a8 01 	sts	0x01A8, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4926:	80 91 a8 01 	lds	r24, 0x01A8
    492a:	87 ff       	sbrs	r24, 7
    492c:	05 c0       	rjmp	.+10     	; 0x4938 <mousekey_task+0x118>
    492e:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    4932:	81 95       	neg	r24
    4934:	80 93 a8 01 	sts	0x01A8, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4938:	80 91 a9 01 	lds	r24, 0x01A9
    493c:	18 16       	cp	r1, r24
    493e:	24 f4       	brge	.+8      	; 0x4948 <mousekey_task+0x128>
    4940:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    4944:	80 93 a9 01 	sts	0x01A9, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4948:	80 91 a9 01 	lds	r24, 0x01A9
    494c:	87 ff       	sbrs	r24, 7
    494e:	05 c0       	rjmp	.+10     	; 0x495a <mousekey_task+0x13a>
    4950:	0e 94 0f 22 	call	0x441e	; 0x441e <wheel_unit>
    4954:	81 95       	neg	r24
    4956:	80 93 a9 01 	sts	0x01A9, r24

    mousekey_send();
    495a:	0e 94 40 23 	call	0x4680	; 0x4680 <mousekey_send>
}
    495e:	1f 91       	pop	r17
    4960:	08 95       	ret

00004962 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4962:	80 e0       	ldi	r24, 0x00	; 0
    4964:	08 95       	ret

00004966 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4966:	80 e0       	ldi	r24, 0x00	; 0
    4968:	08 95       	ret

0000496a <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    496a:	85 e3       	ldi	r24, 0x35	; 53
    496c:	99 e0       	ldi	r25, 0x09	; 9
    496e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
          "ESC/q:	quit\n"
#ifdef MOUSEKEY_ENABLE
          "m:	mousekey\n"
#endif
    );
}
    4972:	08 95       	ret

00004974 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4974:	89 eb       	ldi	r24, 0xB9	; 185
    4976:	99 e0       	ldi	r25, 0x09	; 9
    4978:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    497c:	00 d0       	rcall	.+0      	; 0x497e <mousekey_console_help+0xa>
    497e:	00 d0       	rcall	.+0      	; 0x4980 <mousekey_console_help+0xc>
    4980:	00 d0       	rcall	.+0      	; 0x4982 <mousekey_console_help+0xe>
    4982:	ed b7       	in	r30, 0x3d	; 61
    4984:	fe b7       	in	r31, 0x3e	; 62
    4986:	31 96       	adiw	r30, 0x01	; 1
    4988:	8b e6       	ldi	r24, 0x6B	; 107
    498a:	99 e0       	ldi	r25, 0x09	; 9
    498c:	ad b7       	in	r26, 0x3d	; 61
    498e:	be b7       	in	r27, 0x3e	; 62
    4990:	12 96       	adiw	r26, 0x02	; 2
    4992:	9c 93       	st	X, r25
    4994:	8e 93       	st	-X, r24
    4996:	11 97       	sbiw	r26, 0x01	; 1
    4998:	85 e0       	ldi	r24, 0x05	; 5
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	93 83       	std	Z+3, r25	; 0x03
    499e:	82 83       	std	Z+2, r24	; 0x02
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	95 83       	std	Z+5, r25	; 0x05
    49a6:	84 83       	std	Z+4, r24	; 0x04
    49a8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    49ac:	8d b7       	in	r24, 0x3d	; 61
    49ae:	9e b7       	in	r25, 0x3e	; 62
    49b0:	06 96       	adiw	r24, 0x06	; 6
    49b2:	0f b6       	in	r0, 0x3f	; 63
    49b4:	f8 94       	cli
    49b6:	9e bf       	out	0x3e, r25	; 62
    49b8:	0f be       	out	0x3f, r0	; 63
    49ba:	8d bf       	out	0x3d, r24	; 61
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    49bc:	08 95       	ret

000049be <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    49be:	83 30       	cpi	r24, 0x03	; 3
    49c0:	09 f4       	brne	.+2      	; 0x49c4 <mousekey_param_inc+0x6>
    49c2:	52 c0       	rjmp	.+164    	; 0x4a68 <mousekey_param_inc+0xaa>
    49c4:	84 30       	cpi	r24, 0x04	; 4
    49c6:	30 f4       	brcc	.+12     	; 0x49d4 <mousekey_param_inc+0x16>
    49c8:	81 30       	cpi	r24, 0x01	; 1
    49ca:	71 f0       	breq	.+28     	; 0x49e8 <mousekey_param_inc+0x2a>
    49cc:	82 30       	cpi	r24, 0x02	; 2
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <mousekey_param_inc+0x14>
    49d0:	da c0       	rjmp	.+436    	; 0x4b86 <mousekey_param_inc+0x1c8>
    49d2:	2a c0       	rjmp	.+84     	; 0x4a28 <mousekey_param_inc+0x6a>
    49d4:	85 30       	cpi	r24, 0x05	; 5
    49d6:	09 f4       	brne	.+2      	; 0x49da <mousekey_param_inc+0x1c>
    49d8:	87 c0       	rjmp	.+270    	; 0x4ae8 <mousekey_param_inc+0x12a>
    49da:	85 30       	cpi	r24, 0x05	; 5
    49dc:	08 f4       	brcc	.+2      	; 0x49e0 <mousekey_param_inc+0x22>
    49de:	64 c0       	rjmp	.+200    	; 0x4aa8 <mousekey_param_inc+0xea>
    49e0:	86 30       	cpi	r24, 0x06	; 6
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <mousekey_param_inc+0x28>
    49e4:	d0 c0       	rjmp	.+416    	; 0x4b86 <mousekey_param_inc+0x1c8>
    49e6:	a8 c0       	rjmp	.+336    	; 0x4b38 <mousekey_param_inc+0x17a>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    49e8:	20 91 0f 01 	lds	r18, 0x010F
    49ec:	82 2f       	mov	r24, r18
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	86 0f       	add	r24, r22
    49f2:	91 1d       	adc	r25, r1
    49f4:	8f 3f       	cpi	r24, 0xFF	; 255
    49f6:	91 05       	cpc	r25, r1
    49f8:	20 f4       	brcc	.+8      	; 0x4a02 <mousekey_param_inc+0x44>
                mk_delay += inc;
    49fa:	26 0f       	add	r18, r22
    49fc:	20 93 0f 01 	sts	0x010F, r18
    4a00:	03 c0       	rjmp	.+6      	; 0x4a08 <mousekey_param_inc+0x4a>
            else
                mk_delay = UINT8_MAX;
    4a02:	8f ef       	ldi	r24, 0xFF	; 255
    4a04:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_delay);
    4a08:	00 d0       	rcall	.+0      	; 0x4a0a <mousekey_param_inc+0x4c>
    4a0a:	00 d0       	rcall	.+0      	; 0x4a0c <mousekey_param_inc+0x4e>
    4a0c:	ed b7       	in	r30, 0x3d	; 61
    4a0e:	fe b7       	in	r31, 0x3e	; 62
    4a10:	31 96       	adiw	r30, 0x01	; 1
    4a12:	8a ed       	ldi	r24, 0xDA	; 218
    4a14:	9b e0       	ldi	r25, 0x0B	; 11
    4a16:	ad b7       	in	r26, 0x3d	; 61
    4a18:	be b7       	in	r27, 0x3e	; 62
    4a1a:	12 96       	adiw	r26, 0x02	; 2
    4a1c:	9c 93       	st	X, r25
    4a1e:	8e 93       	st	-X, r24
    4a20:	11 97       	sbiw	r26, 0x01	; 1
    4a22:	80 91 0f 01 	lds	r24, 0x010F
    4a26:	7f c0       	rjmp	.+254    	; 0x4b26 <mousekey_param_inc+0x168>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4a28:	20 91 10 01 	lds	r18, 0x0110
    4a2c:	82 2f       	mov	r24, r18
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	86 0f       	add	r24, r22
    4a32:	91 1d       	adc	r25, r1
    4a34:	8f 3f       	cpi	r24, 0xFF	; 255
    4a36:	91 05       	cpc	r25, r1
    4a38:	20 f4       	brcc	.+8      	; 0x4a42 <mousekey_param_inc+0x84>
                mk_interval += inc;
    4a3a:	26 0f       	add	r18, r22
    4a3c:	20 93 10 01 	sts	0x0110, r18
    4a40:	03 c0       	rjmp	.+6      	; 0x4a48 <mousekey_param_inc+0x8a>
            else
                mk_interval = UINT8_MAX;
    4a42:	8f ef       	ldi	r24, 0xFF	; 255
    4a44:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_interval);
    4a48:	00 d0       	rcall	.+0      	; 0x4a4a <mousekey_param_inc+0x8c>
    4a4a:	00 d0       	rcall	.+0      	; 0x4a4c <mousekey_param_inc+0x8e>
    4a4c:	ed b7       	in	r30, 0x3d	; 61
    4a4e:	fe b7       	in	r31, 0x3e	; 62
    4a50:	31 96       	adiw	r30, 0x01	; 1
    4a52:	88 ec       	ldi	r24, 0xC8	; 200
    4a54:	9b e0       	ldi	r25, 0x0B	; 11
    4a56:	ad b7       	in	r26, 0x3d	; 61
    4a58:	be b7       	in	r27, 0x3e	; 62
    4a5a:	12 96       	adiw	r26, 0x02	; 2
    4a5c:	9c 93       	st	X, r25
    4a5e:	8e 93       	st	-X, r24
    4a60:	11 97       	sbiw	r26, 0x01	; 1
    4a62:	80 91 10 01 	lds	r24, 0x0110
    4a66:	5f c0       	rjmp	.+190    	; 0x4b26 <mousekey_param_inc+0x168>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4a68:	20 91 11 01 	lds	r18, 0x0111
    4a6c:	82 2f       	mov	r24, r18
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	86 0f       	add	r24, r22
    4a72:	91 1d       	adc	r25, r1
    4a74:	8f 3f       	cpi	r24, 0xFF	; 255
    4a76:	91 05       	cpc	r25, r1
    4a78:	20 f4       	brcc	.+8      	; 0x4a82 <mousekey_param_inc+0xc4>
                mk_max_speed += inc;
    4a7a:	26 0f       	add	r18, r22
    4a7c:	20 93 11 01 	sts	0x0111, r18
    4a80:	03 c0       	rjmp	.+6      	; 0x4a88 <mousekey_param_inc+0xca>
            else
                mk_max_speed = UINT8_MAX;
    4a82:	8f ef       	ldi	r24, 0xFF	; 255
    4a84:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    4a88:	00 d0       	rcall	.+0      	; 0x4a8a <mousekey_param_inc+0xcc>
    4a8a:	00 d0       	rcall	.+0      	; 0x4a8c <mousekey_param_inc+0xce>
    4a8c:	ed b7       	in	r30, 0x3d	; 61
    4a8e:	fe b7       	in	r31, 0x3e	; 62
    4a90:	31 96       	adiw	r30, 0x01	; 1
    4a92:	85 eb       	ldi	r24, 0xB5	; 181
    4a94:	9b e0       	ldi	r25, 0x0B	; 11
    4a96:	ad b7       	in	r26, 0x3d	; 61
    4a98:	be b7       	in	r27, 0x3e	; 62
    4a9a:	12 96       	adiw	r26, 0x02	; 2
    4a9c:	9c 93       	st	X, r25
    4a9e:	8e 93       	st	-X, r24
    4aa0:	11 97       	sbiw	r26, 0x01	; 1
    4aa2:	80 91 11 01 	lds	r24, 0x0111
    4aa6:	3f c0       	rjmp	.+126    	; 0x4b26 <mousekey_param_inc+0x168>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4aa8:	20 91 12 01 	lds	r18, 0x0112
    4aac:	82 2f       	mov	r24, r18
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	86 0f       	add	r24, r22
    4ab2:	91 1d       	adc	r25, r1
    4ab4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ab6:	91 05       	cpc	r25, r1
    4ab8:	20 f4       	brcc	.+8      	; 0x4ac2 <mousekey_param_inc+0x104>
                mk_time_to_max += inc;
    4aba:	26 0f       	add	r18, r22
    4abc:	20 93 12 01 	sts	0x0112, r18
    4ac0:	03 c0       	rjmp	.+6      	; 0x4ac8 <mousekey_param_inc+0x10a>
            else
                mk_time_to_max = UINT8_MAX;
    4ac2:	8f ef       	ldi	r24, 0xFF	; 255
    4ac4:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_time_to_max);
    4ac8:	00 d0       	rcall	.+0      	; 0x4aca <mousekey_param_inc+0x10c>
    4aca:	00 d0       	rcall	.+0      	; 0x4acc <mousekey_param_inc+0x10e>
    4acc:	ed b7       	in	r30, 0x3d	; 61
    4ace:	fe b7       	in	r31, 0x3e	; 62
    4ad0:	31 96       	adiw	r30, 0x01	; 1
    4ad2:	80 ea       	ldi	r24, 0xA0	; 160
    4ad4:	9b e0       	ldi	r25, 0x0B	; 11
    4ad6:	ad b7       	in	r26, 0x3d	; 61
    4ad8:	be b7       	in	r27, 0x3e	; 62
    4ada:	12 96       	adiw	r26, 0x02	; 2
    4adc:	9c 93       	st	X, r25
    4ade:	8e 93       	st	-X, r24
    4ae0:	11 97       	sbiw	r26, 0x01	; 1
    4ae2:	80 91 12 01 	lds	r24, 0x0112
    4ae6:	1f c0       	rjmp	.+62     	; 0x4b26 <mousekey_param_inc+0x168>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4ae8:	20 91 13 01 	lds	r18, 0x0113
    4aec:	82 2f       	mov	r24, r18
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	86 0f       	add	r24, r22
    4af2:	91 1d       	adc	r25, r1
    4af4:	8f 3f       	cpi	r24, 0xFF	; 255
    4af6:	91 05       	cpc	r25, r1
    4af8:	20 f4       	brcc	.+8      	; 0x4b02 <mousekey_param_inc+0x144>
                mk_wheel_max_speed += inc;
    4afa:	26 0f       	add	r18, r22
    4afc:	20 93 13 01 	sts	0x0113, r18
    4b00:	03 c0       	rjmp	.+6      	; 0x4b08 <mousekey_param_inc+0x14a>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4b02:	8f ef       	ldi	r24, 0xFF	; 255
    4b04:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4b08:	00 d0       	rcall	.+0      	; 0x4b0a <mousekey_param_inc+0x14c>
    4b0a:	00 d0       	rcall	.+0      	; 0x4b0c <mousekey_param_inc+0x14e>
    4b0c:	ed b7       	in	r30, 0x3d	; 61
    4b0e:	fe b7       	in	r31, 0x3e	; 62
    4b10:	31 96       	adiw	r30, 0x01	; 1
    4b12:	87 e8       	ldi	r24, 0x87	; 135
    4b14:	9b e0       	ldi	r25, 0x0B	; 11
    4b16:	ad b7       	in	r26, 0x3d	; 61
    4b18:	be b7       	in	r27, 0x3e	; 62
    4b1a:	12 96       	adiw	r26, 0x02	; 2
    4b1c:	9c 93       	st	X, r25
    4b1e:	8e 93       	st	-X, r24
    4b20:	11 97       	sbiw	r26, 0x01	; 1
    4b22:	80 91 13 01 	lds	r24, 0x0113
    4b26:	82 83       	std	Z+2, r24	; 0x02
    4b28:	13 82       	std	Z+3, r1	; 0x03
    4b2a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4b2e:	0f 90       	pop	r0
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	08 95       	ret
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4b38:	20 91 14 01 	lds	r18, 0x0114
    4b3c:	82 2f       	mov	r24, r18
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	86 0f       	add	r24, r22
    4b42:	91 1d       	adc	r25, r1
    4b44:	8f 3f       	cpi	r24, 0xFF	; 255
    4b46:	91 05       	cpc	r25, r1
    4b48:	20 f4       	brcc	.+8      	; 0x4b52 <mousekey_param_inc+0x194>
                mk_wheel_time_to_max += inc;
    4b4a:	26 0f       	add	r18, r22
    4b4c:	20 93 14 01 	sts	0x0114, r18
    4b50:	03 c0       	rjmp	.+6      	; 0x4b58 <mousekey_param_inc+0x19a>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4b52:	8f ef       	ldi	r24, 0xFF	; 255
    4b54:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b58:	00 d0       	rcall	.+0      	; 0x4b5a <mousekey_param_inc+0x19c>
    4b5a:	00 d0       	rcall	.+0      	; 0x4b5c <mousekey_param_inc+0x19e>
    4b5c:	ed b7       	in	r30, 0x3d	; 61
    4b5e:	fe b7       	in	r31, 0x3e	; 62
    4b60:	31 96       	adiw	r30, 0x01	; 1
    4b62:	8c e6       	ldi	r24, 0x6C	; 108
    4b64:	9b e0       	ldi	r25, 0x0B	; 11
    4b66:	ad b7       	in	r26, 0x3d	; 61
    4b68:	be b7       	in	r27, 0x3e	; 62
    4b6a:	12 96       	adiw	r26, 0x02	; 2
    4b6c:	9c 93       	st	X, r25
    4b6e:	8e 93       	st	-X, r24
    4b70:	11 97       	sbiw	r26, 0x01	; 1
    4b72:	80 91 14 01 	lds	r24, 0x0114
    4b76:	82 83       	std	Z+2, r24	; 0x02
    4b78:	13 82       	std	Z+3, r1	; 0x03
    4b7a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4b7e:	0f 90       	pop	r0
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	08 95       	ret

00004b88 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4b88:	83 30       	cpi	r24, 0x03	; 3
    4b8a:	09 f4       	brne	.+2      	; 0x4b8e <mousekey_param_dec+0x6>
    4b8c:	46 c0       	rjmp	.+140    	; 0x4c1a <mousekey_param_dec+0x92>
    4b8e:	84 30       	cpi	r24, 0x04	; 4
    4b90:	30 f4       	brcc	.+12     	; 0x4b9e <mousekey_param_dec+0x16>
    4b92:	81 30       	cpi	r24, 0x01	; 1
    4b94:	71 f0       	breq	.+28     	; 0x4bb2 <mousekey_param_dec+0x2a>
    4b96:	82 30       	cpi	r24, 0x02	; 2
    4b98:	09 f0       	breq	.+2      	; 0x4b9c <mousekey_param_dec+0x14>
    4b9a:	b6 c0       	rjmp	.+364    	; 0x4d08 <mousekey_param_dec+0x180>
    4b9c:	24 c0       	rjmp	.+72     	; 0x4be6 <mousekey_param_dec+0x5e>
    4b9e:	85 30       	cpi	r24, 0x05	; 5
    4ba0:	09 f4       	brne	.+2      	; 0x4ba4 <mousekey_param_dec+0x1c>
    4ba2:	6f c0       	rjmp	.+222    	; 0x4c82 <mousekey_param_dec+0xfa>
    4ba4:	85 30       	cpi	r24, 0x05	; 5
    4ba6:	08 f4       	brcc	.+2      	; 0x4baa <mousekey_param_dec+0x22>
    4ba8:	52 c0       	rjmp	.+164    	; 0x4c4e <mousekey_param_dec+0xc6>
    4baa:	86 30       	cpi	r24, 0x06	; 6
    4bac:	09 f0       	breq	.+2      	; 0x4bb0 <mousekey_param_dec+0x28>
    4bae:	ac c0       	rjmp	.+344    	; 0x4d08 <mousekey_param_dec+0x180>
    4bb0:	8a c0       	rjmp	.+276    	; 0x4cc6 <mousekey_param_dec+0x13e>
        case 1:
            if (mk_delay > dec)
    4bb2:	80 91 0f 01 	lds	r24, 0x010F
    4bb6:	68 17       	cp	r22, r24
    4bb8:	20 f4       	brcc	.+8      	; 0x4bc2 <mousekey_param_dec+0x3a>
                mk_delay -= dec;
    4bba:	86 1b       	sub	r24, r22
    4bbc:	80 93 0f 01 	sts	0x010F, r24
    4bc0:	02 c0       	rjmp	.+4      	; 0x4bc6 <mousekey_param_dec+0x3e>
            else
                mk_delay = 0;
    4bc2:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_delay);
    4bc6:	00 d0       	rcall	.+0      	; 0x4bc8 <mousekey_param_dec+0x40>
    4bc8:	00 d0       	rcall	.+0      	; 0x4bca <mousekey_param_dec+0x42>
    4bca:	ed b7       	in	r30, 0x3d	; 61
    4bcc:	fe b7       	in	r31, 0x3e	; 62
    4bce:	31 96       	adiw	r30, 0x01	; 1
    4bd0:	87 e5       	ldi	r24, 0x57	; 87
    4bd2:	9c e0       	ldi	r25, 0x0C	; 12
    4bd4:	ad b7       	in	r26, 0x3d	; 61
    4bd6:	be b7       	in	r27, 0x3e	; 62
    4bd8:	12 96       	adiw	r26, 0x02	; 2
    4bda:	9c 93       	st	X, r25
    4bdc:	8e 93       	st	-X, r24
    4bde:	11 97       	sbiw	r26, 0x01	; 1
    4be0:	80 91 0f 01 	lds	r24, 0x010F
    4be4:	67 c0       	rjmp	.+206    	; 0x4cb4 <mousekey_param_dec+0x12c>
            break;
        case 2:
            if (mk_interval > dec)
    4be6:	80 91 10 01 	lds	r24, 0x0110
    4bea:	68 17       	cp	r22, r24
    4bec:	20 f4       	brcc	.+8      	; 0x4bf6 <mousekey_param_dec+0x6e>
                mk_interval -= dec;
    4bee:	86 1b       	sub	r24, r22
    4bf0:	80 93 10 01 	sts	0x0110, r24
    4bf4:	02 c0       	rjmp	.+4      	; 0x4bfa <mousekey_param_dec+0x72>
            else
                mk_interval = 0;
    4bf6:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_interval);
    4bfa:	00 d0       	rcall	.+0      	; 0x4bfc <mousekey_param_dec+0x74>
    4bfc:	00 d0       	rcall	.+0      	; 0x4bfe <mousekey_param_dec+0x76>
    4bfe:	ed b7       	in	r30, 0x3d	; 61
    4c00:	fe b7       	in	r31, 0x3e	; 62
    4c02:	31 96       	adiw	r30, 0x01	; 1
    4c04:	85 e4       	ldi	r24, 0x45	; 69
    4c06:	9c e0       	ldi	r25, 0x0C	; 12
    4c08:	ad b7       	in	r26, 0x3d	; 61
    4c0a:	be b7       	in	r27, 0x3e	; 62
    4c0c:	12 96       	adiw	r26, 0x02	; 2
    4c0e:	9c 93       	st	X, r25
    4c10:	8e 93       	st	-X, r24
    4c12:	11 97       	sbiw	r26, 0x01	; 1
    4c14:	80 91 10 01 	lds	r24, 0x0110
    4c18:	4d c0       	rjmp	.+154    	; 0x4cb4 <mousekey_param_dec+0x12c>
            break;
        case 3:
            if (mk_max_speed > dec)
    4c1a:	80 91 11 01 	lds	r24, 0x0111
    4c1e:	68 17       	cp	r22, r24
    4c20:	20 f4       	brcc	.+8      	; 0x4c2a <mousekey_param_dec+0xa2>
                mk_max_speed -= dec;
    4c22:	86 1b       	sub	r24, r22
    4c24:	80 93 11 01 	sts	0x0111, r24
    4c28:	02 c0       	rjmp	.+4      	; 0x4c2e <mousekey_param_dec+0xa6>
            else
                mk_max_speed = 0;
    4c2a:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    4c2e:	00 d0       	rcall	.+0      	; 0x4c30 <mousekey_param_dec+0xa8>
    4c30:	00 d0       	rcall	.+0      	; 0x4c32 <mousekey_param_dec+0xaa>
    4c32:	ed b7       	in	r30, 0x3d	; 61
    4c34:	fe b7       	in	r31, 0x3e	; 62
    4c36:	31 96       	adiw	r30, 0x01	; 1
    4c38:	82 e3       	ldi	r24, 0x32	; 50
    4c3a:	9c e0       	ldi	r25, 0x0C	; 12
    4c3c:	ad b7       	in	r26, 0x3d	; 61
    4c3e:	be b7       	in	r27, 0x3e	; 62
    4c40:	12 96       	adiw	r26, 0x02	; 2
    4c42:	9c 93       	st	X, r25
    4c44:	8e 93       	st	-X, r24
    4c46:	11 97       	sbiw	r26, 0x01	; 1
    4c48:	80 91 11 01 	lds	r24, 0x0111
    4c4c:	33 c0       	rjmp	.+102    	; 0x4cb4 <mousekey_param_dec+0x12c>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4c4e:	80 91 12 01 	lds	r24, 0x0112
    4c52:	68 17       	cp	r22, r24
    4c54:	20 f4       	brcc	.+8      	; 0x4c5e <mousekey_param_dec+0xd6>
                mk_time_to_max -= dec;
    4c56:	86 1b       	sub	r24, r22
    4c58:	80 93 12 01 	sts	0x0112, r24
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <mousekey_param_dec+0xda>
            else
                mk_time_to_max = 0;
    4c5e:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_time_to_max);
    4c62:	00 d0       	rcall	.+0      	; 0x4c64 <mousekey_param_dec+0xdc>
    4c64:	00 d0       	rcall	.+0      	; 0x4c66 <mousekey_param_dec+0xde>
    4c66:	ed b7       	in	r30, 0x3d	; 61
    4c68:	fe b7       	in	r31, 0x3e	; 62
    4c6a:	31 96       	adiw	r30, 0x01	; 1
    4c6c:	8d e1       	ldi	r24, 0x1D	; 29
    4c6e:	9c e0       	ldi	r25, 0x0C	; 12
    4c70:	ad b7       	in	r26, 0x3d	; 61
    4c72:	be b7       	in	r27, 0x3e	; 62
    4c74:	12 96       	adiw	r26, 0x02	; 2
    4c76:	9c 93       	st	X, r25
    4c78:	8e 93       	st	-X, r24
    4c7a:	11 97       	sbiw	r26, 0x01	; 1
    4c7c:	80 91 12 01 	lds	r24, 0x0112
    4c80:	19 c0       	rjmp	.+50     	; 0x4cb4 <mousekey_param_dec+0x12c>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4c82:	80 91 13 01 	lds	r24, 0x0113
    4c86:	68 17       	cp	r22, r24
    4c88:	20 f4       	brcc	.+8      	; 0x4c92 <mousekey_param_dec+0x10a>
                mk_wheel_max_speed -= dec;
    4c8a:	86 1b       	sub	r24, r22
    4c8c:	80 93 13 01 	sts	0x0113, r24
    4c90:	02 c0       	rjmp	.+4      	; 0x4c96 <mousekey_param_dec+0x10e>
            else
                mk_wheel_max_speed = 0;
    4c92:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4c96:	00 d0       	rcall	.+0      	; 0x4c98 <mousekey_param_dec+0x110>
    4c98:	00 d0       	rcall	.+0      	; 0x4c9a <mousekey_param_dec+0x112>
    4c9a:	ed b7       	in	r30, 0x3d	; 61
    4c9c:	fe b7       	in	r31, 0x3e	; 62
    4c9e:	31 96       	adiw	r30, 0x01	; 1
    4ca0:	84 e0       	ldi	r24, 0x04	; 4
    4ca2:	9c e0       	ldi	r25, 0x0C	; 12
    4ca4:	ad b7       	in	r26, 0x3d	; 61
    4ca6:	be b7       	in	r27, 0x3e	; 62
    4ca8:	12 96       	adiw	r26, 0x02	; 2
    4caa:	9c 93       	st	X, r25
    4cac:	8e 93       	st	-X, r24
    4cae:	11 97       	sbiw	r26, 0x01	; 1
    4cb0:	80 91 13 01 	lds	r24, 0x0113
    4cb4:	82 83       	std	Z+2, r24	; 0x02
    4cb6:	13 82       	std	Z+3, r1	; 0x03
    4cb8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	08 95       	ret
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4cc6:	80 91 14 01 	lds	r24, 0x0114
    4cca:	68 17       	cp	r22, r24
    4ccc:	20 f4       	brcc	.+8      	; 0x4cd6 <mousekey_param_dec+0x14e>
                mk_wheel_time_to_max -= dec;
    4cce:	86 1b       	sub	r24, r22
    4cd0:	80 93 14 01 	sts	0x0114, r24
    4cd4:	02 c0       	rjmp	.+4      	; 0x4cda <mousekey_param_dec+0x152>
            else
                mk_wheel_time_to_max = 0;
    4cd6:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4cda:	00 d0       	rcall	.+0      	; 0x4cdc <mousekey_param_dec+0x154>
    4cdc:	00 d0       	rcall	.+0      	; 0x4cde <mousekey_param_dec+0x156>
    4cde:	ed b7       	in	r30, 0x3d	; 61
    4ce0:	fe b7       	in	r31, 0x3e	; 62
    4ce2:	31 96       	adiw	r30, 0x01	; 1
    4ce4:	89 ee       	ldi	r24, 0xE9	; 233
    4ce6:	9b e0       	ldi	r25, 0x0B	; 11
    4ce8:	ad b7       	in	r26, 0x3d	; 61
    4cea:	be b7       	in	r27, 0x3e	; 62
    4cec:	12 96       	adiw	r26, 0x02	; 2
    4cee:	9c 93       	st	X, r25
    4cf0:	8e 93       	st	-X, r24
    4cf2:	11 97       	sbiw	r26, 0x01	; 1
    4cf4:	80 91 14 01 	lds	r24, 0x0114
    4cf8:	82 83       	std	Z+2, r24	; 0x02
    4cfa:	13 82       	std	Z+3, r1	; 0x03
    4cfc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4d00:	0f 90       	pop	r0
    4d02:	0f 90       	pop	r0
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	08 95       	ret

00004d0a <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4d0a:	1f 93       	push	r17
    4d0c:	18 2f       	mov	r17, r24
    xprintf("L%d\n", layer);
    4d0e:	00 d0       	rcall	.+0      	; 0x4d10 <switch_default_layer+0x6>
    4d10:	00 d0       	rcall	.+0      	; 0x4d12 <switch_default_layer+0x8>
    4d12:	ed b7       	in	r30, 0x3d	; 61
    4d14:	fe b7       	in	r31, 0x3e	; 62
    4d16:	31 96       	adiw	r30, 0x01	; 1
    4d18:	8c e5       	ldi	r24, 0x5C	; 92
    4d1a:	99 e0       	ldi	r25, 0x09	; 9
    4d1c:	ad b7       	in	r26, 0x3d	; 61
    4d1e:	be b7       	in	r27, 0x3e	; 62
    4d20:	12 96       	adiw	r26, 0x02	; 2
    4d22:	9c 93       	st	X, r25
    4d24:	8e 93       	st	-X, r24
    4d26:	11 97       	sbiw	r26, 0x01	; 1
    4d28:	12 83       	std	Z+2, r17	; 0x02
    4d2a:	13 82       	std	Z+3, r1	; 0x03
    4d2c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    default_layer_set(1UL<<layer);
    4d30:	0f 90       	pop	r0
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	61 e0       	ldi	r22, 0x01	; 1
    4d3a:	70 e0       	ldi	r23, 0x00	; 0
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	04 c0       	rjmp	.+8      	; 0x4d4a <switch_default_layer+0x40>
    4d42:	66 0f       	add	r22, r22
    4d44:	77 1f       	adc	r23, r23
    4d46:	88 1f       	adc	r24, r24
    4d48:	99 1f       	adc	r25, r25
    4d4a:	1a 95       	dec	r17
    4d4c:	d2 f7       	brpl	.-12     	; 0x4d42 <switch_default_layer+0x38>
    4d4e:	0e 94 6f 1c 	call	0x38de	; 0x38de <default_layer_set>
    clear_keyboard();
    4d52:	0e 94 32 13 	call	0x2664	; 0x2664 <clear_keyboard>
}
    4d56:	1f 91       	pop	r17
    4d58:	08 95       	ret

00004d5a <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4d5a:	1f 93       	push	r17
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4d5c:	8b 31       	cpi	r24, 0x1B	; 27
    4d5e:	09 f4       	brne	.+2      	; 0x4d62 <command_common+0x8>
    4d60:	63 c2       	rjmp	.+1222   	; 0x5228 <command_common+0x4ce>
    4d62:	8c 31       	cpi	r24, 0x1C	; 28
    4d64:	20 f5       	brcc	.+72     	; 0x4dae <command_common+0x54>
    4d66:	8e 30       	cpi	r24, 0x0E	; 14
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <command_common+0x12>
    4d6a:	79 c2       	rjmp	.+1266   	; 0x525e <command_common+0x504>
    4d6c:	8f 30       	cpi	r24, 0x0F	; 15
    4d6e:	78 f4       	brcc	.+30     	; 0x4d8e <command_common+0x34>
    4d70:	87 30       	cpi	r24, 0x07	; 7
    4d72:	09 f4       	brne	.+2      	; 0x4d76 <command_common+0x1c>
    4d74:	4a c2       	rjmp	.+1172   	; 0x520a <command_common+0x4b0>
    4d76:	88 30       	cpi	r24, 0x08	; 8
    4d78:	20 f4       	brcc	.+8      	; 0x4d82 <command_common+0x28>
    4d7a:	86 30       	cpi	r24, 0x06	; 6
    4d7c:	09 f0       	breq	.+2      	; 0x4d80 <command_common+0x26>
    4d7e:	39 c3       	rjmp	.+1650   	; 0x53f2 <command_common+0x698>
    4d80:	23 c2       	rjmp	.+1094   	; 0x51c8 <command_common+0x46e>
    4d82:	88 30       	cpi	r24, 0x08	; 8
    4d84:	b1 f1       	breq	.+108    	; 0x4df2 <command_common+0x98>
    4d86:	8b 30       	cpi	r24, 0x0B	; 11
    4d88:	09 f0       	breq	.+2      	; 0x4d8c <command_common+0x32>
    4d8a:	33 c3       	rjmp	.+1638   	; 0x53f2 <command_common+0x698>
    4d8c:	17 c2       	rjmp	.+1070   	; 0x51bc <command_common+0x462>
    4d8e:	81 31       	cpi	r24, 0x11	; 17
    4d90:	09 f4       	brne	.+2      	; 0x4d94 <command_common+0x3a>
    4d92:	17 c3       	rjmp	.+1582   	; 0x53c2 <command_common+0x668>
    4d94:	82 31       	cpi	r24, 0x12	; 18
    4d96:	20 f4       	brcc	.+8      	; 0x4da0 <command_common+0x46>
    4d98:	80 31       	cpi	r24, 0x10	; 16
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <command_common+0x44>
    4d9c:	2a c3       	rjmp	.+1620   	; 0x53f2 <command_common+0x698>
    4d9e:	75 c2       	rjmp	.+1258   	; 0x528a <command_common+0x530>
    4da0:	86 31       	cpi	r24, 0x16	; 22
    4da2:	09 f4       	brne	.+2      	; 0x4da6 <command_common+0x4c>
    4da4:	a1 c2       	rjmp	.+1346   	; 0x52e8 <command_common+0x58e>
    4da6:	89 31       	cpi	r24, 0x19	; 25
    4da8:	09 f0       	breq	.+2      	; 0x4dac <command_common+0x52>
    4daa:	23 c3       	rjmp	.+1606   	; 0x53f2 <command_common+0x698>
    4dac:	86 c2       	rjmp	.+1292   	; 0x52ba <command_common+0x560>
    4dae:	85 33       	cpi	r24, 0x35	; 53
    4db0:	09 f4       	brne	.+2      	; 0x4db4 <command_common+0x5a>
    4db2:	17 c3       	rjmp	.+1582   	; 0x53e2 <command_common+0x688>
    4db4:	86 33       	cpi	r24, 0x36	; 54
    4db6:	68 f4       	brcc	.+26     	; 0x4dd2 <command_common+0x78>
    4db8:	87 32       	cpi	r24, 0x27	; 39
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <command_common+0x64>
    4dbc:	12 c3       	rjmp	.+1572   	; 0x53e2 <command_common+0x688>
    4dbe:	88 32       	cpi	r24, 0x28	; 40
    4dc0:	20 f4       	brcc	.+8      	; 0x4dca <command_common+0x70>
    4dc2:	8e 31       	cpi	r24, 0x1E	; 30
    4dc4:	08 f4       	brcc	.+2      	; 0x4dc8 <command_common+0x6e>
    4dc6:	15 c3       	rjmp	.+1578   	; 0x53f2 <command_common+0x698>
    4dc8:	0e c3       	rjmp	.+1564   	; 0x53e6 <command_common+0x68c>
    4dca:	89 32       	cpi	r24, 0x29	; 41
    4dcc:	09 f0       	breq	.+2      	; 0x4dd0 <command_common+0x76>
    4dce:	11 c3       	rjmp	.+1570   	; 0x53f2 <command_common+0x698>
    4dd0:	08 c3       	rjmp	.+1552   	; 0x53e2 <command_common+0x688>
    4dd2:	83 34       	cpi	r24, 0x43	; 67
    4dd4:	38 f4       	brcc	.+14     	; 0x4de4 <command_common+0x8a>
    4dd6:	8a 33       	cpi	r24, 0x3A	; 58
    4dd8:	08 f0       	brcs	.+2      	; 0x4ddc <command_common+0x82>
    4dda:	07 c3       	rjmp	.+1550   	; 0x53ea <command_common+0x690>
    4ddc:	88 33       	cpi	r24, 0x38	; 56
    4dde:	09 f0       	breq	.+2      	; 0x4de2 <command_common+0x88>
    4de0:	08 c3       	rjmp	.+1552   	; 0x53f2 <command_common+0x698>
    4de2:	ec c1       	rjmp	.+984    	; 0x51bc <command_common+0x462>
    4de4:	83 34       	cpi	r24, 0x43	; 67
    4de6:	09 f4       	brne	.+2      	; 0x4dea <command_common+0x90>
    4de8:	fc c2       	rjmp	.+1528   	; 0x53e2 <command_common+0x688>
    4dea:	88 34       	cpi	r24, 0x48	; 72
    4dec:	09 f0       	breq	.+2      	; 0x4df0 <command_common+0x96>
    4dee:	01 c3       	rjmp	.+1538   	; 0x53f2 <command_common+0x698>
    4df0:	fa c1       	rjmp	.+1012   	; 0x51e6 <command_common+0x48c>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4df2:	82 e4       	ldi	r24, 0x42	; 66
    4df4:	97 e0       	ldi	r25, 0x07	; 7
    4df6:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4dfa:	80 e8       	ldi	r24, 0x80	; 128
    4dfc:	98 e0       	ldi	r25, 0x08	; 8
    4dfe:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4e02:	0e 94 97 21 	call	0x432e	; 0x432e <eeconfig_read_default_layer>
    4e06:	00 d0       	rcall	.+0      	; 0x4e08 <command_common+0xae>
    4e08:	00 d0       	rcall	.+0      	; 0x4e0a <command_common+0xb0>
    4e0a:	ed b7       	in	r30, 0x3d	; 61
    4e0c:	fe b7       	in	r31, 0x3e	; 62
    4e0e:	31 96       	adiw	r30, 0x01	; 1
    4e10:	2d e7       	ldi	r18, 0x7D	; 125
    4e12:	38 e0       	ldi	r19, 0x08	; 8
    4e14:	ad b7       	in	r26, 0x3d	; 61
    4e16:	be b7       	in	r27, 0x3e	; 62
    4e18:	12 96       	adiw	r26, 0x02	; 2
    4e1a:	3c 93       	st	X, r19
    4e1c:	2e 93       	st	-X, r18
    4e1e:	11 97       	sbiw	r26, 0x01	; 1
    4e20:	82 83       	std	Z+2, r24	; 0x02
    4e22:	13 82       	std	Z+3, r1	; 0x03
    4e24:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4e28:	0f 90       	pop	r0
    4e2a:	0f 90       	pop	r0
    4e2c:	0f 90       	pop	r0
    4e2e:	0f 90       	pop	r0
    4e30:	8b e7       	ldi	r24, 0x7B	; 123
    4e32:	98 e0       	ldi	r25, 0x08	; 8
    4e34:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4e38:	0e 94 9c 21 	call	0x4338	; 0x4338 <eeconfig_read_debug>
    4e3c:	18 2f       	mov	r17, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4e3e:	88 e6       	ldi	r24, 0x68	; 104
    4e40:	98 e0       	ldi	r25, 0x08	; 8
    4e42:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4e46:	00 d0       	rcall	.+0      	; 0x4e48 <command_common+0xee>
    4e48:	00 d0       	rcall	.+0      	; 0x4e4a <command_common+0xf0>
    4e4a:	ed b7       	in	r30, 0x3d	; 61
    4e4c:	fe b7       	in	r31, 0x3e	; 62
    4e4e:	31 96       	adiw	r30, 0x01	; 1
    4e50:	83 e6       	ldi	r24, 0x63	; 99
    4e52:	98 e0       	ldi	r25, 0x08	; 8
    4e54:	ad b7       	in	r26, 0x3d	; 61
    4e56:	be b7       	in	r27, 0x3e	; 62
    4e58:	12 96       	adiw	r26, 0x02	; 2
    4e5a:	9c 93       	st	X, r25
    4e5c:	8e 93       	st	-X, r24
    4e5e:	11 97       	sbiw	r26, 0x01	; 1
    4e60:	12 83       	std	Z+2, r17	; 0x02
    4e62:	13 82       	std	Z+3, r1	; 0x03
    4e64:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	81 e6       	ldi	r24, 0x61	; 97
    4e72:	98 e0       	ldi	r25, 0x08	; 8
    4e74:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4e78:	87 e5       	ldi	r24, 0x57	; 87
    4e7a:	98 e0       	ldi	r25, 0x08	; 8
    4e7c:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4e80:	00 d0       	rcall	.+0      	; 0x4e82 <command_common+0x128>
    4e82:	00 d0       	rcall	.+0      	; 0x4e84 <command_common+0x12a>
    4e84:	ed b7       	in	r30, 0x3d	; 61
    4e86:	fe b7       	in	r31, 0x3e	; 62
    4e88:	31 96       	adiw	r30, 0x01	; 1
    4e8a:	84 e5       	ldi	r24, 0x54	; 84
    4e8c:	98 e0       	ldi	r25, 0x08	; 8
    4e8e:	ad b7       	in	r26, 0x3d	; 61
    4e90:	be b7       	in	r27, 0x3e	; 62
    4e92:	12 96       	adiw	r26, 0x02	; 2
    4e94:	9c 93       	st	X, r25
    4e96:	8e 93       	st	-X, r24
    4e98:	11 97       	sbiw	r26, 0x01	; 1
    4e9a:	81 2f       	mov	r24, r17
    4e9c:	81 70       	andi	r24, 0x01	; 1
    4e9e:	82 83       	std	Z+2, r24	; 0x02
    4ea0:	13 82       	std	Z+3, r1	; 0x03
    4ea2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4ea6:	0f 90       	pop	r0
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	82 e5       	ldi	r24, 0x52	; 82
    4eb0:	98 e0       	ldi	r25, 0x08	; 8
    4eb2:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4eb6:	88 e4       	ldi	r24, 0x48	; 72
    4eb8:	98 e0       	ldi	r25, 0x08	; 8
    4eba:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4ebe:	00 d0       	rcall	.+0      	; 0x4ec0 <command_common+0x166>
    4ec0:	00 d0       	rcall	.+0      	; 0x4ec2 <command_common+0x168>
    4ec2:	ed b7       	in	r30, 0x3d	; 61
    4ec4:	fe b7       	in	r31, 0x3e	; 62
    4ec6:	31 96       	adiw	r30, 0x01	; 1
    4ec8:	85 e4       	ldi	r24, 0x45	; 69
    4eca:	98 e0       	ldi	r25, 0x08	; 8
    4ecc:	ad b7       	in	r26, 0x3d	; 61
    4ece:	be b7       	in	r27, 0x3e	; 62
    4ed0:	12 96       	adiw	r26, 0x02	; 2
    4ed2:	9c 93       	st	X, r25
    4ed4:	8e 93       	st	-X, r24
    4ed6:	11 97       	sbiw	r26, 0x01	; 1
    4ed8:	81 2f       	mov	r24, r17
    4eda:	86 95       	lsr	r24
    4edc:	81 70       	andi	r24, 0x01	; 1
    4ede:	82 83       	std	Z+2, r24	; 0x02
    4ee0:	13 82       	std	Z+3, r1	; 0x03
    4ee2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4ee6:	0f 90       	pop	r0
    4ee8:	0f 90       	pop	r0
    4eea:	0f 90       	pop	r0
    4eec:	0f 90       	pop	r0
    4eee:	83 e4       	ldi	r24, 0x43	; 67
    4ef0:	98 e0       	ldi	r25, 0x08	; 8
    4ef2:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4ef6:	87 e3       	ldi	r24, 0x37	; 55
    4ef8:	98 e0       	ldi	r25, 0x08	; 8
    4efa:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4efe:	00 d0       	rcall	.+0      	; 0x4f00 <command_common+0x1a6>
    4f00:	00 d0       	rcall	.+0      	; 0x4f02 <command_common+0x1a8>
    4f02:	ed b7       	in	r30, 0x3d	; 61
    4f04:	fe b7       	in	r31, 0x3e	; 62
    4f06:	31 96       	adiw	r30, 0x01	; 1
    4f08:	84 e3       	ldi	r24, 0x34	; 52
    4f0a:	98 e0       	ldi	r25, 0x08	; 8
    4f0c:	ad b7       	in	r26, 0x3d	; 61
    4f0e:	be b7       	in	r27, 0x3e	; 62
    4f10:	12 96       	adiw	r26, 0x02	; 2
    4f12:	9c 93       	st	X, r25
    4f14:	8e 93       	st	-X, r24
    4f16:	11 97       	sbiw	r26, 0x01	; 1
    4f18:	16 95       	lsr	r17
    4f1a:	16 95       	lsr	r17
    4f1c:	81 2f       	mov	r24, r17
    4f1e:	81 70       	andi	r24, 0x01	; 1
    4f20:	82 83       	std	Z+2, r24	; 0x02
    4f22:	13 82       	std	Z+3, r1	; 0x03
    4f24:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4f28:	0f 90       	pop	r0
    4f2a:	0f 90       	pop	r0
    4f2c:	0f 90       	pop	r0
    4f2e:	0f 90       	pop	r0
    4f30:	82 e3       	ldi	r24, 0x32	; 50
    4f32:	98 e0       	ldi	r25, 0x08	; 8
    4f34:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4f38:	89 e2       	ldi	r24, 0x29	; 41
    4f3a:	98 e0       	ldi	r25, 0x08	; 8
    4f3c:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4f40:	00 d0       	rcall	.+0      	; 0x4f42 <command_common+0x1e8>
    4f42:	00 d0       	rcall	.+0      	; 0x4f44 <command_common+0x1ea>
    4f44:	ed b7       	in	r30, 0x3d	; 61
    4f46:	fe b7       	in	r31, 0x3e	; 62
    4f48:	31 96       	adiw	r30, 0x01	; 1
    4f4a:	86 e2       	ldi	r24, 0x26	; 38
    4f4c:	98 e0       	ldi	r25, 0x08	; 8
    4f4e:	ad b7       	in	r26, 0x3d	; 61
    4f50:	be b7       	in	r27, 0x3e	; 62
    4f52:	12 96       	adiw	r26, 0x02	; 2
    4f54:	9c 93       	st	X, r25
    4f56:	8e 93       	st	-X, r24
    4f58:	11 97       	sbiw	r26, 0x01	; 1
    4f5a:	16 95       	lsr	r17
    4f5c:	11 70       	andi	r17, 0x01	; 1
    4f5e:	12 83       	std	Z+2, r17	; 0x02
    4f60:	13 82       	std	Z+3, r1	; 0x03
    4f62:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4f66:	0f 90       	pop	r0
    4f68:	0f 90       	pop	r0
    4f6a:	0f 90       	pop	r0
    4f6c:	0f 90       	pop	r0
    4f6e:	84 e2       	ldi	r24, 0x24	; 36
    4f70:	98 e0       	ldi	r25, 0x08	; 8
    4f72:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4f76:	0e 94 92 21 	call	0x4324	; 0x4324 <eeconfig_read_keymap>
    4f7a:	18 2f       	mov	r17, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4f7c:	80 e1       	ldi	r24, 0x10	; 16
    4f7e:	98 e0       	ldi	r25, 0x08	; 8
    4f80:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4f84:	00 d0       	rcall	.+0      	; 0x4f86 <command_common+0x22c>
    4f86:	00 d0       	rcall	.+0      	; 0x4f88 <command_common+0x22e>
    4f88:	ed b7       	in	r30, 0x3d	; 61
    4f8a:	fe b7       	in	r31, 0x3e	; 62
    4f8c:	31 96       	adiw	r30, 0x01	; 1
    4f8e:	8b e0       	ldi	r24, 0x0B	; 11
    4f90:	98 e0       	ldi	r25, 0x08	; 8
    4f92:	ad b7       	in	r26, 0x3d	; 61
    4f94:	be b7       	in	r27, 0x3e	; 62
    4f96:	12 96       	adiw	r26, 0x02	; 2
    4f98:	9c 93       	st	X, r25
    4f9a:	8e 93       	st	-X, r24
    4f9c:	11 97       	sbiw	r26, 0x01	; 1
    4f9e:	12 83       	std	Z+2, r17	; 0x02
    4fa0:	13 82       	std	Z+3, r1	; 0x03
    4fa2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4fa6:	0f 90       	pop	r0
    4fa8:	0f 90       	pop	r0
    4faa:	0f 90       	pop	r0
    4fac:	0f 90       	pop	r0
    4fae:	89 e0       	ldi	r24, 0x09	; 9
    4fb0:	98 e0       	ldi	r25, 0x08	; 8
    4fb2:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4fb6:	80 ef       	ldi	r24, 0xF0	; 240
    4fb8:	97 e0       	ldi	r25, 0x07	; 7
    4fba:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4fbe:	00 d0       	rcall	.+0      	; 0x4fc0 <command_common+0x266>
    4fc0:	00 d0       	rcall	.+0      	; 0x4fc2 <command_common+0x268>
    4fc2:	ed b7       	in	r30, 0x3d	; 61
    4fc4:	fe b7       	in	r31, 0x3e	; 62
    4fc6:	31 96       	adiw	r30, 0x01	; 1
    4fc8:	8d ee       	ldi	r24, 0xED	; 237
    4fca:	97 e0       	ldi	r25, 0x07	; 7
    4fcc:	ad b7       	in	r26, 0x3d	; 61
    4fce:	be b7       	in	r27, 0x3e	; 62
    4fd0:	12 96       	adiw	r26, 0x02	; 2
    4fd2:	9c 93       	st	X, r25
    4fd4:	8e 93       	st	-X, r24
    4fd6:	11 97       	sbiw	r26, 0x01	; 1
    4fd8:	81 2f       	mov	r24, r17
    4fda:	81 70       	andi	r24, 0x01	; 1
    4fdc:	82 83       	std	Z+2, r24	; 0x02
    4fde:	13 82       	std	Z+3, r1	; 0x03
    4fe0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    4fe4:	0f 90       	pop	r0
    4fe6:	0f 90       	pop	r0
    4fe8:	0f 90       	pop	r0
    4fea:	0f 90       	pop	r0
    4fec:	8b ee       	ldi	r24, 0xEB	; 235
    4fee:	97 e0       	ldi	r25, 0x07	; 7
    4ff0:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4ff4:	84 ed       	ldi	r24, 0xD4	; 212
    4ff6:	97 e0       	ldi	r25, 0x07	; 7
    4ff8:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    4ffc:	00 d0       	rcall	.+0      	; 0x4ffe <command_common+0x2a4>
    4ffe:	00 d0       	rcall	.+0      	; 0x5000 <command_common+0x2a6>
    5000:	ed b7       	in	r30, 0x3d	; 61
    5002:	fe b7       	in	r31, 0x3e	; 62
    5004:	31 96       	adiw	r30, 0x01	; 1
    5006:	81 ed       	ldi	r24, 0xD1	; 209
    5008:	97 e0       	ldi	r25, 0x07	; 7
    500a:	ad b7       	in	r26, 0x3d	; 61
    500c:	be b7       	in	r27, 0x3e	; 62
    500e:	12 96       	adiw	r26, 0x02	; 2
    5010:	9c 93       	st	X, r25
    5012:	8e 93       	st	-X, r24
    5014:	11 97       	sbiw	r26, 0x01	; 1
    5016:	81 2f       	mov	r24, r17
    5018:	86 95       	lsr	r24
    501a:	81 70       	andi	r24, 0x01	; 1
    501c:	82 83       	std	Z+2, r24	; 0x02
    501e:	13 82       	std	Z+3, r1	; 0x03
    5020:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    5024:	0f 90       	pop	r0
    5026:	0f 90       	pop	r0
    5028:	0f 90       	pop	r0
    502a:	0f 90       	pop	r0
    502c:	8f ec       	ldi	r24, 0xCF	; 207
    502e:	97 e0       	ldi	r25, 0x07	; 7
    5030:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    5034:	8d eb       	ldi	r24, 0xBD	; 189
    5036:	97 e0       	ldi	r25, 0x07	; 7
    5038:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    503c:	00 d0       	rcall	.+0      	; 0x503e <command_common+0x2e4>
    503e:	00 d0       	rcall	.+0      	; 0x5040 <command_common+0x2e6>
    5040:	ed b7       	in	r30, 0x3d	; 61
    5042:	fe b7       	in	r31, 0x3e	; 62
    5044:	31 96       	adiw	r30, 0x01	; 1
    5046:	8a eb       	ldi	r24, 0xBA	; 186
    5048:	97 e0       	ldi	r25, 0x07	; 7
    504a:	ad b7       	in	r26, 0x3d	; 61
    504c:	be b7       	in	r27, 0x3e	; 62
    504e:	12 96       	adiw	r26, 0x02	; 2
    5050:	9c 93       	st	X, r25
    5052:	8e 93       	st	-X, r24
    5054:	11 97       	sbiw	r26, 0x01	; 1
    5056:	81 2f       	mov	r24, r17
    5058:	86 95       	lsr	r24
    505a:	86 95       	lsr	r24
    505c:	81 70       	andi	r24, 0x01	; 1
    505e:	82 83       	std	Z+2, r24	; 0x02
    5060:	13 82       	std	Z+3, r1	; 0x03
    5062:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    5066:	0f 90       	pop	r0
    5068:	0f 90       	pop	r0
    506a:	0f 90       	pop	r0
    506c:	0f 90       	pop	r0
    506e:	88 eb       	ldi	r24, 0xB8	; 184
    5070:	97 e0       	ldi	r25, 0x07	; 7
    5072:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5076:	86 ea       	ldi	r24, 0xA6	; 166
    5078:	97 e0       	ldi	r25, 0x07	; 7
    507a:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    507e:	00 d0       	rcall	.+0      	; 0x5080 <command_common+0x326>
    5080:	00 d0       	rcall	.+0      	; 0x5082 <command_common+0x328>
    5082:	ed b7       	in	r30, 0x3d	; 61
    5084:	fe b7       	in	r31, 0x3e	; 62
    5086:	31 96       	adiw	r30, 0x01	; 1
    5088:	83 ea       	ldi	r24, 0xA3	; 163
    508a:	97 e0       	ldi	r25, 0x07	; 7
    508c:	ad b7       	in	r26, 0x3d	; 61
    508e:	be b7       	in	r27, 0x3e	; 62
    5090:	12 96       	adiw	r26, 0x02	; 2
    5092:	9c 93       	st	X, r25
    5094:	8e 93       	st	-X, r24
    5096:	11 97       	sbiw	r26, 0x01	; 1
    5098:	81 2f       	mov	r24, r17
    509a:	86 95       	lsr	r24
    509c:	86 95       	lsr	r24
    509e:	86 95       	lsr	r24
    50a0:	81 70       	andi	r24, 0x01	; 1
    50a2:	82 83       	std	Z+2, r24	; 0x02
    50a4:	13 82       	std	Z+3, r1	; 0x03
    50a6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    50aa:	0f 90       	pop	r0
    50ac:	0f 90       	pop	r0
    50ae:	0f 90       	pop	r0
    50b0:	0f 90       	pop	r0
    50b2:	81 ea       	ldi	r24, 0xA1	; 161
    50b4:	97 e0       	ldi	r25, 0x07	; 7
    50b6:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    50ba:	87 e9       	ldi	r24, 0x97	; 151
    50bc:	97 e0       	ldi	r25, 0x07	; 7
    50be:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    50c2:	00 d0       	rcall	.+0      	; 0x50c4 <command_common+0x36a>
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <command_common+0x36c>
    50c6:	ed b7       	in	r30, 0x3d	; 61
    50c8:	fe b7       	in	r31, 0x3e	; 62
    50ca:	31 96       	adiw	r30, 0x01	; 1
    50cc:	84 e9       	ldi	r24, 0x94	; 148
    50ce:	97 e0       	ldi	r25, 0x07	; 7
    50d0:	ad b7       	in	r26, 0x3d	; 61
    50d2:	be b7       	in	r27, 0x3e	; 62
    50d4:	12 96       	adiw	r26, 0x02	; 2
    50d6:	9c 93       	st	X, r25
    50d8:	8e 93       	st	-X, r24
    50da:	11 97       	sbiw	r26, 0x01	; 1
    50dc:	81 2f       	mov	r24, r17
    50de:	82 95       	swap	r24
    50e0:	81 70       	andi	r24, 0x01	; 1
    50e2:	82 83       	std	Z+2, r24	; 0x02
    50e4:	13 82       	std	Z+3, r1	; 0x03
    50e6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
    50f2:	82 e9       	ldi	r24, 0x92	; 146
    50f4:	97 e0       	ldi	r25, 0x07	; 7
    50f6:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    50fa:	80 e8       	ldi	r24, 0x80	; 128
    50fc:	97 e0       	ldi	r25, 0x07	; 7
    50fe:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    5102:	00 d0       	rcall	.+0      	; 0x5104 <command_common+0x3aa>
    5104:	00 d0       	rcall	.+0      	; 0x5106 <command_common+0x3ac>
    5106:	ed b7       	in	r30, 0x3d	; 61
    5108:	fe b7       	in	r31, 0x3e	; 62
    510a:	31 96       	adiw	r30, 0x01	; 1
    510c:	8d e7       	ldi	r24, 0x7D	; 125
    510e:	97 e0       	ldi	r25, 0x07	; 7
    5110:	ad b7       	in	r26, 0x3d	; 61
    5112:	be b7       	in	r27, 0x3e	; 62
    5114:	12 96       	adiw	r26, 0x02	; 2
    5116:	9c 93       	st	X, r25
    5118:	8e 93       	st	-X, r24
    511a:	11 97       	sbiw	r26, 0x01	; 1
    511c:	81 2f       	mov	r24, r17
    511e:	82 95       	swap	r24
    5120:	86 95       	lsr	r24
    5122:	81 70       	andi	r24, 0x01	; 1
    5124:	82 83       	std	Z+2, r24	; 0x02
    5126:	13 82       	std	Z+3, r1	; 0x03
    5128:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    512c:	0f 90       	pop	r0
    512e:	0f 90       	pop	r0
    5130:	0f 90       	pop	r0
    5132:	0f 90       	pop	r0
    5134:	8b e7       	ldi	r24, 0x7B	; 123
    5136:	97 e0       	ldi	r25, 0x07	; 7
    5138:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    513c:	8f e5       	ldi	r24, 0x5F	; 95
    513e:	97 e0       	ldi	r25, 0x07	; 7
    5140:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    5144:	00 d0       	rcall	.+0      	; 0x5146 <command_common+0x3ec>
    5146:	00 d0       	rcall	.+0      	; 0x5148 <command_common+0x3ee>
    5148:	ed b7       	in	r30, 0x3d	; 61
    514a:	fe b7       	in	r31, 0x3e	; 62
    514c:	31 96       	adiw	r30, 0x01	; 1
    514e:	8c e5       	ldi	r24, 0x5C	; 92
    5150:	97 e0       	ldi	r25, 0x07	; 7
    5152:	ad b7       	in	r26, 0x3d	; 61
    5154:	be b7       	in	r27, 0x3e	; 62
    5156:	12 96       	adiw	r26, 0x02	; 2
    5158:	9c 93       	st	X, r25
    515a:	8e 93       	st	-X, r24
    515c:	11 97       	sbiw	r26, 0x01	; 1
    515e:	12 95       	swap	r17
    5160:	16 95       	lsr	r17
    5162:	16 95       	lsr	r17
    5164:	13 70       	andi	r17, 0x03	; 3
    5166:	81 2f       	mov	r24, r17
    5168:	81 70       	andi	r24, 0x01	; 1
    516a:	82 83       	std	Z+2, r24	; 0x02
    516c:	13 82       	std	Z+3, r1	; 0x03
    516e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    5172:	0f 90       	pop	r0
    5174:	0f 90       	pop	r0
    5176:	0f 90       	pop	r0
    5178:	0f 90       	pop	r0
    517a:	8a e5       	ldi	r24, 0x5A	; 90
    517c:	97 e0       	ldi	r25, 0x07	; 7
    517e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    5182:	82 e5       	ldi	r24, 0x52	; 82
    5184:	97 e0       	ldi	r25, 0x07	; 7
    5186:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    518a:	00 d0       	rcall	.+0      	; 0x518c <command_common+0x432>
    518c:	00 d0       	rcall	.+0      	; 0x518e <command_common+0x434>
    518e:	ed b7       	in	r30, 0x3d	; 61
    5190:	fe b7       	in	r31, 0x3e	; 62
    5192:	31 96       	adiw	r30, 0x01	; 1
    5194:	8f e4       	ldi	r24, 0x4F	; 79
    5196:	97 e0       	ldi	r25, 0x07	; 7
    5198:	ad b7       	in	r26, 0x3d	; 61
    519a:	be b7       	in	r27, 0x3e	; 62
    519c:	12 96       	adiw	r26, 0x02	; 2
    519e:	9c 93       	st	X, r25
    51a0:	8e 93       	st	-X, r24
    51a2:	11 97       	sbiw	r26, 0x01	; 1
    51a4:	16 95       	lsr	r17
    51a6:	12 83       	std	Z+2, r17	; 0x02
    51a8:	13 82       	std	Z+3, r1	; 0x03
    51aa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    51ae:	0f 90       	pop	r0
    51b0:	0f 90       	pop	r0
    51b2:	0f 90       	pop	r0
    51b4:	0f 90       	pop	r0
    51b6:	8d e4       	ldi	r24, 0x4D	; 77
    51b8:	97 e0       	ldi	r25, 0x07	; 7
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <command_common+0x466>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    51bc:	80 e9       	ldi	r24, 0x90	; 144
    51be:	98 e0       	ldi	r25, 0x08	; 8
    51c0:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	1a c1       	rjmp	.+564    	; 0x53fc <command_common+0x6a2>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    51c8:	80 91 9f 01 	lds	r24, 0x019F
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    51cc:	80 7f       	andi	r24, 0xF0	; 240
    51ce:	80 93 9f 01 	sts	0x019F, r24
            command_console_help();
    51d2:	0e 94 b5 24 	call	0x496a	; 0x496a <command_console_help>
            print("C> ");
    51d6:	8e e3       	ldi	r24, 0x3E	; 62
    51d8:	97 e0       	ldi	r25, 0x07	; 7
    51da:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            command_state = CONSOLE;
    51de:	81 e0       	ldi	r24, 0x01	; 1
    51e0:	80 93 ae 01 	sts	0x01AE, r24
    51e4:	0b c1       	rjmp	.+534    	; 0x53fc <command_common+0x6a2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    51e6:	0e 94 32 13 	call	0x2664	; 0x2664 <clear_keyboard>
            print("\n\nbootloader... ");
    51ea:	8d e2       	ldi	r24, 0x2D	; 45
    51ec:	97 e0       	ldi	r25, 0x07	; 7
    51ee:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    51f2:	80 e1       	ldi	r24, 0x10	; 16
    51f4:	97 e2       	ldi	r25, 0x27	; 39
    51f6:	20 e9       	ldi	r18, 0x90	; 144
    51f8:	31 e0       	ldi	r19, 0x01	; 1
    51fa:	f9 01       	movw	r30, r18
    51fc:	31 97       	sbiw	r30, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <command_common+0x4a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5202:	d9 f7       	brne	.-10     	; 0x51fa <command_common+0x4a0>
            wait_ms(1000);
            bootloader_jump(); // not return
    5204:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <bootloader_jump>
    5208:	dd cf       	rjmp	.-70     	; 0x51c4 <command_common+0x46a>
            break;
        case KC_D:
            if (debug_enable) {
    520a:	80 91 9f 01 	lds	r24, 0x019F
    520e:	80 ff       	sbrs	r24, 0
    5210:	08 c0       	rjmp	.+16     	; 0x5222 <command_common+0x4c8>
                print("\ndebug: off\n");
    5212:	80 e2       	ldi	r24, 0x20	; 32
    5214:	97 e0       	ldi	r25, 0x07	; 7
    5216:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
                debug_matrix   = false;
    521a:	80 91 9f 01 	lds	r24, 0x019F
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    521e:	80 7f       	andi	r24, 0xF0	; 240
    5220:	18 c0       	rjmp	.+48     	; 0x5252 <command_common+0x4f8>
            } else {
                print("\ndebug: on\n");
    5222:	84 e1       	ldi	r24, 0x14	; 20
    5224:	97 e0       	ldi	r25, 0x07	; 7
    5226:	10 c0       	rjmp	.+32     	; 0x5248 <command_common+0x4ee>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    5228:	80 91 9f 01 	lds	r24, 0x019F
    522c:	98 2f       	mov	r25, r24
    522e:	96 95       	lsr	r25
    5230:	90 95       	com	r25
    5232:	91 70       	andi	r25, 0x01	; 1
    5234:	29 2f       	mov	r18, r25
    5236:	22 0f       	add	r18, r18
    5238:	8d 7f       	andi	r24, 0xFD	; 253
    523a:	82 2b       	or	r24, r18
    523c:	80 93 9f 01 	sts	0x019F, r24
            if (debug_matrix) {
    5240:	99 23       	and	r25, r25
    5242:	51 f0       	breq	.+20     	; 0x5258 <command_common+0x4fe>
                print("\nmatrix: on\n");
    5244:	87 e0       	ldi	r24, 0x07	; 7
    5246:	97 e0       	ldi	r25, 0x07	; 7
    5248:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
                debug_enable = true;
    524c:	80 91 9f 01 	lds	r24, 0x019F
    5250:	81 60       	ori	r24, 0x01	; 1
    5252:	80 93 9f 01 	sts	0x019F, r24
    5256:	b6 cf       	rjmp	.-148    	; 0x51c4 <command_common+0x46a>
            } else {
                print("\nmatrix: off\n");
    5258:	89 ef       	ldi	r24, 0xF9	; 249
    525a:	96 e0       	ldi	r25, 0x06	; 6
    525c:	b1 cf       	rjmp	.-158    	; 0x51c0 <command_common+0x466>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    525e:	80 91 9f 01 	lds	r24, 0x019F
    5262:	98 2f       	mov	r25, r24
    5264:	96 95       	lsr	r25
    5266:	96 95       	lsr	r25
    5268:	90 95       	com	r25
    526a:	91 70       	andi	r25, 0x01	; 1
    526c:	29 2f       	mov	r18, r25
    526e:	22 0f       	add	r18, r18
    5270:	22 0f       	add	r18, r18
    5272:	8b 7f       	andi	r24, 0xFB	; 251
    5274:	82 2b       	or	r24, r18
    5276:	80 93 9f 01 	sts	0x019F, r24
            if (debug_keyboard) {
    527a:	99 23       	and	r25, r25
    527c:	19 f0       	breq	.+6      	; 0x5284 <command_common+0x52a>
                print("\nkeyboard: on\n");
    527e:	8a ee       	ldi	r24, 0xEA	; 234
    5280:	96 e0       	ldi	r25, 0x06	; 6
    5282:	e2 cf       	rjmp	.-60     	; 0x5248 <command_common+0x4ee>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    5284:	8a ed       	ldi	r24, 0xDA	; 218
    5286:	96 e0       	ldi	r25, 0x06	; 6
    5288:	9b cf       	rjmp	.-202    	; 0x51c0 <command_common+0x466>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    528a:	80 91 9f 01 	lds	r24, 0x019F
    528e:	98 2f       	mov	r25, r24
    5290:	96 95       	lsr	r25
    5292:	96 95       	lsr	r25
    5294:	96 95       	lsr	r25
    5296:	90 95       	com	r25
    5298:	91 70       	andi	r25, 0x01	; 1
    529a:	29 2f       	mov	r18, r25
    529c:	22 0f       	add	r18, r18
    529e:	22 0f       	add	r18, r18
    52a0:	22 0f       	add	r18, r18
    52a2:	87 7f       	andi	r24, 0xF7	; 247
    52a4:	82 2b       	or	r24, r18
    52a6:	80 93 9f 01 	sts	0x019F, r24
            if (debug_mouse) {
    52aa:	99 23       	and	r25, r25
    52ac:	19 f0       	breq	.+6      	; 0x52b4 <command_common+0x55a>
                print("\nmouse: on\n");
    52ae:	8e ec       	ldi	r24, 0xCE	; 206
    52b0:	96 e0       	ldi	r25, 0x06	; 6
    52b2:	ca cf       	rjmp	.-108    	; 0x5248 <command_common+0x4ee>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    52b4:	81 ec       	ldi	r24, 0xC1	; 193
    52b6:	96 e0       	ldi	r25, 0x06	; 6
    52b8:	83 cf       	rjmp	.-250    	; 0x51c0 <command_common+0x466>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    52ba:	82 eb       	ldi	r24, 0xB2	; 178
    52bc:	96 e0       	ldi	r25, 0x06	; 6
    52be:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    52c2:	85 e8       	ldi	r24, 0x85	; 133
    52c4:	96 e0       	ldi	r25, 0x06	; 6
    52c6:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    52ca:	84 e4       	ldi	r24, 0x44	; 68
    52cc:	96 e0       	ldi	r25, 0x06	; 6
    52ce:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    52d2:	8d e1       	ldi	r24, 0x1D	; 29
    52d4:	96 e0       	ldi	r25, 0x06	; 6
    52d6:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            /* build options */
            print("OPTIONS:"
    52da:	88 ed       	ldi	r24, 0xD8	; 216
    52dc:	95 e0       	ldi	r25, 0x05	; 5
    52de:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    52e2:	8d ea       	ldi	r24, 0xAD	; 173
    52e4:	95 e0       	ldi	r25, 0x05	; 5
    52e6:	6c cf       	rjmp	.-296    	; 0x51c0 <command_common+0x466>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    52e8:	8f e9       	ldi	r24, 0x9F	; 159
    52ea:	95 e0       	ldi	r25, 0x05	; 5
    52ec:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            print_val_hex8(host_keyboard_leds());
    52f0:	0e 94 4f 11 	call	0x229e	; 0x229e <host_keyboard_leds>
    52f4:	00 d0       	rcall	.+0      	; 0x52f6 <command_common+0x59c>
    52f6:	00 d0       	rcall	.+0      	; 0x52f8 <command_common+0x59e>
    52f8:	ed b7       	in	r30, 0x3d	; 61
    52fa:	fe b7       	in	r31, 0x3e	; 62
    52fc:	31 96       	adiw	r30, 0x01	; 1
    52fe:	25 e8       	ldi	r18, 0x85	; 133
    5300:	35 e0       	ldi	r19, 0x05	; 5
    5302:	ad b7       	in	r26, 0x3d	; 61
    5304:	be b7       	in	r27, 0x3e	; 62
    5306:	12 96       	adiw	r26, 0x02	; 2
    5308:	3c 93       	st	X, r19
    530a:	2e 93       	st	-X, r18
    530c:	11 97       	sbiw	r26, 0x01	; 1
    530e:	82 83       	std	Z+2, r24	; 0x02
    5310:	13 82       	std	Z+3, r1	; 0x03
    5312:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
            print_val_hex8(keyboard_protocol);
    5316:	ed b7       	in	r30, 0x3d	; 61
    5318:	fe b7       	in	r31, 0x3e	; 62
    531a:	31 96       	adiw	r30, 0x01	; 1
    531c:	8e e6       	ldi	r24, 0x6E	; 110
    531e:	95 e0       	ldi	r25, 0x05	; 5
    5320:	ad b7       	in	r26, 0x3d	; 61
    5322:	be b7       	in	r27, 0x3e	; 62
    5324:	12 96       	adiw	r26, 0x02	; 2
    5326:	9c 93       	st	X, r25
    5328:	8e 93       	st	-X, r24
    532a:	11 97       	sbiw	r26, 0x01	; 1
    532c:	80 91 01 01 	lds	r24, 0x0101
    5330:	82 83       	std	Z+2, r24	; 0x02
    5332:	13 82       	std	Z+3, r1	; 0x03
    5334:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
            print_val_hex8(keyboard_idle);
    5338:	ed b7       	in	r30, 0x3d	; 61
    533a:	fe b7       	in	r31, 0x3e	; 62
    533c:	31 96       	adiw	r30, 0x01	; 1
    533e:	8b e5       	ldi	r24, 0x5B	; 91
    5340:	95 e0       	ldi	r25, 0x05	; 5
    5342:	ad b7       	in	r26, 0x3d	; 61
    5344:	be b7       	in	r27, 0x3e	; 62
    5346:	12 96       	adiw	r26, 0x02	; 2
    5348:	9c 93       	st	X, r25
    534a:	8e 93       	st	-X, r24
    534c:	11 97       	sbiw	r26, 0x01	; 1
    534e:	80 91 28 01 	lds	r24, 0x0128
    5352:	82 83       	std	Z+2, r24	; 0x02
    5354:	13 82       	std	Z+3, r1	; 0x03
    5356:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    535a:	ed b7       	in	r30, 0x3d	; 61
    535c:	fe b7       	in	r31, 0x3e	; 62
    535e:	31 96       	adiw	r30, 0x01	; 1
    5360:	88 e4       	ldi	r24, 0x48	; 72
    5362:	95 e0       	ldi	r25, 0x05	; 5
    5364:	ad b7       	in	r26, 0x3d	; 61
    5366:	be b7       	in	r27, 0x3e	; 62
    5368:	12 96       	adiw	r26, 0x02	; 2
    536a:	9c 93       	st	X, r25
    536c:	8e 93       	st	-X, r24
    536e:	11 97       	sbiw	r26, 0x01	; 1
    5370:	80 91 0c 01 	lds	r24, 0x010C
    5374:	82 83       	std	Z+2, r24	; 0x02
    5376:	13 82       	std	Z+3, r1	; 0x03
    5378:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
#endif
            print_val_hex32(timer_read32());
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	0f 90       	pop	r0
    5382:	0f 90       	pop	r0
    5384:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <timer_read32>
    5388:	00 d0       	rcall	.+0      	; 0x538a <command_common+0x630>
    538a:	00 d0       	rcall	.+0      	; 0x538c <command_common+0x632>
    538c:	00 d0       	rcall	.+0      	; 0x538e <command_common+0x634>
    538e:	21 e3       	ldi	r18, 0x31	; 49
    5390:	35 e0       	ldi	r19, 0x05	; 5
    5392:	ed b7       	in	r30, 0x3d	; 61
    5394:	fe b7       	in	r31, 0x3e	; 62
    5396:	32 83       	std	Z+2, r19	; 0x02
    5398:	21 83       	std	Z+1, r18	; 0x01
    539a:	ad b7       	in	r26, 0x3d	; 61
    539c:	be b7       	in	r27, 0x3e	; 62
    539e:	13 96       	adiw	r26, 0x03	; 3
    53a0:	6d 93       	st	X+, r22
    53a2:	7d 93       	st	X+, r23
    53a4:	8d 93       	st	X+, r24
    53a6:	9c 93       	st	X, r25
    53a8:	16 97       	sbiw	r26, 0x06	; 6
    53aa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    53ae:	81 e0       	ldi	r24, 0x01	; 1
    53b0:	ed b7       	in	r30, 0x3d	; 61
    53b2:	fe b7       	in	r31, 0x3e	; 62
    53b4:	36 96       	adiw	r30, 0x06	; 6
    53b6:	0f b6       	in	r0, 0x3f	; 63
    53b8:	f8 94       	cli
    53ba:	fe bf       	out	0x3e, r31	; 62
    53bc:	0f be       	out	0x3f, r0	; 63
    53be:	ed bf       	out	0x3d, r30	; 61
    53c0:	1d c0       	rjmp	.+58     	; 0x53fc <command_common+0x6a2>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    53c2:	0e 94 32 13 	call	0x2664	; 0x2664 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    53c6:	80 91 0c 01 	lds	r24, 0x010C
    53ca:	91 e0       	ldi	r25, 0x01	; 1
    53cc:	89 27       	eor	r24, r25
    53ce:	80 93 0c 01 	sts	0x010C, r24
            if (keyboard_nkro) {
    53d2:	88 23       	and	r24, r24
    53d4:	19 f0       	breq	.+6      	; 0x53dc <command_common+0x682>
                print("NKRO: on\n");
    53d6:	87 e2       	ldi	r24, 0x27	; 39
    53d8:	95 e0       	ldi	r25, 0x05	; 5
    53da:	f2 ce       	rjmp	.-540    	; 0x51c0 <command_common+0x466>
            } else {
                print("NKRO: off\n");
    53dc:	8c e1       	ldi	r24, 0x1C	; 28
    53de:	95 e0       	ldi	r25, 0x05	; 5
    53e0:	ef ce       	rjmp	.-546    	; 0x51c0 <command_common+0x466>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    53e2:	80 e0       	ldi	r24, 0x00	; 0
    53e4:	03 c0       	rjmp	.+6      	; 0x53ec <command_common+0x692>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    53e6:	8d 51       	subi	r24, 0x1D	; 29
    53e8:	01 c0       	rjmp	.+2      	; 0x53ec <command_common+0x692>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    53ea:	89 53       	subi	r24, 0x39	; 57
    53ec:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <switch_default_layer>
    53f0:	e9 ce       	rjmp	.-558    	; 0x51c4 <command_common+0x46a>
            break;
        default:
            print("?");
    53f2:	8a e1       	ldi	r24, 0x1A	; 26
    53f4:	95 e0       	ldi	r25, 0x05	; 5
    53f6:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    53fa:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    53fc:	1f 91       	pop	r17
    53fe:	08 95       	ret

00005400 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5400:	1f 93       	push	r17
    5402:	18 2f       	mov	r17, r24
    switch (command_state) {
    5404:	80 91 ae 01 	lds	r24, 0x01AE
    5408:	81 30       	cpi	r24, 0x01	; 1
    540a:	79 f0       	breq	.+30     	; 0x542a <command_proc+0x2a>
    540c:	81 30       	cpi	r24, 0x01	; 1
    540e:	20 f0       	brcs	.+8      	; 0x5418 <command_proc+0x18>
    5410:	82 30       	cpi	r24, 0x02	; 2
    5412:	09 f0       	breq	.+2      	; 0x5416 <command_proc+0x16>
    5414:	be c1       	rjmp	.+892    	; 0x5792 <command_proc+0x392>
    5416:	48 c0       	rjmp	.+144    	; 0x54a8 <command_proc+0xa8>
        case ONESHOT:
            if (!IS_COMMAND())
    5418:	e0 91 0d 01 	lds	r30, 0x010D
    541c:	f0 91 0e 01 	lds	r31, 0x010E
    5420:	80 81       	ld	r24, Z
    5422:	82 32       	cpi	r24, 0x22	; 34
    5424:	09 f0       	breq	.+2      	; 0x5428 <command_proc+0x28>
    5426:	b7 c1       	rjmp	.+878    	; 0x5796 <command_proc+0x396>
    5428:	07 c0       	rjmp	.+14     	; 0x5438 <command_proc+0x38>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    542a:	e0 91 0d 01 	lds	r30, 0x010D
    542e:	f0 91 0e 01 	lds	r31, 0x010E
    5432:	80 81       	ld	r24, Z
    5434:	82 32       	cpi	r24, 0x22	; 34
    5436:	49 f4       	brne	.+18     	; 0x544a <command_proc+0x4a>
                return (command_extra(code) || command_common(code));
    5438:	81 2f       	mov	r24, r17
    543a:	0e 94 b1 24 	call	0x4962	; 0x4962 <command_extra>
    543e:	88 23       	and	r24, r24
    5440:	49 f5       	brne	.+82     	; 0x5494 <command_proc+0x94>
    5442:	81 2f       	mov	r24, r17
    5444:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <command_common>
    5448:	a7 c1       	rjmp	.+846    	; 0x5798 <command_proc+0x398>
            else
                return (command_console_extra(code) || command_console(code));
    544a:	81 2f       	mov	r24, r17
    544c:	0e 94 b3 24 	call	0x4966	; 0x4966 <command_console_extra>
    5450:	88 23       	and	r24, r24
    5452:	01 f5       	brne	.+64     	; 0x5494 <command_proc+0x94>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5454:	14 31       	cpi	r17, 0x14	; 20
    5456:	91 f0       	breq	.+36     	; 0x547c <command_proc+0x7c>
    5458:	15 31       	cpi	r17, 0x15	; 21
    545a:	28 f4       	brcc	.+10     	; 0x5466 <command_proc+0x66>
    545c:	1b 30       	cpi	r17, 0x0B	; 11
    545e:	39 f0       	breq	.+14     	; 0x546e <command_proc+0x6e>
    5460:	10 31       	cpi	r17, 0x10	; 16
    5462:	d9 f4       	brne	.+54     	; 0x549a <command_proc+0x9a>
    5464:	0e c0       	rjmp	.+28     	; 0x5482 <command_proc+0x82>
    5466:	19 32       	cpi	r17, 0x29	; 41
    5468:	49 f0       	breq	.+18     	; 0x547c <command_proc+0x7c>
    546a:	18 33       	cpi	r17, 0x38	; 56
    546c:	b1 f4       	brne	.+44     	; 0x549a <command_proc+0x9a>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    546e:	0e 94 b5 24 	call	0x496a	; 0x496a <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5472:	81 e6       	ldi	r24, 0x61	; 97
    5474:	99 e0       	ldi	r25, 0x09	; 9
    5476:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    547a:	0c c0       	rjmp	.+24     	; 0x5494 <command_proc+0x94>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    547c:	10 92 ae 01 	sts	0x01AE, r1
    5480:	10 c0       	rjmp	.+32     	; 0x54a2 <command_proc+0xa2>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5482:	0e 94 ba 24 	call	0x4974	; 0x4974 <mousekey_console_help>
            print("M> ");
    5486:	87 e6       	ldi	r24, 0x67	; 103
    5488:	99 e0       	ldi	r25, 0x09	; 9
    548a:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
            command_state = MOUSEKEY;
    548e:	82 e0       	ldi	r24, 0x02	; 2
    5490:	80 93 ae 01 	sts	0x01AE, r24
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	7f c1       	rjmp	.+766    	; 0x5798 <command_proc+0x398>
            return true;
#endif
        default:
            print("?");
    549a:	85 e6       	ldi	r24, 0x65	; 101
    549c:	99 e0       	ldi	r25, 0x09	; 9
    549e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    54a2:	80 e0       	ldi	r24, 0x00	; 0
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	78 c1       	rjmp	.+752    	; 0x5798 <command_proc+0x398>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    54a8:	14 32       	cpi	r17, 0x24	; 36
    54aa:	88 f4       	brcc	.+34     	; 0x54ce <command_proc+0xce>
    54ac:	1e 31       	cpi	r17, 0x1E	; 30
    54ae:	08 f0       	brcs	.+2      	; 0x54b2 <command_proc+0xb2>
    54b0:	f2 c0       	rjmp	.+484    	; 0x5696 <command_proc+0x296>
    54b2:	1b 30       	cpi	r17, 0x0B	; 11
    54b4:	09 f1       	breq	.+66     	; 0x54f8 <command_proc+0xf8>
    54b6:	1c 30       	cpi	r17, 0x0C	; 12
    54b8:	20 f4       	brcc	.+8      	; 0x54c2 <command_proc+0xc2>
    54ba:	17 30       	cpi	r17, 0x07	; 7
    54bc:	09 f0       	breq	.+2      	; 0x54c0 <command_proc+0xc0>
    54be:	45 c1       	rjmp	.+650    	; 0x574a <command_proc+0x34a>
    54c0:	2d c1       	rjmp	.+602    	; 0x571c <command_proc+0x31c>
    54c2:	13 31       	cpi	r17, 0x13	; 19
    54c4:	59 f1       	breq	.+86     	; 0x551c <command_proc+0x11c>
    54c6:	14 31       	cpi	r17, 0x14	; 20
    54c8:	09 f0       	breq	.+2      	; 0x54cc <command_proc+0xcc>
    54ca:	3f c1       	rjmp	.+638    	; 0x574a <command_proc+0x34a>
    54cc:	18 c0       	rjmp	.+48     	; 0x54fe <command_proc+0xfe>
    54ce:	1b 34       	cpi	r17, 0x4B	; 75
    54d0:	09 f4       	brne	.+2      	; 0x54d4 <command_proc+0xd4>
    54d2:	18 c1       	rjmp	.+560    	; 0x5704 <command_proc+0x304>
    54d4:	1c 34       	cpi	r17, 0x4C	; 76
    54d6:	30 f4       	brcc	.+12     	; 0x54e4 <command_proc+0xe4>
    54d8:	19 32       	cpi	r17, 0x29	; 41
    54da:	89 f0       	breq	.+34     	; 0x54fe <command_proc+0xfe>
    54dc:	18 33       	cpi	r17, 0x38	; 56
    54de:	09 f0       	breq	.+2      	; 0x54e2 <command_proc+0xe2>
    54e0:	34 c1       	rjmp	.+616    	; 0x574a <command_proc+0x34a>
    54e2:	0a c0       	rjmp	.+20     	; 0x54f8 <command_proc+0xf8>
    54e4:	11 35       	cpi	r17, 0x51	; 81
    54e6:	09 f4       	brne	.+2      	; 0x54ea <command_proc+0xea>
    54e8:	09 c1       	rjmp	.+530    	; 0x56fc <command_proc+0x2fc>
    54ea:	12 35       	cpi	r17, 0x52	; 82
    54ec:	09 f4       	brne	.+2      	; 0x54f0 <command_proc+0xf0>
    54ee:	02 c1       	rjmp	.+516    	; 0x56f4 <command_proc+0x2f4>
    54f0:	1e 34       	cpi	r17, 0x4E	; 78
    54f2:	09 f0       	breq	.+2      	; 0x54f6 <command_proc+0xf6>
    54f4:	2a c1       	rjmp	.+596    	; 0x574a <command_proc+0x34a>
    54f6:	0c c1       	rjmp	.+536    	; 0x5710 <command_proc+0x310>
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    54f8:	0e 94 ba 24 	call	0x4974	; 0x4974 <mousekey_console_help>
    54fc:	29 c1       	rjmp	.+594    	; 0x5750 <command_proc+0x350>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    54fe:	80 91 af 01 	lds	r24, 0x01AF
    5502:	88 23       	and	r24, r24
    5504:	19 f0       	breq	.+6      	; 0x550c <command_proc+0x10c>
                mousekey_param = 0;
    5506:	10 92 af 01 	sts	0x01AF, r1
    550a:	22 c1       	rjmp	.+580    	; 0x5750 <command_proc+0x350>
            } else {
                print("C> ");
    550c:	8c ec       	ldi	r24, 0xCC	; 204
    550e:	9a e0       	ldi	r25, 0x0A	; 10
    5510:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
                command_state = CONSOLE;
    5514:	81 e0       	ldi	r24, 0x01	; 1
    5516:	80 93 ae 01 	sts	0x01AE, r24
    551a:	3e c1       	rjmp	.+636    	; 0x5798 <command_proc+0x398>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    551c:	8e e5       	ldi	r24, 0x5E	; 94
    551e:	9b e0       	ldi	r25, 0x0B	; 11
    5520:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5524:	8c e4       	ldi	r24, 0x4C	; 76
    5526:	9b e0       	ldi	r25, 0x0B	; 11
    5528:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    552c:	00 d0       	rcall	.+0      	; 0x552e <command_proc+0x12e>
    552e:	00 d0       	rcall	.+0      	; 0x5530 <command_proc+0x130>
    5530:	ed b7       	in	r30, 0x3d	; 61
    5532:	fe b7       	in	r31, 0x3e	; 62
    5534:	31 96       	adiw	r30, 0x01	; 1
    5536:	89 e4       	ldi	r24, 0x49	; 73
    5538:	9b e0       	ldi	r25, 0x0B	; 11
    553a:	ad b7       	in	r26, 0x3d	; 61
    553c:	be b7       	in	r27, 0x3e	; 62
    553e:	12 96       	adiw	r26, 0x02	; 2
    5540:	9c 93       	st	X, r25
    5542:	8e 93       	st	-X, r24
    5544:	11 97       	sbiw	r26, 0x01	; 1
    5546:	80 91 0f 01 	lds	r24, 0x010F
    554a:	82 83       	std	Z+2, r24	; 0x02
    554c:	13 82       	std	Z+3, r1	; 0x03
    554e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    5552:	0f 90       	pop	r0
    5554:	0f 90       	pop	r0
    5556:	0f 90       	pop	r0
    5558:	0f 90       	pop	r0
    555a:	87 e4       	ldi	r24, 0x47	; 71
    555c:	9b e0       	ldi	r25, 0x0B	; 11
    555e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5562:	85 e3       	ldi	r24, 0x35	; 53
    5564:	9b e0       	ldi	r25, 0x0B	; 11
    5566:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    556a:	00 d0       	rcall	.+0      	; 0x556c <command_proc+0x16c>
    556c:	00 d0       	rcall	.+0      	; 0x556e <command_proc+0x16e>
    556e:	ed b7       	in	r30, 0x3d	; 61
    5570:	fe b7       	in	r31, 0x3e	; 62
    5572:	31 96       	adiw	r30, 0x01	; 1
    5574:	82 e3       	ldi	r24, 0x32	; 50
    5576:	9b e0       	ldi	r25, 0x0B	; 11
    5578:	ad b7       	in	r26, 0x3d	; 61
    557a:	be b7       	in	r27, 0x3e	; 62
    557c:	12 96       	adiw	r26, 0x02	; 2
    557e:	9c 93       	st	X, r25
    5580:	8e 93       	st	-X, r24
    5582:	11 97       	sbiw	r26, 0x01	; 1
    5584:	80 91 10 01 	lds	r24, 0x0110
    5588:	82 83       	std	Z+2, r24	; 0x02
    558a:	13 82       	std	Z+3, r1	; 0x03
    558c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	0f 90       	pop	r0
    5598:	80 e3       	ldi	r24, 0x30	; 48
    559a:	9b e0       	ldi	r25, 0x0B	; 11
    559c:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    55a0:	81 e2       	ldi	r24, 0x21	; 33
    55a2:	9b e0       	ldi	r25, 0x0B	; 11
    55a4:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    55a8:	00 d0       	rcall	.+0      	; 0x55aa <command_proc+0x1aa>
    55aa:	00 d0       	rcall	.+0      	; 0x55ac <command_proc+0x1ac>
    55ac:	ed b7       	in	r30, 0x3d	; 61
    55ae:	fe b7       	in	r31, 0x3e	; 62
    55b0:	31 96       	adiw	r30, 0x01	; 1
    55b2:	8e e1       	ldi	r24, 0x1E	; 30
    55b4:	9b e0       	ldi	r25, 0x0B	; 11
    55b6:	ad b7       	in	r26, 0x3d	; 61
    55b8:	be b7       	in	r27, 0x3e	; 62
    55ba:	12 96       	adiw	r26, 0x02	; 2
    55bc:	9c 93       	st	X, r25
    55be:	8e 93       	st	-X, r24
    55c0:	11 97       	sbiw	r26, 0x01	; 1
    55c2:	80 91 11 01 	lds	r24, 0x0111
    55c6:	82 83       	std	Z+2, r24	; 0x02
    55c8:	13 82       	std	Z+3, r1	; 0x03
    55ca:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    55ce:	0f 90       	pop	r0
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	8c e1       	ldi	r24, 0x1C	; 28
    55d8:	9b e0       	ldi	r25, 0x0B	; 11
    55da:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    55de:	8b e0       	ldi	r24, 0x0B	; 11
    55e0:	9b e0       	ldi	r25, 0x0B	; 11
    55e2:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    55e6:	00 d0       	rcall	.+0      	; 0x55e8 <command_proc+0x1e8>
    55e8:	00 d0       	rcall	.+0      	; 0x55ea <command_proc+0x1ea>
    55ea:	ed b7       	in	r30, 0x3d	; 61
    55ec:	fe b7       	in	r31, 0x3e	; 62
    55ee:	31 96       	adiw	r30, 0x01	; 1
    55f0:	88 e0       	ldi	r24, 0x08	; 8
    55f2:	9b e0       	ldi	r25, 0x0B	; 11
    55f4:	ad b7       	in	r26, 0x3d	; 61
    55f6:	be b7       	in	r27, 0x3e	; 62
    55f8:	12 96       	adiw	r26, 0x02	; 2
    55fa:	9c 93       	st	X, r25
    55fc:	8e 93       	st	-X, r24
    55fe:	11 97       	sbiw	r26, 0x01	; 1
    5600:	80 91 12 01 	lds	r24, 0x0112
    5604:	82 83       	std	Z+2, r24	; 0x02
    5606:	13 82       	std	Z+3, r1	; 0x03
    5608:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    560c:	0f 90       	pop	r0
    560e:	0f 90       	pop	r0
    5610:	0f 90       	pop	r0
    5612:	0f 90       	pop	r0
    5614:	86 e0       	ldi	r24, 0x06	; 6
    5616:	9b e0       	ldi	r25, 0x0B	; 11
    5618:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    561c:	81 ef       	ldi	r24, 0xF1	; 241
    561e:	9a e0       	ldi	r25, 0x0A	; 10
    5620:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    5624:	00 d0       	rcall	.+0      	; 0x5626 <command_proc+0x226>
    5626:	00 d0       	rcall	.+0      	; 0x5628 <command_proc+0x228>
    5628:	ed b7       	in	r30, 0x3d	; 61
    562a:	fe b7       	in	r31, 0x3e	; 62
    562c:	31 96       	adiw	r30, 0x01	; 1
    562e:	8e ee       	ldi	r24, 0xEE	; 238
    5630:	9a e0       	ldi	r25, 0x0A	; 10
    5632:	ad b7       	in	r26, 0x3d	; 61
    5634:	be b7       	in	r27, 0x3e	; 62
    5636:	12 96       	adiw	r26, 0x02	; 2
    5638:	9c 93       	st	X, r25
    563a:	8e 93       	st	-X, r24
    563c:	11 97       	sbiw	r26, 0x01	; 1
    563e:	80 91 13 01 	lds	r24, 0x0113
    5642:	82 83       	std	Z+2, r24	; 0x02
    5644:	13 82       	std	Z+3, r1	; 0x03
    5646:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    564a:	0f 90       	pop	r0
    564c:	0f 90       	pop	r0
    564e:	0f 90       	pop	r0
    5650:	0f 90       	pop	r0
    5652:	8c ee       	ldi	r24, 0xEC	; 236
    5654:	9a e0       	ldi	r25, 0x0A	; 10
    5656:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    565a:	85 ed       	ldi	r24, 0xD5	; 213
    565c:	9a e0       	ldi	r25, 0x0A	; 10
    565e:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    5662:	00 d0       	rcall	.+0      	; 0x5664 <command_proc+0x264>
    5664:	00 d0       	rcall	.+0      	; 0x5666 <command_proc+0x266>
    5666:	ed b7       	in	r30, 0x3d	; 61
    5668:	fe b7       	in	r31, 0x3e	; 62
    566a:	31 96       	adiw	r30, 0x01	; 1
    566c:	82 ed       	ldi	r24, 0xD2	; 210
    566e:	9a e0       	ldi	r25, 0x0A	; 10
    5670:	ad b7       	in	r26, 0x3d	; 61
    5672:	be b7       	in	r27, 0x3e	; 62
    5674:	12 96       	adiw	r26, 0x02	; 2
    5676:	9c 93       	st	X, r25
    5678:	8e 93       	st	-X, r24
    567a:	11 97       	sbiw	r26, 0x01	; 1
    567c:	80 91 14 01 	lds	r24, 0x0114
    5680:	82 83       	std	Z+2, r24	; 0x02
    5682:	13 82       	std	Z+3, r1	; 0x03
    5684:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    5688:	0f 90       	pop	r0
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	80 ed       	ldi	r24, 0xD0	; 208
    5692:	9a e0       	ldi	r25, 0x0A	; 10
    5694:	57 c0       	rjmp	.+174    	; 0x5744 <command_proc+0x344>
/***********************************************************
 * Utilities
 ***********************************************************/
static uint8_t numkey2num(uint8_t code)
{
    switch (code) {
    5696:	12 32       	cpi	r17, 0x22	; 34
    5698:	f9 f0       	breq	.+62     	; 0x56d8 <command_proc+0x2d8>
    569a:	13 32       	cpi	r17, 0x23	; 35
    569c:	60 f4       	brcc	.+24     	; 0x56b6 <command_proc+0x2b6>
    569e:	1f 31       	cpi	r17, 0x1F	; 31
    56a0:	99 f0       	breq	.+38     	; 0x56c8 <command_proc+0x2c8>
    56a2:	10 32       	cpi	r17, 0x20	; 32
    56a4:	18 f4       	brcc	.+6      	; 0x56ac <command_proc+0x2ac>
    56a6:	1e 31       	cpi	r17, 0x1E	; 30
    56a8:	09 f5       	brne	.+66     	; 0x56ec <command_proc+0x2ec>
    56aa:	10 c0       	rjmp	.+32     	; 0x56cc <command_proc+0x2cc>
    56ac:	10 32       	cpi	r17, 0x20	; 32
    56ae:	81 f0       	breq	.+32     	; 0x56d0 <command_proc+0x2d0>
    56b0:	11 32       	cpi	r17, 0x21	; 33
    56b2:	e1 f4       	brne	.+56     	; 0x56ec <command_proc+0x2ec>
    56b4:	0f c0       	rjmp	.+30     	; 0x56d4 <command_proc+0x2d4>
    56b6:	14 32       	cpi	r17, 0x24	; 36
    56b8:	99 f0       	breq	.+38     	; 0x56e0 <command_proc+0x2e0>
    56ba:	14 32       	cpi	r17, 0x24	; 36
    56bc:	78 f0       	brcs	.+30     	; 0x56dc <command_proc+0x2dc>
    56be:	15 32       	cpi	r17, 0x25	; 37
    56c0:	89 f0       	breq	.+34     	; 0x56e4 <command_proc+0x2e4>
    56c2:	16 32       	cpi	r17, 0x26	; 38
    56c4:	99 f4       	brne	.+38     	; 0x56ec <command_proc+0x2ec>
    56c6:	10 c0       	rjmp	.+32     	; 0x56e8 <command_proc+0x2e8>
    56c8:	82 e0       	ldi	r24, 0x02	; 2
    56ca:	11 c0       	rjmp	.+34     	; 0x56ee <command_proc+0x2ee>
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	0f c0       	rjmp	.+30     	; 0x56ee <command_proc+0x2ee>
    56d0:	83 e0       	ldi	r24, 0x03	; 3
    56d2:	0d c0       	rjmp	.+26     	; 0x56ee <command_proc+0x2ee>
    56d4:	84 e0       	ldi	r24, 0x04	; 4
    56d6:	0b c0       	rjmp	.+22     	; 0x56ee <command_proc+0x2ee>
    56d8:	85 e0       	ldi	r24, 0x05	; 5
    56da:	09 c0       	rjmp	.+18     	; 0x56ee <command_proc+0x2ee>
    56dc:	86 e0       	ldi	r24, 0x06	; 6
    56de:	07 c0       	rjmp	.+14     	; 0x56ee <command_proc+0x2ee>
    56e0:	87 e0       	ldi	r24, 0x07	; 7
    56e2:	05 c0       	rjmp	.+10     	; 0x56ee <command_proc+0x2ee>
    56e4:	88 e0       	ldi	r24, 0x08	; 8
    56e6:	03 c0       	rjmp	.+6      	; 0x56ee <command_proc+0x2ee>
    56e8:	89 e0       	ldi	r24, 0x09	; 9
    56ea:	01 c0       	rjmp	.+2      	; 0x56ee <command_proc+0x2ee>
    56ec:	80 e0       	ldi	r24, 0x00	; 0
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    56ee:	80 93 af 01 	sts	0x01AF, r24
    56f2:	2e c0       	rjmp	.+92     	; 0x5750 <command_proc+0x350>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    56f4:	80 91 af 01 	lds	r24, 0x01AF
    56f8:	61 e0       	ldi	r22, 0x01	; 1
    56fa:	07 c0       	rjmp	.+14     	; 0x570a <command_proc+0x30a>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    56fc:	80 91 af 01 	lds	r24, 0x01AF
    5700:	61 e0       	ldi	r22, 0x01	; 1
    5702:	09 c0       	rjmp	.+18     	; 0x5716 <command_proc+0x316>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5704:	80 91 af 01 	lds	r24, 0x01AF
    5708:	6a e0       	ldi	r22, 0x0A	; 10
    570a:	0e 94 df 24 	call	0x49be	; 0x49be <mousekey_param_inc>
    570e:	20 c0       	rjmp	.+64     	; 0x5750 <command_proc+0x350>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5710:	80 91 af 01 	lds	r24, 0x01AF
    5714:	6a e0       	ldi	r22, 0x0A	; 10
    5716:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <mousekey_param_dec>
    571a:	1a c0       	rjmp	.+52     	; 0x5750 <command_proc+0x350>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    571c:	8e e1       	ldi	r24, 0x1E	; 30
    571e:	80 93 0f 01 	sts	0x010F, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5722:	82 e3       	ldi	r24, 0x32	; 50
    5724:	80 93 10 01 	sts	0x0110, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5728:	8a e0       	ldi	r24, 0x0A	; 10
    572a:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    572e:	84 e1       	ldi	r24, 0x14	; 20
    5730:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5734:	88 e0       	ldi	r24, 0x08	; 8
    5736:	80 93 13 01 	sts	0x0113, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    573a:	88 e2       	ldi	r24, 0x28	; 40
    573c:	80 93 14 01 	sts	0x0114, r24
            print("set default\n");
    5740:	8f eb       	ldi	r24, 0xBF	; 191
    5742:	9a e0       	ldi	r25, 0x0A	; 10
    5744:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    5748:	03 c0       	rjmp	.+6      	; 0x5750 <command_proc+0x350>
            break;
        default:
            print("?");
    574a:	8d eb       	ldi	r24, 0xBD	; 189
    574c:	9a e0       	ldi	r25, 0x0A	; 10
    574e:	1d c0       	rjmp	.+58     	; 0x578a <command_proc+0x38a>
            return false;
    }
    if (mousekey_param) {
    5750:	20 91 af 01 	lds	r18, 0x01AF
    5754:	22 23       	and	r18, r18
    5756:	b9 f0       	breq	.+46     	; 0x5786 <command_proc+0x386>
        xprintf("M%d> ", mousekey_param);
    5758:	00 d0       	rcall	.+0      	; 0x575a <command_proc+0x35a>
    575a:	00 d0       	rcall	.+0      	; 0x575c <command_proc+0x35c>
    575c:	ed b7       	in	r30, 0x3d	; 61
    575e:	fe b7       	in	r31, 0x3e	; 62
    5760:	31 96       	adiw	r30, 0x01	; 1
    5762:	87 eb       	ldi	r24, 0xB7	; 183
    5764:	9a e0       	ldi	r25, 0x0A	; 10
    5766:	ad b7       	in	r26, 0x3d	; 61
    5768:	be b7       	in	r27, 0x3e	; 62
    576a:	12 96       	adiw	r26, 0x02	; 2
    576c:	9c 93       	st	X, r25
    576e:	8e 93       	st	-X, r24
    5770:	11 97       	sbiw	r26, 0x01	; 1
    5772:	22 83       	std	Z+2, r18	; 0x02
    5774:	13 82       	std	Z+3, r1	; 0x03
    5776:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__xprintf>
    577a:	81 e0       	ldi	r24, 0x01	; 1
    577c:	0f 90       	pop	r0
    577e:	0f 90       	pop	r0
    5780:	0f 90       	pop	r0
    5782:	0f 90       	pop	r0
    5784:	09 c0       	rjmp	.+18     	; 0x5798 <command_proc+0x398>
    } else {
        print("M>" );
    5786:	84 eb       	ldi	r24, 0xB4	; 180
    5788:	9a e0       	ldi	r25, 0x0A	; 10
    578a:	0e 94 85 06 	call	0xd0a	; 0xd0a <xputs>
    578e:	81 e0       	ldi	r24, 0x01	; 1
    5790:	03 c0       	rjmp	.+6      	; 0x5798 <command_proc+0x398>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5792:	10 92 ae 01 	sts	0x01AE, r1
    5796:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    5798:	1f 91       	pop	r17
    579a:	08 95       	ret

0000579c <__fixsfsi>:
    579c:	04 d0       	rcall	.+8      	; 0x57a6 <__fixunssfsi>
    579e:	68 94       	set
    57a0:	b1 11       	cpse	r27, r1
    57a2:	8d c0       	rjmp	.+282    	; 0x58be <__fp_szero>
    57a4:	08 95       	ret

000057a6 <__fixunssfsi>:
    57a6:	70 d0       	rcall	.+224    	; 0x5888 <__fp_splitA>
    57a8:	88 f0       	brcs	.+34     	; 0x57cc <__fixunssfsi+0x26>
    57aa:	9f 57       	subi	r25, 0x7F	; 127
    57ac:	90 f0       	brcs	.+36     	; 0x57d2 <__fixunssfsi+0x2c>
    57ae:	b9 2f       	mov	r27, r25
    57b0:	99 27       	eor	r25, r25
    57b2:	b7 51       	subi	r27, 0x17	; 23
    57b4:	a0 f0       	brcs	.+40     	; 0x57de <__fixunssfsi+0x38>
    57b6:	d1 f0       	breq	.+52     	; 0x57ec <__fixunssfsi+0x46>
    57b8:	66 0f       	add	r22, r22
    57ba:	77 1f       	adc	r23, r23
    57bc:	88 1f       	adc	r24, r24
    57be:	99 1f       	adc	r25, r25
    57c0:	1a f0       	brmi	.+6      	; 0x57c8 <__fixunssfsi+0x22>
    57c2:	ba 95       	dec	r27
    57c4:	c9 f7       	brne	.-14     	; 0x57b8 <__fixunssfsi+0x12>
    57c6:	12 c0       	rjmp	.+36     	; 0x57ec <__fixunssfsi+0x46>
    57c8:	b1 30       	cpi	r27, 0x01	; 1
    57ca:	81 f0       	breq	.+32     	; 0x57ec <__fixunssfsi+0x46>
    57cc:	77 d0       	rcall	.+238    	; 0x58bc <__fp_zero>
    57ce:	b1 e0       	ldi	r27, 0x01	; 1
    57d0:	08 95       	ret
    57d2:	74 c0       	rjmp	.+232    	; 0x58bc <__fp_zero>
    57d4:	67 2f       	mov	r22, r23
    57d6:	78 2f       	mov	r23, r24
    57d8:	88 27       	eor	r24, r24
    57da:	b8 5f       	subi	r27, 0xF8	; 248
    57dc:	39 f0       	breq	.+14     	; 0x57ec <__fixunssfsi+0x46>
    57de:	b9 3f       	cpi	r27, 0xF9	; 249
    57e0:	cc f3       	brlt	.-14     	; 0x57d4 <__fixunssfsi+0x2e>
    57e2:	86 95       	lsr	r24
    57e4:	77 95       	ror	r23
    57e6:	67 95       	ror	r22
    57e8:	b3 95       	inc	r27
    57ea:	d9 f7       	brne	.-10     	; 0x57e2 <__fixunssfsi+0x3c>
    57ec:	3e f4       	brtc	.+14     	; 0x57fc <__fixunssfsi+0x56>
    57ee:	90 95       	com	r25
    57f0:	80 95       	com	r24
    57f2:	70 95       	com	r23
    57f4:	61 95       	neg	r22
    57f6:	7f 4f       	sbci	r23, 0xFF	; 255
    57f8:	8f 4f       	sbci	r24, 0xFF	; 255
    57fa:	9f 4f       	sbci	r25, 0xFF	; 255
    57fc:	08 95       	ret

000057fe <__floatunsisf>:
    57fe:	e8 94       	clt
    5800:	09 c0       	rjmp	.+18     	; 0x5814 <__floatsisf+0x12>

00005802 <__floatsisf>:
    5802:	97 fb       	bst	r25, 7
    5804:	3e f4       	brtc	.+14     	; 0x5814 <__floatsisf+0x12>
    5806:	90 95       	com	r25
    5808:	80 95       	com	r24
    580a:	70 95       	com	r23
    580c:	61 95       	neg	r22
    580e:	7f 4f       	sbci	r23, 0xFF	; 255
    5810:	8f 4f       	sbci	r24, 0xFF	; 255
    5812:	9f 4f       	sbci	r25, 0xFF	; 255
    5814:	99 23       	and	r25, r25
    5816:	a9 f0       	breq	.+42     	; 0x5842 <__floatsisf+0x40>
    5818:	f9 2f       	mov	r31, r25
    581a:	96 e9       	ldi	r25, 0x96	; 150
    581c:	bb 27       	eor	r27, r27
    581e:	93 95       	inc	r25
    5820:	f6 95       	lsr	r31
    5822:	87 95       	ror	r24
    5824:	77 95       	ror	r23
    5826:	67 95       	ror	r22
    5828:	b7 95       	ror	r27
    582a:	f1 11       	cpse	r31, r1
    582c:	f8 cf       	rjmp	.-16     	; 0x581e <__floatsisf+0x1c>
    582e:	fa f4       	brpl	.+62     	; 0x586e <__floatsisf+0x6c>
    5830:	bb 0f       	add	r27, r27
    5832:	11 f4       	brne	.+4      	; 0x5838 <__floatsisf+0x36>
    5834:	60 ff       	sbrs	r22, 0
    5836:	1b c0       	rjmp	.+54     	; 0x586e <__floatsisf+0x6c>
    5838:	6f 5f       	subi	r22, 0xFF	; 255
    583a:	7f 4f       	sbci	r23, 0xFF	; 255
    583c:	8f 4f       	sbci	r24, 0xFF	; 255
    583e:	9f 4f       	sbci	r25, 0xFF	; 255
    5840:	16 c0       	rjmp	.+44     	; 0x586e <__floatsisf+0x6c>
    5842:	88 23       	and	r24, r24
    5844:	11 f0       	breq	.+4      	; 0x584a <__floatsisf+0x48>
    5846:	96 e9       	ldi	r25, 0x96	; 150
    5848:	11 c0       	rjmp	.+34     	; 0x586c <__floatsisf+0x6a>
    584a:	77 23       	and	r23, r23
    584c:	21 f0       	breq	.+8      	; 0x5856 <__floatsisf+0x54>
    584e:	9e e8       	ldi	r25, 0x8E	; 142
    5850:	87 2f       	mov	r24, r23
    5852:	76 2f       	mov	r23, r22
    5854:	05 c0       	rjmp	.+10     	; 0x5860 <__floatsisf+0x5e>
    5856:	66 23       	and	r22, r22
    5858:	71 f0       	breq	.+28     	; 0x5876 <__floatsisf+0x74>
    585a:	96 e8       	ldi	r25, 0x86	; 134
    585c:	86 2f       	mov	r24, r22
    585e:	70 e0       	ldi	r23, 0x00	; 0
    5860:	60 e0       	ldi	r22, 0x00	; 0
    5862:	2a f0       	brmi	.+10     	; 0x586e <__floatsisf+0x6c>
    5864:	9a 95       	dec	r25
    5866:	66 0f       	add	r22, r22
    5868:	77 1f       	adc	r23, r23
    586a:	88 1f       	adc	r24, r24
    586c:	da f7       	brpl	.-10     	; 0x5864 <__floatsisf+0x62>
    586e:	88 0f       	add	r24, r24
    5870:	96 95       	lsr	r25
    5872:	87 95       	ror	r24
    5874:	97 f9       	bld	r25, 7
    5876:	08 95       	ret

00005878 <__fp_split3>:
    5878:	57 fd       	sbrc	r21, 7
    587a:	90 58       	subi	r25, 0x80	; 128
    587c:	44 0f       	add	r20, r20
    587e:	55 1f       	adc	r21, r21
    5880:	59 f0       	breq	.+22     	; 0x5898 <__fp_splitA+0x10>
    5882:	5f 3f       	cpi	r21, 0xFF	; 255
    5884:	71 f0       	breq	.+28     	; 0x58a2 <__fp_splitA+0x1a>
    5886:	47 95       	ror	r20

00005888 <__fp_splitA>:
    5888:	88 0f       	add	r24, r24
    588a:	97 fb       	bst	r25, 7
    588c:	99 1f       	adc	r25, r25
    588e:	61 f0       	breq	.+24     	; 0x58a8 <__fp_splitA+0x20>
    5890:	9f 3f       	cpi	r25, 0xFF	; 255
    5892:	79 f0       	breq	.+30     	; 0x58b2 <__fp_splitA+0x2a>
    5894:	87 95       	ror	r24
    5896:	08 95       	ret
    5898:	12 16       	cp	r1, r18
    589a:	13 06       	cpc	r1, r19
    589c:	14 06       	cpc	r1, r20
    589e:	55 1f       	adc	r21, r21
    58a0:	f2 cf       	rjmp	.-28     	; 0x5886 <__fp_split3+0xe>
    58a2:	46 95       	lsr	r20
    58a4:	f1 df       	rcall	.-30     	; 0x5888 <__fp_splitA>
    58a6:	08 c0       	rjmp	.+16     	; 0x58b8 <__fp_splitA+0x30>
    58a8:	16 16       	cp	r1, r22
    58aa:	17 06       	cpc	r1, r23
    58ac:	18 06       	cpc	r1, r24
    58ae:	99 1f       	adc	r25, r25
    58b0:	f1 cf       	rjmp	.-30     	; 0x5894 <__fp_splitA+0xc>
    58b2:	86 95       	lsr	r24
    58b4:	71 05       	cpc	r23, r1
    58b6:	61 05       	cpc	r22, r1
    58b8:	08 94       	sec
    58ba:	08 95       	ret

000058bc <__fp_zero>:
    58bc:	e8 94       	clt

000058be <__fp_szero>:
    58be:	bb 27       	eor	r27, r27
    58c0:	66 27       	eor	r22, r22
    58c2:	77 27       	eor	r23, r23
    58c4:	cb 01       	movw	r24, r22
    58c6:	97 f9       	bld	r25, 7
    58c8:	08 95       	ret

000058ca <__mulsf3>:
    58ca:	0b d0       	rcall	.+22     	; 0x58e2 <__mulsf3x>
    58cc:	78 c0       	rjmp	.+240    	; 0x59be <__fp_round>
    58ce:	69 d0       	rcall	.+210    	; 0x59a2 <__fp_pscA>
    58d0:	28 f0       	brcs	.+10     	; 0x58dc <__mulsf3+0x12>
    58d2:	6e d0       	rcall	.+220    	; 0x59b0 <__fp_pscB>
    58d4:	18 f0       	brcs	.+6      	; 0x58dc <__mulsf3+0x12>
    58d6:	95 23       	and	r25, r21
    58d8:	09 f0       	breq	.+2      	; 0x58dc <__mulsf3+0x12>
    58da:	5a c0       	rjmp	.+180    	; 0x5990 <__fp_inf>
    58dc:	5f c0       	rjmp	.+190    	; 0x599c <__fp_nan>
    58de:	11 24       	eor	r1, r1
    58e0:	ee cf       	rjmp	.-36     	; 0x58be <__fp_szero>

000058e2 <__mulsf3x>:
    58e2:	ca df       	rcall	.-108    	; 0x5878 <__fp_split3>
    58e4:	a0 f3       	brcs	.-24     	; 0x58ce <__mulsf3+0x4>

000058e6 <__mulsf3_pse>:
    58e6:	95 9f       	mul	r25, r21
    58e8:	d1 f3       	breq	.-12     	; 0x58de <__mulsf3+0x14>
    58ea:	95 0f       	add	r25, r21
    58ec:	50 e0       	ldi	r21, 0x00	; 0
    58ee:	55 1f       	adc	r21, r21
    58f0:	62 9f       	mul	r22, r18
    58f2:	f0 01       	movw	r30, r0
    58f4:	72 9f       	mul	r23, r18
    58f6:	bb 27       	eor	r27, r27
    58f8:	f0 0d       	add	r31, r0
    58fa:	b1 1d       	adc	r27, r1
    58fc:	63 9f       	mul	r22, r19
    58fe:	aa 27       	eor	r26, r26
    5900:	f0 0d       	add	r31, r0
    5902:	b1 1d       	adc	r27, r1
    5904:	aa 1f       	adc	r26, r26
    5906:	64 9f       	mul	r22, r20
    5908:	66 27       	eor	r22, r22
    590a:	b0 0d       	add	r27, r0
    590c:	a1 1d       	adc	r26, r1
    590e:	66 1f       	adc	r22, r22
    5910:	82 9f       	mul	r24, r18
    5912:	22 27       	eor	r18, r18
    5914:	b0 0d       	add	r27, r0
    5916:	a1 1d       	adc	r26, r1
    5918:	62 1f       	adc	r22, r18
    591a:	73 9f       	mul	r23, r19
    591c:	b0 0d       	add	r27, r0
    591e:	a1 1d       	adc	r26, r1
    5920:	62 1f       	adc	r22, r18
    5922:	83 9f       	mul	r24, r19
    5924:	a0 0d       	add	r26, r0
    5926:	61 1d       	adc	r22, r1
    5928:	22 1f       	adc	r18, r18
    592a:	74 9f       	mul	r23, r20
    592c:	33 27       	eor	r19, r19
    592e:	a0 0d       	add	r26, r0
    5930:	61 1d       	adc	r22, r1
    5932:	23 1f       	adc	r18, r19
    5934:	84 9f       	mul	r24, r20
    5936:	60 0d       	add	r22, r0
    5938:	21 1d       	adc	r18, r1
    593a:	82 2f       	mov	r24, r18
    593c:	76 2f       	mov	r23, r22
    593e:	6a 2f       	mov	r22, r26
    5940:	11 24       	eor	r1, r1
    5942:	9f 57       	subi	r25, 0x7F	; 127
    5944:	50 40       	sbci	r21, 0x00	; 0
    5946:	8a f0       	brmi	.+34     	; 0x596a <__mulsf3_pse+0x84>
    5948:	e1 f0       	breq	.+56     	; 0x5982 <__mulsf3_pse+0x9c>
    594a:	88 23       	and	r24, r24
    594c:	4a f0       	brmi	.+18     	; 0x5960 <__mulsf3_pse+0x7a>
    594e:	ee 0f       	add	r30, r30
    5950:	ff 1f       	adc	r31, r31
    5952:	bb 1f       	adc	r27, r27
    5954:	66 1f       	adc	r22, r22
    5956:	77 1f       	adc	r23, r23
    5958:	88 1f       	adc	r24, r24
    595a:	91 50       	subi	r25, 0x01	; 1
    595c:	50 40       	sbci	r21, 0x00	; 0
    595e:	a9 f7       	brne	.-22     	; 0x594a <__mulsf3_pse+0x64>
    5960:	9e 3f       	cpi	r25, 0xFE	; 254
    5962:	51 05       	cpc	r21, r1
    5964:	70 f0       	brcs	.+28     	; 0x5982 <__mulsf3_pse+0x9c>
    5966:	14 c0       	rjmp	.+40     	; 0x5990 <__fp_inf>
    5968:	aa cf       	rjmp	.-172    	; 0x58be <__fp_szero>
    596a:	5f 3f       	cpi	r21, 0xFF	; 255
    596c:	ec f3       	brlt	.-6      	; 0x5968 <__mulsf3_pse+0x82>
    596e:	98 3e       	cpi	r25, 0xE8	; 232
    5970:	dc f3       	brlt	.-10     	; 0x5968 <__mulsf3_pse+0x82>
    5972:	86 95       	lsr	r24
    5974:	77 95       	ror	r23
    5976:	67 95       	ror	r22
    5978:	b7 95       	ror	r27
    597a:	f7 95       	ror	r31
    597c:	e7 95       	ror	r30
    597e:	9f 5f       	subi	r25, 0xFF	; 255
    5980:	c1 f7       	brne	.-16     	; 0x5972 <__mulsf3_pse+0x8c>
    5982:	fe 2b       	or	r31, r30
    5984:	88 0f       	add	r24, r24
    5986:	91 1d       	adc	r25, r1
    5988:	96 95       	lsr	r25
    598a:	87 95       	ror	r24
    598c:	97 f9       	bld	r25, 7
    598e:	08 95       	ret

00005990 <__fp_inf>:
    5990:	97 f9       	bld	r25, 7
    5992:	9f 67       	ori	r25, 0x7F	; 127
    5994:	80 e8       	ldi	r24, 0x80	; 128
    5996:	70 e0       	ldi	r23, 0x00	; 0
    5998:	60 e0       	ldi	r22, 0x00	; 0
    599a:	08 95       	ret

0000599c <__fp_nan>:
    599c:	9f ef       	ldi	r25, 0xFF	; 255
    599e:	80 ec       	ldi	r24, 0xC0	; 192
    59a0:	08 95       	ret

000059a2 <__fp_pscA>:
    59a2:	00 24       	eor	r0, r0
    59a4:	0a 94       	dec	r0
    59a6:	16 16       	cp	r1, r22
    59a8:	17 06       	cpc	r1, r23
    59aa:	18 06       	cpc	r1, r24
    59ac:	09 06       	cpc	r0, r25
    59ae:	08 95       	ret

000059b0 <__fp_pscB>:
    59b0:	00 24       	eor	r0, r0
    59b2:	0a 94       	dec	r0
    59b4:	12 16       	cp	r1, r18
    59b6:	13 06       	cpc	r1, r19
    59b8:	14 06       	cpc	r1, r20
    59ba:	05 06       	cpc	r0, r21
    59bc:	08 95       	ret

000059be <__fp_round>:
    59be:	09 2e       	mov	r0, r25
    59c0:	03 94       	inc	r0
    59c2:	00 0c       	add	r0, r0
    59c4:	11 f4       	brne	.+4      	; 0x59ca <__fp_round+0xc>
    59c6:	88 23       	and	r24, r24
    59c8:	52 f0       	brmi	.+20     	; 0x59de <__fp_round+0x20>
    59ca:	bb 0f       	add	r27, r27
    59cc:	40 f4       	brcc	.+16     	; 0x59de <__fp_round+0x20>
    59ce:	bf 2b       	or	r27, r31
    59d0:	11 f4       	brne	.+4      	; 0x59d6 <__fp_round+0x18>
    59d2:	60 ff       	sbrs	r22, 0
    59d4:	04 c0       	rjmp	.+8      	; 0x59de <__fp_round+0x20>
    59d6:	6f 5f       	subi	r22, 0xFF	; 255
    59d8:	7f 4f       	sbci	r23, 0xFF	; 255
    59da:	8f 4f       	sbci	r24, 0xFF	; 255
    59dc:	9f 4f       	sbci	r25, 0xFF	; 255
    59de:	08 95       	ret

000059e0 <__udivmodqi4>:
    59e0:	99 1b       	sub	r25, r25
    59e2:	79 e0       	ldi	r23, 0x09	; 9
    59e4:	04 c0       	rjmp	.+8      	; 0x59ee <__udivmodqi4_ep>

000059e6 <__udivmodqi4_loop>:
    59e6:	99 1f       	adc	r25, r25
    59e8:	96 17       	cp	r25, r22
    59ea:	08 f0       	brcs	.+2      	; 0x59ee <__udivmodqi4_ep>
    59ec:	96 1b       	sub	r25, r22

000059ee <__udivmodqi4_ep>:
    59ee:	88 1f       	adc	r24, r24
    59f0:	7a 95       	dec	r23
    59f2:	c9 f7       	brne	.-14     	; 0x59e6 <__udivmodqi4_loop>
    59f4:	80 95       	com	r24
    59f6:	08 95       	ret

000059f8 <__divmodhi4>:
    59f8:	97 fb       	bst	r25, 7
    59fa:	09 2e       	mov	r0, r25
    59fc:	07 26       	eor	r0, r23
    59fe:	0a d0       	rcall	.+20     	; 0x5a14 <__divmodhi4_neg1>
    5a00:	77 fd       	sbrc	r23, 7
    5a02:	04 d0       	rcall	.+8      	; 0x5a0c <__divmodhi4_neg2>
    5a04:	0c d0       	rcall	.+24     	; 0x5a1e <__udivmodhi4>
    5a06:	06 d0       	rcall	.+12     	; 0x5a14 <__divmodhi4_neg1>
    5a08:	00 20       	and	r0, r0
    5a0a:	1a f4       	brpl	.+6      	; 0x5a12 <__divmodhi4_exit>

00005a0c <__divmodhi4_neg2>:
    5a0c:	70 95       	com	r23
    5a0e:	61 95       	neg	r22
    5a10:	7f 4f       	sbci	r23, 0xFF	; 255

00005a12 <__divmodhi4_exit>:
    5a12:	08 95       	ret

00005a14 <__divmodhi4_neg1>:
    5a14:	f6 f7       	brtc	.-4      	; 0x5a12 <__divmodhi4_exit>
    5a16:	90 95       	com	r25
    5a18:	81 95       	neg	r24
    5a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1c:	08 95       	ret

00005a1e <__udivmodhi4>:
    5a1e:	aa 1b       	sub	r26, r26
    5a20:	bb 1b       	sub	r27, r27
    5a22:	51 e1       	ldi	r21, 0x11	; 17
    5a24:	07 c0       	rjmp	.+14     	; 0x5a34 <__udivmodhi4_ep>

00005a26 <__udivmodhi4_loop>:
    5a26:	aa 1f       	adc	r26, r26
    5a28:	bb 1f       	adc	r27, r27
    5a2a:	a6 17       	cp	r26, r22
    5a2c:	b7 07       	cpc	r27, r23
    5a2e:	10 f0       	brcs	.+4      	; 0x5a34 <__udivmodhi4_ep>
    5a30:	a6 1b       	sub	r26, r22
    5a32:	b7 0b       	sbc	r27, r23

00005a34 <__udivmodhi4_ep>:
    5a34:	88 1f       	adc	r24, r24
    5a36:	99 1f       	adc	r25, r25
    5a38:	5a 95       	dec	r21
    5a3a:	a9 f7       	brne	.-22     	; 0x5a26 <__udivmodhi4_loop>
    5a3c:	80 95       	com	r24
    5a3e:	90 95       	com	r25
    5a40:	bc 01       	movw	r22, r24
    5a42:	cd 01       	movw	r24, r26
    5a44:	08 95       	ret

00005a46 <__eerd_byte_m32u4>:
    5a46:	f9 99       	sbic	0x1f, 1	; 31
    5a48:	fe cf       	rjmp	.-4      	; 0x5a46 <__eerd_byte_m32u4>
    5a4a:	92 bd       	out	0x22, r25	; 34
    5a4c:	81 bd       	out	0x21, r24	; 33
    5a4e:	f8 9a       	sbi	0x1f, 0	; 31
    5a50:	99 27       	eor	r25, r25
    5a52:	80 b5       	in	r24, 0x20	; 32
    5a54:	08 95       	ret

00005a56 <__eerd_word_m32u4>:
    5a56:	a8 e1       	ldi	r26, 0x18	; 24
    5a58:	b0 e0       	ldi	r27, 0x00	; 0
    5a5a:	42 e0       	ldi	r20, 0x02	; 2
    5a5c:	50 e0       	ldi	r21, 0x00	; 0
    5a5e:	0c 94 46 2d 	jmp	0x5a8c	; 0x5a8c <__eerd_blraw_m32u4>

00005a62 <__eewr_byte_m32u4>:
    5a62:	26 2f       	mov	r18, r22

00005a64 <__eewr_r18_m32u4>:
    5a64:	f9 99       	sbic	0x1f, 1	; 31
    5a66:	fe cf       	rjmp	.-4      	; 0x5a64 <__eewr_r18_m32u4>
    5a68:	1f ba       	out	0x1f, r1	; 31
    5a6a:	92 bd       	out	0x22, r25	; 34
    5a6c:	81 bd       	out	0x21, r24	; 33
    5a6e:	20 bd       	out	0x20, r18	; 32
    5a70:	0f b6       	in	r0, 0x3f	; 63
    5a72:	f8 94       	cli
    5a74:	fa 9a       	sbi	0x1f, 2	; 31
    5a76:	f9 9a       	sbi	0x1f, 1	; 31
    5a78:	0f be       	out	0x3f, r0	; 63
    5a7a:	01 96       	adiw	r24, 0x01	; 1
    5a7c:	08 95       	ret

00005a7e <__eewr_word_m32u4>:
    5a7e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__eewr_byte_m32u4>
    5a82:	27 2f       	mov	r18, r23
    5a84:	0c 94 32 2d 	jmp	0x5a64	; 0x5a64 <__eewr_r18_m32u4>

00005a88 <__eerd_block_m32u4>:
    5a88:	dc 01       	movw	r26, r24
    5a8a:	cb 01       	movw	r24, r22

00005a8c <__eerd_blraw_m32u4>:
    5a8c:	fc 01       	movw	r30, r24
    5a8e:	f9 99       	sbic	0x1f, 1	; 31
    5a90:	fe cf       	rjmp	.-4      	; 0x5a8e <__eerd_blraw_m32u4+0x2>
    5a92:	06 c0       	rjmp	.+12     	; 0x5aa0 <__eerd_blraw_m32u4+0x14>
    5a94:	f2 bd       	out	0x22, r31	; 34
    5a96:	e1 bd       	out	0x21, r30	; 33
    5a98:	f8 9a       	sbi	0x1f, 0	; 31
    5a9a:	31 96       	adiw	r30, 0x01	; 1
    5a9c:	00 b4       	in	r0, 0x20	; 32
    5a9e:	0d 92       	st	X+, r0
    5aa0:	41 50       	subi	r20, 0x01	; 1
    5aa2:	50 40       	sbci	r21, 0x00	; 0
    5aa4:	b8 f7       	brcc	.-18     	; 0x5a94 <__eerd_blraw_m32u4+0x8>
    5aa6:	08 95       	ret

00005aa8 <_exit>:
    5aa8:	f8 94       	cli

00005aaa <__stop_program>:
    5aaa:	ff cf       	rjmp	.-2      	; 0x5aaa <__stop_program>
